---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/4/7 12:30
---
local ProcessBase = T(Game, "ProcessBase")
ProcessBase.__index = ProcessBase

function ProcessBase:setStateAndTimer(state, time, func)
    if self.curState ~= state then
        self:setState(state)
    end
    if self.stateTimer then
        self.stateTimer()
        self.stateTimer = nil
    end
    if func and time >= 0 then
        self.stateTimer = World.Timer(time, func)
    end
end

function ProcessBase:setState(state)
    self.curState = state
end

function ProcessBase:getState()
    return self.curState
end

function ProcessBase:getPlayersInProcess()
    return self.curPlayers
end

function ProcessBase:onWaiting()
    self:setStateAndTimer(Define.ProcessState.Waiting, self.waitPlayerTime, self:waitPlayerOnTick())
end

function ProcessBase:waitPlayerOnTick()
    if self.playersCount < self.startPlayers then
        self:onWaiting()
    else
        self:waitingEnd()
    end
end

function ProcessBase:waitingEnd()
    self:prepareOnTick()
    self:setStateAndTimer(Define.ProcessState.Prepare, self.prepareTime, self:prepareEnd())
end

function ProcessBase:prepareOnTick()

end

function ProcessBase:prepareEnd()
    self:onStart()
    self:setStateAndTimer(Define.ProcessState.GameStart, self.gameTime, self:processOver())
end

function ProcessBase:onStart()

end

function ProcessBase:processOver()
    self:onProcessOver()
    self:setStateAndTimer(Define.ProcessState.GameOver, self.gameOverTime, self:closeServer())
end

function ProcessBase:onProcessOver()

end

function ProcessBase:closeServer()
    if not self.needCloseServer then
        --destroy
        return
    end
    self:setStateAndTimer(Define.ProcessState.WaitClose, self.waitCloseTime, Game.StopServer())
end

function ProcessBase:entityJoin(entity)
    local objID = entity.objID
    if entity.isPlayer then
        self.playerCount = self.playerCount + 1
        self.entityList[objID] = entity
    end
end

function ProcessBase:entityOut(entity)

end

function ProcessBase:isEntityInProcess()

end

function ProcessBase:doJudge()

end