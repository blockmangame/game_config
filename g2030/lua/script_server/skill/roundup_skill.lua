---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by qjc.
--- DateTime: 2020/4/13 15:40
---
local SkillBase = Skill.GetType("Base")
local RoundUpSkill = Skill.GetType("RoundUp")
RoundUpSkill.timer = nil

local function roundUp(self, packet, from)
    if not from then
        return
    end

    local RoundUpAttackData = from:data("main").RoundUpAttackData
    local entityIndex = RoundUpAttackData.entityIndex
    local nearbyEntities = RoundUpAttackData.nearbyEntities
    if entityIndex > 0 then
        local pTarget = nearbyEntities[entityIndex]
        if pTarget then
            local d = Lib.tov3(pTarget:getPosition()) - Lib.tov3(from:getPosition())
            local yaw = math.atan(d.z, d.x)
            pTarget:setRotationYaw(math.deg(yaw) - 90)
            pTarget.forceTargetPos = from:getPosition()
            pTarget.forceTime = 5

            local RoundUpAttackData = {
                nearbyEntities = nearbyEntities,
                entityIndex = entityIndex - 1,
            }
            from:data("main").RoundUpAttackData = RoundUpAttackData
        end
    else
        from:data("main").RoundUpAttackData = nil
        RoundUpSkill.timer = nil
        return false
    end

    return true
end

function RoundUpSkill:cast(packet, from)
    if not self:canCast(packet, from) then
        return
    end

    local nearbyEntities = from:getNearbyEntities(self.RoundUpRange)
    local ret = {}
    for _, entity in pairs(nearbyEntities) do
        if entity.objID ~= from.objID  and entity.isPlayer then
            --todo delete teammate
            ret[#ret + 1] = entity
        end
    end

    local RoundUpAttackData = {
        nearbyEntities = ret,
        entityIndex = #ret,
    }

    from:data("main").RoundUpAttackData = RoundUpAttackData
    RoundUpSkill.timer = from:timer(1, roundUp, self, packet, from)
    SkillBase.cast(self, packet, from)
end

function RoundUpSkill:canCast(packet, from)
    return SkillBase.canCast(self, packet, from)
end