---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by JY-032.
--- DateTime: 2020/4/16 16:21
---

local cachekey = "world"
local isOpen = false

---排行榜的种类:1.击杀排行榜 2.肌肉值排行榜，3.boss攻击....
local RankKind = {
    RankKill = 1,
    RankMuscle = 2,
}

function M:init()
    WinBase.init(self, "NinjaRank.json")
    print("!!!WinBase----NinjaRank..........")
    self.RankList = self:child("NinjaRank-List")
    self.RankList:SetMoveAble(false)
    self.cachekey = "world"

    Lib.subscribeEvent(Event.EVENT_RECEIVE_RANK_DATA, function(rankType)
        if rankType == self.showRankType then
            self:refresh()
        end
    end)
    Lib.subscribeEvent(Event.EVENT_USER_INFO_CACHE_ACCOMPLISH, function(key)
        if key == self.cachekey then
            local rankType = self.showRankType
            local rankData = Rank.GetRankData(1)
            ---发包从数据里请求数据其他字段的值
            self:sendPacketRequestData(rankData[rankType])
            self:refreshRankList(self.RankList, rankData[rankType])
        end
    end)
    Lib.subscribeEvent(Event.EVENT_RANK_INFO_UPDATE, function(userId, killNum, muscle, integral)
        self:updateRankKill(userId, killNum, muscle, integral)
    end)
end

---发包从数据里请求数据其他字段的值
function M:sendPacketRequestData(rankData)

    local typeData = rankData or {}
    self.queue = {}
    local userId = CGame.instance:getPlatformUserId() or 0
    self.queue[userId] = true
    for i = 1, #typeData do
        local data = typeData[i]
        self.queue[data.userId or 0] = true
    end
    local userId = {}
    for id, _ in pairs(self.queue) do
        userId[#userId + 1] = id
    end
    ---得到所有的userid,
    print("---mapid---" .. Lib.v2s(userId))
    Me:sendPacket({
        pid = "getKill",
        userId = userId
    })
end

---接收到数据，更新界面
function M:updateRankKill(userId, killNum, muscle, integral)
    local rankType = self.showRankType
    local rankData = Rank.GetRankData(1)

    for i, v in pairs(rankData[rankType]) do
        if userId == v.userId then
            v.killNum = killNum
            v.muscle = muscle
            v.integral = integral
        end
    end
    self:refreshRankList(self.RankList, rankData[rankType])
end

function M:refresh()
    print("---refresh---")
    local rankType = self.showRankType
    local rankData = Rank.GetRankData(rankType)
    local typeData = rankData[rankType] or {}
    self.queue = {}
    local userId = CGame.instance:getPlatformUserId() or 0
    self.queue[userId] = true
    for i = 1, #typeData do
        local data = typeData[i]
        self.queue[data.userId or 0] = true
    end
    local mapid = {}
    for id, _ in pairs(self.queue) do
        mapid[#mapid + 1] = id
    end
    UserInfoCache.LoadCacheByUserIds(mapid, function()
        Lib.emitEvent(Event.EVENT_USER_INFO_CACHE_ACCOMPLISH, cachekey)
    end)
end

function M:refreshRankList(rankList, rankData)
    if not rankList or not rankData then
        return
    end
    rankList:ClearAllItem()
    rankList:SetProperty("BetweenDistance", 3)
    for i = 1, #rankData do
        local rankItem = GUIWindowManager.instance:LoadWindowFromJSON("NinjaRankItem.json")
        rankItem:SetArea({ 0, 10 }, { 0, 0 }, { 1, 0 }, { 0, 68 })
        self:updateRankItem(rankItem, rankData[i])
        rankList:AddItem(rankItem)
    end
    rankList:SetTouchable(true)
    rankList:LayoutChild()
end

function M:updateRankItem(rankItem, data)
    self:updateRankUI(rankItem)
    if not data then
        return
    end
    local rank = data.rank
    rankItem:setData("userId", data.userId)

    local nameColor = { 180.0 / 255, 64.0 / 255, 64.0 / 255 }

    local nameWdg = rankItem:child("NinjaRankItem-name")
    nameWdg:SetTextColor(nameColor)
    nameWdg:SetText(data.name)

    local numberColor = { 180.0 / 255, 104.0 / 255, 15.0 / 255 }

    if self.showRankType == RankKind.RankKill then
        self.killWdg:SetText(data.score or 0)
        self.killWdg:SetVisible(true)
        self.killWdg:SetTextColor(numberColor)
        self.integralWdg:SetText(data.integral or 0)
        self.integralWdg:SetVisible(true)

    elseif self.showRankType == RankKind.RankMuscle then
        self.muscleWdg:SetText(data.score or 0)
        self.muscleWdg:SetVisible(true)
        self.muscleWdg:SetTextColor(numberColor)
        self.killWdg:SetText(data.integral or 0)
    end

    local numRankWdg = rankItem:child("NinjaRankItem-rank")
    if (rank > 3) then
        numRankWdg:SetVisible(true)
        numRankWdg:SetTextColor(numberColor)
        numRankWdg:SetText(rank)
    else
        numRankWdg:SetVisible(true)
        numRankWdg:SetTextColor(numberColor)
        numRankWdg:SetText(rank)
    end
end

---排版物品的ui布局
function M:updateRankUI(rankItem)
    if self.showRankType == RankKind.RankKill then
        self.killWdg = rankItem:child("NinjaRankItem-parameter1")
        self.integralWdg = rankItem:child("NinjaRankItem-parameter2")
        self.advanceWdg = rankItem:child("NinjaRankItem-parameter3")
    elseif self.showRankType == RankKind.RankMuscle then
        self.muscleWdg = rankItem:child("NinjaRankItem-parameter1")
        self.killWdg = rankItem:child("NinjaRankItem-parameter2")
        self.advanceWdg = rankItem:child("NinjaRankItem-parameter3")
    end
    self:refreshTextLang()
end
---排版标题的的ui布局及多语言
function M:refreshTextLang()
    if self.showRankType == RankKind.RankKill then
        self:child("NinjaRank-parameter1"):SetText(Lang:toText("gui.kill"))
        self:child("NinjaRank-parameter2"):SetText(Lang:toText("gui.integral"))
        self:child("NinjaRank-parameter3"):SetText(Lang:toText("gui.advance"))
    elseif self.showRankType == RankKind.RankMuscle then
        self:child("NinjaRank-parameter1"):SetText(Lang:toText("gui.muscle"))
        self:child("NinjaRank-parameter2"):SetText(Lang:toText("gui.integral"))
        self:child("NinjaRank-parameter3"):SetText(Lang:toText("gui.advance"))
    end
end

---rankType 对应ui配置表的args字段,打开不同排行榜的参数:1击杀榜，2积分榜，3.肌肉值榜.....
function M:onOpen(rankType)
    print("--onOpen---rankType-" .. rankType)
    WinBase.onOpen(self)
    isOpen = true
    if rankType == self.showRankType then
        return
    end
    self.showRankType = rankType
    self:refresh()
    self:refreshRankList(self.RankList)
end

function M:onClose()
    isOpen = false
end

function M:show()
    WinBase.show(self)
end

return M