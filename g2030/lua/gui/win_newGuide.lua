---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by JY-032.
--- DateTime: 2020/3/25 15:19
---

function M:init()
    print("!!!!!!!newGuide")
    WinBase.init(self, "newGuide.json", false)
    self:intConfig()
    self.index = 1
    self.time = 0
    self.frameTime = 0

    self.ivMaskTop = self:child("newGuide-Mask-Top")
    self.ivMaskBottom = self:child("newGuide-Mask-Bottom")
    self.ivMaskLeft = self:child("newGuide-Mask-Left")
    self.ivMaskRight = self:child("newGuide-Mask-Right")

    self.ivMaskTop2 = self:child("newGuide-Mask-Top2")
    self.ivMaskBottom2 = self:child("newGuide-Mask-Botton2")
    self.ivMaskCreter = self:child("newGuide-Mask-Center")
    self.ivMaskTop2:SetVisible(false)
    self.ivMaskBottom2:SetVisible(false)
    self.ivMaskCreter:SetVisible(false)

    self.llCenter = self:child("newGuide-Center")
    self.ivDetail = self:child("newGuide-Detail-Img")
    self.tvDesc = self:child("newGuide-Content-Desc")
    self.ivArrows = self:child("newGuide-Arrows")
    self.ivArrows2 = self:child("newGuide-Arrows2")

    self.btnNext = self:child("newGuide-Next-Button")
    self.btnNext:SetEnabled(false)

    self.tvTitleName = self:child("newGuide-Title-Name")
    self.tvTitleName:SetText(Lang:toText("gui_new_guide_title_name"))

    self:subscribe(self.btnNext, UIEvent.EventButtonClick, function()
        self:onClickNextButton()
    end)

end

function M:onClickNextButton()
    self.index = self.index + 1
    self:onShowDetail()
end

function M:startCountDown()
    local tiemStr = Lang:toText("gui_new_guide_next")
    self.countDownFunc = World.Timer(20, function()
        if self.time > 0 then
            self.btnNext:SetEnabled(false)
            tiemStr = Lang:toText("gui_new_guide_next") .. " (" .. tostring(self.time) .. ")"
            self.btnNext:SetText(tiemStr)
            self.time = self.time - 1
            return true
        else
            self.btnNext:SetEnabled(true)
            self.btnNext:SetText(Lang:toText("gui_new_guide_next"))
            return false
        end
    end)

end

function M:setNextBtnStatus()
    self:startCountDown()
    local tiemStr = Lang:toText("gui_new_guide_next") .. " (" .. tostring(self.time) .. ")"
    self.btnNext:SetText(tiemStr)
    self.btnNext:SetEnabled(false)
end

function M:onShowDetail()
    local cfg = self:getGuideById(self.index)
    if cfg == nil then
        self:hide()
        return
    end
    self.time = cfg.Time
    self:setNextBtnStatus()
    self.ivDetail:SetImage(cfg.Img)
    self.tvDesc:SetText(Lang:toText(cfg.Desc))
    self:setUiArea()
end

function M:setUiArea()
    local cfg = self:getGuideById(self.index)
    if cfg == nil then
        self:hide()
        return
    end

    local showArea = self:getAreaByString(cfg.ShowArea)
    local arrowsArea = self:getAreaByString(cfg.ArrowsArea)
    local arrowsArea2 = self:getAreaByString(cfg.ArrowsArea2)
    local lucArea1 = self:getLucencyAreaByString(cfg.LucencyArea)
    local lucArea2 = self:getLucencyAreaByString(cfg.LucencyArea2)
    if showArea == nil or lucArea1 == nil or arrowsArea == nil or lucArea2 == nil or arrowsArea2 == nil then
        return
    end

    self.llCenter:SetArea({ showArea.posX, 0 }, { showArea.posY, 0 }, { showArea.areaX, 0 }, { showArea.areaY, 0 })
    self.ivArrows:SetArea({ arrowsArea.posX, 0 }, { arrowsArea.posY, 0 }, { 0, arrowsArea.areaX }, { 0, arrowsArea.areaY })
    self.ivArrows:SetImage(cfg.ArrowsImg)

    self.ivArrows2:SetArea({ arrowsArea2.posX, 0 }, { arrowsArea2.posY, 0 }, { 0, arrowsArea2.areaX }, { 0, arrowsArea2.areaY })
    self.ivArrows2:SetImage(cfg.ArrowsImg2)

    self.ivMaskTop:SetArea({ lucArea1.pos_x_1, lucArea1.pos_x_2 }, { 0, 0 }, { lucArea1.size_x_1, lucArea1.size_x_2 }, { lucArea1.pos_y_1, lucArea1.pos_y_2 })
    self.ivMaskBottom:SetArea({ lucArea1.pos_x_1, lucArea1.pos_x_2 }, { lucArea1.pos_y_1 + lucArea1.size_y_1, lucArea1.pos_y_2 + lucArea1.size_y_2 }, { lucArea1.size_x_1, lucArea1.size_x_2 }, { 1 - lucArea1.pos_y_1 - lucArea1.size_y_1, -lucArea1.pos_y_2 - lucArea1.size_y_2 })
    self.ivMaskLeft:SetArea({ 0, 0 }, { 0, 0 }, { lucArea1.pos_x_1, lucArea1.pos_x_2 }, { 1, 0 })

    if cfg.IsShowLucencyArea2 == 1 then
        self.ivMaskTop2:SetVisible(true)
        self.ivMaskBottom2:SetVisible(true)
        self.ivMaskCreter:SetVisible(true)
        self.ivArrows2:SetVisible(true)
        self.ivMaskTop2:SetArea({ lucArea2.pos_x_1, lucArea2.pos_x_2 }, { 0, 0 }, { lucArea2.size_x_1, lucArea2.size_x_2 }, { lucArea2.pos_y_1, lucArea2.pos_y_2 })
        self.ivMaskBottom2:SetArea({ lucArea2.pos_x_1, lucArea2.pos_x_2 }, { lucArea2.pos_y_1 + lucArea2.size_y_1, lucArea2.pos_y_2 + lucArea2.size_y_2 }, { lucArea2.size_x_1, lucArea2.size_x_2 }, { 1 - lucArea2.pos_y_1 - lucArea2.size_y_1, -lucArea2.pos_y_2 - lucArea2.size_y_2 })
        self.ivMaskCreter:SetArea({ lucArea1.pos_x_1 + lucArea1.size_x_1, lucArea1.pos_x_2 + lucArea1.size_x_2 }, { 0, 0 }, { lucArea2.pos_x_1 - lucArea1.pos_x_1 - lucArea1.size_x_1, lucArea2.pos_x_2 - lucArea1.pos_x_2 - lucArea1.size_x_2 }, { 1, 0 })
        self.ivMaskRight:SetArea({ lucArea2.pos_x_1 + lucArea2.size_x_1, lucArea2.pos_x_2 + lucArea2.size_x_2 }, { 0, 0 }, { 1 - lucArea2.pos_x_1 - lucArea2.size_x_1, -lucArea2.pos_x_2 - lucArea2.size_x_2 }, { 1, 0 })
    else
        self.ivArrows2:SetVisible(false)
        self.ivMaskTop2:SetVisible(false)
        self.ivMaskBottom2:SetVisible(false)
        self.ivMaskCreter:SetVisible(false)
        self.ivMaskRight:SetArea({ lucArea1.pos_x_1 + lucArea1.size_x_1, lucArea1.pos_x_2 + lucArea1.size_x_2 }, { 0, 0 }, { 1 - lucArea1.pos_x_1 - lucArea1.size_x_1, -lucArea1.pos_x_2 - lucArea1.size_x_2 }, { 1, 0 })
    end
end

function M:intConfig()
    print("readGameCsv..new_guide intConfig")
    self.Guides = {}
    --local temp = Lib.readGameCsv("new_guide.csv") or {}
    local temp = Lib.read_csv_file(Root.Instance():getGamePath() .. "config/newGuide.csv", 3)
    for _, Value in pairs(temp) do
        local data = {
            Id = tonumber(Value.n_id) or 1,
            Desc = Value.s_desc or "",
            Img = Value.s_img or "",
            Time = tonumber(Value.n_time) or 1,
            ShowArea = Value.s_showArea or "",
            LucencyArea = Value.s_lucencyArea or "",
            LucencyArea2 = Value.s_lucencyArea2 or "",
            ArrowsArea = Value.s_arrowsArea or "",
            ArrowsImg = Value.s_arrowsImg or "",
            IsShowLucencyArea2 = tonumber(Value.n_isShowLucencyArea2) or 0,
            ArrowsArea2 = Value.s_arrowsArea2 or "",
            ArrowsImg2 = Value.s_arrowsImg2 or "",
        }
        self.Guides[data.Id] = data
    end
end

function M:getGuideById(Id)
    for _, Value in pairs(self.Guides) do
        if Value.Id == Id then
            return Value
        end
    end
    return nil
end

function M:getAreaByString(string)
    local area = Lib.split(string, "#")
    if #area < 4 then
        return nil
    end
    local data = {}
    data.posX = tonumber(area[1])
    data.posY = tonumber(area[2])
    data.areaX = tonumber(area[3])
    data.areaY = tonumber(area[4])
    return data
end


function M:getLucencyAreaByString(string)
    local area = Lib.split(string, "#")
    if #area < 8 then
        return nil
    end

    local data = {}
    data.pos_x_1 = tonumber(area[1])
    data.pos_x_2 = tonumber(area[2])
    data.pos_y_1 = tonumber(area[3])
    data.pos_y_2 = tonumber(area[4])
    data.size_x_1 = tonumber(area[5])
    data.size_x_2 = tonumber(area[6])
    data.size_y_1 = tonumber(area[7])
    data.size_y_2 = tonumber(area[8])
    return data
end

function M:onOpen(showArg)
    self:onShowDetail()
end


function M:onShow(show)
    if show then
        UI:openWnd("newGuide",true)
        self.index = 1
        self:show(true)
        self:onShowDetail()
    else
        self:hide()
        UI:closeWnd("newGuide")
    end
end

function M:onClose()

end

return M