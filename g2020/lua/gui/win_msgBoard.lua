---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luo.
--- DateTime: 2019/11/8 17:01
---

local ViewId = {
    CLOSE = 1,
    SEND = 2,
    EDIT = 3,
}

function M:init()
    WinBase.init(self, "MsgBoard.json", true)
    self.id = nil
    self.msgList = {}
    self:initMain()
    self:initMsgs()
end

function M:onOpen(worksId)
    self.id = worksId
    self:loadWorksComments()
end

function M:onClose()

end

function M:initMain()

    self:child("MsgBoard-Input"):SetTextVertAlign(0)

    self:subscribe(self:child("MsgBoard-Close"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.CLOSE)
    end)

    self:subscribe(self:child("MsgBoard-Send"), UIEvent.EventButtonClick, function()
        self:onSend()
    end)

    self:subscribe(self:child("MsgBoard-Input"), UIEvent.EventEditTextInput, function()
        self:onInput()
    end)

    self:subscribe(self:child("MsgBoard-Input"), UIEvent.EventWindowTouchUp, function()
        self.inputBox = self:child("MsgBoard-Input")
        self.inputBoxMsg = self:child("MsgBoard-Input-Msg")
        local msg = self.inputBoxMsg:GetPropertyString("Text","")
        self.inputBox:SetText(msg)
        self.inputBoxMsg:SetText("")
    end)


end

function M:onClick(viewId)
    if viewId == ViewId.CLOSE then
        UI:closeWnd(self)
    end
end

function M:onUpdate(data)
    self.msgList = data or {}
    self:initMsgs()
end

function M:initMsgs()
    self.lvMsgList = self:child("MsgBoard-Msgs")
    self.lvMsgList:ClearAllItem()
    for _, v in pairs(self.msgList) do
        local itemView = GUIWindowManager.instance:LoadWindowFromJSON("MsgBoardItem.json")
        local nickName = v.nickName or ""
        if v.userId == Me.platformUserId then
            nickName = Lang:getMessage("gui.me")
        end
        itemView:child("MsgBoardItem-UserName"):SetText(nickName)
        itemView:child("MsgBoardItem-Msg"):SetText(v.comment or "")
        self.lvMsgList:AddItem(itemView, false)
        local height = itemView:child("MsgBoardItem-Msg"):GetRenderText():GetTextStringHigh()
        itemView:SetHeight({0, height + 43})
    end
    self.lvMsgList:SetScrollOffset(0)
    self.lvMsgList:LayoutChild()
end

function M:addMsg(msg)
    local itemView = GUIWindowManager.instance:LoadWindowFromJSON("MsgBoardItem.json")
    local nickName = Lang:getMessage("gui.me")
    itemView:child("MsgBoardItem-UserName"):SetText(nickName)
    itemView:child("MsgBoardItem-Msg"):SetText(msg)
    self.lvMsgList:AddItem(itemView, false)
    local height = itemView:child("MsgBoardItem-Msg"):GetRenderText():GetTextStringHigh()
    itemView:SetHeight({0, height + 43})
    self.lvMsgList:SetScrollOffset(0)
    self.lvMsgList:LayoutChild()
end

function M:onInput()
    self.inputBox = self:child("MsgBoard-Input")
    self.inputBox:SetMaxLength(150)
    self.inputBoxMsg = self:child("MsgBoard-Input-Msg")
    local msg = self.inputBox:GetPropertyString("Text","")
    self.inputBox:SetText("")
    self.inputBoxMsg:SetText(msg)
end

function M:onSend()
    self.inputBox = self:child("MsgBoard-Input")
    local msg = self.inputBoxMsg:GetPropertyString("Text","")
    local str = string.gsub(msg, "%s", "")
    if string.len(msg) == 0 or #str == 0 then
        self.inputBox:SetText("")
        return
    end

    msg = string.gsub(msg, "^%s*(.-)%s*$", "%1")

    if not World.CurWorld:isContainSensitiveWord(msg) then
        table.insert(self.msgList, 1,{nickName = Me.name, comment = msg})
        Me:commentWorks(self.id, msg)
        self.inputBoxMsg:SetText("")
        self:addMsg(msg)
    else
		UILib.openChoiceDialog({msgText = "msg_has_sensitive_word"})
    end
end

function M:loadWorksComments()
    if self.id == nil then
        return
    end
    AsyncProcess.LoadWorksComments(self.id, function (response)
        self:onUpdate(response.code == 1 and response.data or {})
    end)
end

return M