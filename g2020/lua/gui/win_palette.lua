---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luo.
--- DateTime: 2019/11/8 17:01
---
local paletteEditor = require "special.palette_editor"
local ViewId = {
    CLOSE = 1,
    ENLARGE = 2,
    PAINT = 3,
    ERASER = 4,
    UNDO = 5,
    REDO = 6,
    SAVE = 7,
    SHRINK = 8,
    HELP = 9,
    Drag = 10,
}

local OptFunc = {}

local OP_TYPE = {
    DRAW = 0,
    MOVE = 1,
    CLEAR = 2
}

function M:init()
    WinBase.init(self, "Palette.json", true)
    self.curSelectPen = nil
    self.editWorksId = nil
    self.isEdit = false
    self.isExitClear = true
    self.opType = OP_TYPE.DRAW
    self.isUseHistory = false
    self:initCanvas()
    self:initMain()
    self:initPens()
    self:updateHistory()

end

function M:onOpen(works)
    UI:closeWnd("toolbar")
    if works ~= nil and works.graffitiId ~= nil and works.picUrl ~= nil then
        self.isEdit = true
        self.editWorksId = works.graffitiId
        self.paletteEditor:getDrawingBoard():clean()
        local texture = UI:getViewTexture(works.picUrl)
        if not texture then
            self.paletteEditor:getDrawingBoard():getBlockTexture():loadColorInfoFromUrl(works.picUrl)
        else
            self.paletteEditor:getDrawingBoard():replaceTexture(texture)
        end
    else
        self.isEdit = false
        self.editWorksId = nil
    end
    self:child("Palette-Function-Save"):SetEnabled(true)
    self.isExitClear = true
end

function M:onClose()
    UI:openWnd("toolbar")
    self.isEdit = false
    self.editWorksId = nil
    if self.isExitClear then
        self.paletteEditor:getDrawingBoard():clean()
        self:onPenChange(OP_TYPE.DRAW)
    end

    self.paletteEditor:getDrawingBoard():resetScale()
    self.ivCanvasContent:ClipTexture(self.paletteEditor:getDrawingBoard():getShowArea())
    
    if self.defaultPen ~= nil then
        self.defaultPen:TouchUp({x = 0 , y = 0})
        self.ivPen:SetXPosition({0, 0})
        self.ivPen:SetYPosition({0, 0})
    end
end

function M:initMain()
    self:subscribe(self:child("Palette-Close"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.CLOSE)
    end)

    self:subscribe(self:child("Palette-Function-Enlarge"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.ENLARGE)
    end)

    self:subscribe(self:child("Palette-Function-Paint"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.PAINT)
    end)

    self:subscribe(self:child("Palette-Function-Eraser"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.ERASER)
    end)

    self:subscribe(self:child("Palette-Function-Undo"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.UNDO)
    end)

    self:subscribe(self:child("Palette-Function-Redo"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.REDO)
    end)

    self:subscribe(self:child("Palette-Function-Save"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.SAVE)
    end)

    self:subscribe(self:child("Palette-Function-Shrink"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.SHRINK)
    end)

    self:subscribe(self:child("Palette-Function-Help"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.HELP)
    end)

    self:subscribe(self:child("Palette-Drag"), UIEvent.EventButtonClick, function()
        self:onClick(ViewId.Drag)
    end)

    Lib.subscribeEvent(Event.EVENT_UPDATE_UI_DATA, function (UIName, data)
        if UI:isOpen(self) and UIName == "win_palette" and OptFunc[data.func] then
            OptFunc[data.func](self)
        end
    end)
end

OptFunc.enlargeDrawingBoard = function(self)
    self.paletteEditor:getDrawingBoard():enlarge()
    self.ivCanvasContent:ClipTexture(self.paletteEditor:getDrawingBoard():getShowArea())
end

OptFunc.shrinkDrawingBoard = function(self)
    self.paletteEditor:getDrawingBoard():shrink()
    self.ivCanvasContent:ClipTexture(self.paletteEditor:getDrawingBoard():getShowArea())
end

function M:onClick(viewId)

    if viewId == ViewId.CLOSE then
        UILib.openChoiceDialog({msgText = "palette_exit_msg"}, function(isCancel)
            self.isExitClear = isCancel
            Lib.emitEvent(Event.EVENT_UPDATE_GUIDE_DATA, "palette")
            UI:closeWnd(self)
        end)
    end

    if viewId == ViewId.ENLARGE then
        OptFunc.enlargeDrawingBoard(self)
    end

    if viewId == ViewId.SHRINK then
        OptFunc.shrinkDrawingBoard(self)
    end

    if viewId == ViewId.PAINT then
        self:onPenChange(OP_TYPE.DRAW)
        self:updateHistory()
        self:child("Palette-Function-Paint"):SetNormalImage("set:palette.json image:paint_pre")
        if self.curSelectPen then
            self.curSelectPen:SetSelected(true)
        end
    else
        self:child("Palette-Function-Paint"):SetNormalImage("set:palette.json image:paint")
    end

    self:child("Palette-Canvas-Tinter"):SetVisible(viewId == ViewId.PAINT)

    if viewId == ViewId.ERASER then
        self:onPenChange(OP_TYPE.CLEAR)
    end

    if viewId == ViewId.SAVE then
        if self.paletteEditor:getDrawingBoard():getBlockTexture():isEmpty() then
            return
        end
        local fileName = tostring(Me.platformUserId) .. "_" .. tostring(os.time()) .. ".works"
        local savePath = Root.Instance():getWriteablePath() .. fileName
        self.paletteEditor:getDrawingBoard():saveColorInfoToFile(savePath)
        self:child("Palette-Function-Save"):SetEnabled(false)
        AsyncProcess.UploadFile(fileName, savePath, "works",function (response)
            if response.code == 1 then
                Me:sendTrigger(Me, "SHOW_SAVE_WORKS_TIP", Me , nil, {url = response.data, isEdit = self.isEdit, worksId = self.editWorksId})
            end
        end)
        Me:timer(5 * 20, function ()
            self:child("Palette-Function-Save"):SetEnabled(true)
            return false
        end)
    end

    if viewId == ViewId.UNDO then
        self.paletteEditor:getDrawingBoard():undo()
    end

    if viewId == ViewId.REDO then
        self.paletteEditor:getDrawingBoard():redo()
    end

    if viewId == ViewId.HELP then
        Me:sendTrigger(Me, "SHOW_PALETTE_HELP", Me , nil)
    end

    if viewId == ViewId.Drag then 
        print(" on click drag")
        self:onPenChange(OP_TYPE.MOVE)
    end

end

function M:initCanvas()
    self.ivPen = self:child("Palette-Pen")
    self.ivCanvasContent = self:child("Palette-Canvas-Content")
    self.ivTinterContent = self:child("Palette-Canvas-Tinter-Content")

    self.ivCanvasContent:setMaterial(5)
    self.ivCanvasContent:setEnableLongTouch(true)
    
    local tx = self.ivTinterContent:GetPixelSize().x
    local ty = self.ivTinterContent:GetPixelSize().y

    local cx = self.ivCanvasContent:GetPixelSize().x
    local cy = self.ivCanvasContent:GetPixelSize().y

    self.paletteEditor = paletteEditor
    self.paletteEditor:init(cx, cy, tx, ty, function()
        self:updateHistory()
    end)

    self.paletteEditor:getDrawingBoard():onSize(cx, cy, function (width, height)
        --self.ivCanvasContent:SetArea( { 0, 0 }, { 0, 0 }, { 0, width }, { 0, height})
        self:child("Palette-Canvas"):SetArea({ 0, 0 }, { 0, 0 }, { 0, width + 30 }, { 0, height + 30})
    end)

    self.ivTinterContent:SetImage(self.paletteEditor:getTinterBoard():getTextureName())
    self.ivCanvasContent:SetImage(self.paletteEditor:getDrawingBoard():getTextureName())


    self:subscribe(self.ivCanvasContent, UIEvent.EventWindowClick, function(_, x, y)
        --local winPos = CoordConverter.screenToWindow1(self.ivCanvasContent, {x = x, y = y})
        --self.paletteEditor:getDrawingBoard():onClick(winPos)
        --self.ivPen:SetXPosition({0, winPos.x})
        --self.ivPen:SetYPosition({0, winPos.y - 61})
        --self:child("Palette-Canvas-Tinter"):SetVisible(false)
        --self:child("Palette-Function-Paint"):SetNormalImage("set:palette.json image:paint")
    end)

    self:subscribe(self.ivCanvasContent, UIEvent.EventWindowTouchMove, function(_, x, y)
        local winPos = CoordConverter.screenToWindow1(self.ivCanvasContent, {x = x, y = y})
        self.paletteEditor:getDrawingBoard():onTouchMove(winPos)
        self.ivPen:SetXPosition({0, winPos.x})
        self.ivPen:SetYPosition({0, winPos.y - 61})
        self:child("Palette-Canvas-Tinter"):SetVisible(false)
        self:child("Palette-Function-Paint"):SetNormalImage("set:palette.json image:paint")
        if self.paletteEditor:getDrawingBoard():isShowAreaChanged() then 
            self.ivCanvasContent:ClipTexture(self.paletteEditor:getDrawingBoard():getShowArea())
        end
    end)

    self:subscribe(self.ivCanvasContent, UIEvent.EventWindowTouchDown, function(_, x, y)
        local winPos = CoordConverter.screenToWindow1(self.ivCanvasContent, {x = x, y = y})
        self.paletteEditor:getDrawingBoard():onTouchDown(winPos)
        self.ivPen:SetXPosition({0, winPos.x})
        self.ivPen:SetYPosition({0, winPos.y - 61})
        self:child("Palette-Canvas-Tinter"):SetVisible(false)
        self:child("Palette-Function-Paint"):SetNormalImage("set:palette.json image:paint")
    end)

    self:subscribe(self.ivCanvasContent, UIEvent.EventWindowTouchUp, function(_, x, y)
        local winPos = CoordConverter.screenToWindow1(self.ivCanvasContent, {x = x, y = y})
        self.paletteEditor:getDrawingBoard():onTouchUp(winPos)
        self:child("Palette-Function-Save"):SetEnabled(true)
    end)

    self:subscribe(self.ivCanvasContent, UIEvent.EventMotionRelease, function(_, x, y)
        local winPos = CoordConverter.screenToWindow1(self.ivCanvasContent, {x = x, y = y})
        self.paletteEditor:getDrawingBoard():onTouchUp(winPos)
        self:child("Palette-Function-Save"):SetEnabled(true)
    end)

    self:subscribe(self.ivCanvasContent, UIEvent.EventSizeChanged, function(_)
        local x = self.ivCanvasContent:GetPixelSize().x
        local y = self.ivCanvasContent:GetPixelSize().y
        self.paletteEditor:getDrawingBoard():onSize(x, y, function (width, height)
            self.ivCanvasContent:SetArea( { 0, 0 }, { 0, 0 }, { 0, width }, { 0, height})
        end)
        self.ivCanvasContent:SetImage(self.paletteEditor:getDrawingBoard():getTextureName())
    end)

    self:subscribe(self.ivTinterContent, UIEvent.EventSizeChanged, function(_)
        local x = self.ivTinterContent:GetPixelSize().x
        local y = self.ivTinterContent:GetPixelSize().y
        self.paletteEditor:getTinterBoard():onSize(x, y)
        self.ivTinterContent:SetImage(self.paletteEditor:getTinterBoard():getTextureName())
    end)

    self:subscribe(self.ivTinterContent, UIEvent.EventWindowClick, function(_, x, y)
        local winPos = CoordConverter.screenToWindow1(self.ivTinterContent, {x = x, y = y})
        self:onPenChange(OP_TYPE.DRAW)
        self.paletteEditor:getTinterBoard():onClick(winPos)
        if self.curSelectPen then
            self.curSelectPen:SetSelected(true)
        end
    end)
end

function M:updateHistory()
    self.layoutHistory = self:child("Palette-History")
    self.layoutHistory:CleanupChildren()

    local colorHistory = self.paletteEditor:getColorHistory()
    for i = 1, 5 do
        if #colorHistory >= i then
            local itemView = GUIWindowManager.instance:CreateGUIWindow1("Layout", "")
            itemView:SetArea({0, 0}, {0, (i-1) * 100}, {0, 86}, {0, 87})
            itemView:SetProperty("StretchType", "NineGrid")
            if self.isUseHistory and i == 1 then
                itemView:SetBackImage("set:palette.json image:history_bg_pre")
            else
                itemView:SetBackImage("set:palette.json image:history_bg")
            end
            local circleFrontSight = UIMgr:new_widget("circel")
            itemView:AddChildWindow(circleFrontSight)
            circleFrontSight:invoke("setThk", 16)
            circleFrontSight:invoke("setSolid", 1.0)
            circleFrontSight:invoke("setRadius", 16)
            
            local color = colorHistory[i]
            circleFrontSight:invoke("setColor", color[1], color[2], color[3], color[4])
            self:subscribe(itemView, UIEvent.EventWindowClick, function(_, x, y)
                self:onPenChange(OP_TYPE.DRAW)
                self.isUseHistory = true
                self.paletteEditor:pickColorFromHistory(color)
                if self.curSelectPen then
                    self.curSelectPen:SetSelected(false)
                end
            end)

            self.layoutHistory:AddChildWindow(itemView)
        end
    end
end

function M:initPens()
    self.lvPens = self:child("Palette-Pens")
    for i, v in ipairs(self.paletteEditor:getPenList()) do
        local itemView = GUIWindowManager.instance:CreateGUIWindow1("RadioButton", "PensItem"..i)
        itemView:SetArea({0, (i - 1) * (19 + 60)}, {0, 0}, {0, 60}, {0, 61})
        itemView:SetNormalImage(v.iconNor)
        itemView:SetPushedImage(v.iconPre)
        self:subscribe(itemView, UIEvent.EventWindowTouchUp, function(view)
            if view:IsSelected() then
                self.curSelectPen = view
                self:onPenChange(OP_TYPE.DRAW)
                self.paletteEditor:selectPencil(i)
            end
        end)
        if i == 1 then
            self.defaultPen = itemView
            self.curSelectPen = itemView
        end
        self.lvPens:AddChildWindow(itemView)
    end

    if self.defaultPen ~= nil then
        self.defaultPen:TouchUp({x = 0 , y = 0})
    end

end

function M:onPenChange(opType)
    if self.opType == OP_TYPE.MOVE and opType == OP_TYPE.MOVE then
        opType = OP_TYPE.DRAW
    end
    self.opType = opType
    if opType == OP_TYPE.DRAW then
        self.isUseHistory = false
        self.paletteEditor:getDrawingBoard():setInDraw()
        self:child("Palette-Canvas-Tinter"):SetVisible(false)
        self.ivPen:SetImage("set:palette.json image:pen_mouse")
        self:child("Palette-Drag"):SetNormalImage("set:palette.json image:drag_icon")
        self:child("Palette-Function-Paint"):SetNormalImage("set:palette.json image:paint")
        self:child("Palette-Function-Eraser"):SetNormalImage("set:palette.json image:eraser")
    elseif opType == OP_TYPE.MOVE then
        if self.curSelectPen then
            self.curSelectPen:SetSelected(false)
        end
        self.paletteEditor:getDrawingBoard():setInMove()
        self.ivPen:SetImage("set:palette.json image:drag")
        self:child("Palette-Drag"):SetNormalImage("set:palette.json image:drag_icon_pre")
        self:child("Palette-Function-Paint"):SetNormalImage("set:palette.json image:paint")
        self:child("Palette-Function-Eraser"):SetNormalImage("set:palette.json image:eraser")
    elseif OP_TYPE.CLEAR then
        if self.curSelectPen then
            self.curSelectPen:SetSelected(false)
        end
        self.paletteEditor:getDrawingBoard():setInClear()
        self.ivPen:SetImage("set:palette.json image:eraser_mouse")
        self:child("Palette-Drag"):SetNormalImage("set:palette.json image:drag_icon")
        self:child("Palette-Function-Eraser"):SetNormalImage("set:palette.json image:eraser_pre")
    end

end

return M