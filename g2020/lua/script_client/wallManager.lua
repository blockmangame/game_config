---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luo.
--- DateTime: 2019/12/24 20:21
---
local WorksWallMgr = {}

function WorksWallMgr:init()
    self.wallViews = {}
    self.worksCache = {}
    self.isOpen = false
    self.isSubscribeEvent = false
    Lib.subscribeEvent(Event.EVENT_WORKS_WALLS_OPERATION, function (isOpen)
        if isOpen then
            self:open()
        else
            self:close()
        end
    end)
end

function WorksWallMgr:open()
    self.wallConfig =  World.cfg.worksWalls
    if self.wallConfig == nil or self.isOpen then
        return
    end

    if self.rows == nil or self.columns == nil  then
        local config = Lib.readGameJson("palette_config.json").Sketchpad
        self.rows =  config.rows
        self.columns =  config.columns
    end

    self.wallViews = {}
    for _, v in pairs(self.wallConfig) do
        self.wallViews[v.name] = GUIWindowManager.instance:LoadWindowFromJSON("WorksWall.json")
        self.wallViews[v.name]:SetTouchPierce(true)
        self.wallViews[v.name]:child("WorksWall-Image"):SetImage(v.icon or "")
        GUISystem.instance:CreateSceneWindow(v.name, self.wallViews[v.name], v.width, v.height, v.rotate, v.position, -1)
    end

    if not self.isSubscribeEvent then
        Lib.subscribeEvent(Event.EVENT_UPDATE_UI_DATA, function (uiName, data)
            for k, _ in pairs(self.wallViews) do
                if k == uiName then
                    self:getWorksInfo(uiName, data.graffitiId)
                    break
                end
            end
        end)
        self.isSubscribeEvent = true
    end

    self.isOpen = true
end

function WorksWallMgr:close()
    if not self.isOpen then
        return
    end
    for _, v in pairs(self.wallConfig) do
        GUISystem.instance:RemoveSceneWindow(v.name)
        self.wallViews[v.name] = nil
    end
    self.wallViews = {}
    self.isOpen = false
end

function WorksWallMgr:getWorksInfo(uiName, worksId)
    if self.wallViews[uiName] == nil or worksId == nil then
        return
    end

    AsyncProcess.GetWorksInfo(worksId, function (response)
        if response.code == 1 then
            response.data.isPraise = response.data.isPraise > 0
            self.worksCache[worksId] = response.data
            self:onWallUpdate(uiName, response.data)
        end
    end)

end

function WorksWallMgr:onWallUpdate(uiName, data)
    if self.wallViews[uiName] ~= nil and data ~= nil and data.graffitiId ~= nil then
        self:updateItem(self.wallViews[uiName], data)
    end
end

function WorksWallMgr:updateItem(view, info)
    view:child("WorksWall-Praise-Num"):SetTextHorzAlign(0)
    view:child("WorksWall-Name"):SetText(info.nickName or "")
    view:child("WorksWall-Praise-Num"):SetText(info.praiseNumber or 0)
    view:child("WorksWall-Like"):SetVisible(Me.platformUserId ~= info.userId)
    view:child("WorksWall-Like"):SetCheckedNoEvent(info.isPraise)
    UI:setViewTexture(info.picUrl, view:child("WorksWall-Image"))
    local imageView = view:child("WorksWall-Image")
    local x = imageView:GetPixelSize().x
    local y = imageView:GetPixelSize().y

    if (x/y) < (self.rows / self.columns) then
        y = x / self.rows * self.columns
    else
        x = y * self.rows / self.columns
    end

    imageView:SetArea( { 0, 0 }, { 0, 20 }, { 0, x }, { 0, y})

    WinBase:unsubscribe(view:child("WorksWall-Comment"), UIEvent.EventButtonClick)
    WinBase:subscribe(view:child("WorksWall-Comment"), UIEvent.EventButtonClick, function()
        UI:openWnd("msgBoard", info.graffitiId)
    end)

    WinBase:unsubscribe(view:child("WorksWall-Like"), UIEvent.EventCheckStateChanged)
    WinBase:subscribe(view:child("WorksWall-Like"), UIEvent.EventCheckStateChanged, function(likeView)
        AsyncProcess.PraiseWorks(info.graffitiId, function (response)
            if response.code == 1 then
                info.isPraise = not info.isPraise
                if info.isPraise then
                    info.praiseNumber = info.praiseNumber + 1
                else
                    info.praiseNumber = info.praiseNumber - 1
                end
                self.worksCache[info.graffitiId] = info
                view:child("WorksWall-Praise-Num"):SetText(info.praiseNumber or 0)
                Lib.emitEvent(Event.EVENT_UPDATE_UI_DATA, "works_collect", {})
            else
                likeView:SetCheckedNoEvent(not likeView:GetChecked())
            end
        end)
    end)
end

WorksWallMgr:init()

return WorksWallMgr

