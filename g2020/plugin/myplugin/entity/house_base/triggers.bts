ENTITY_ENTER
{
    CallTrigger(object = $obj1, event = "CREATR_SUBSIDIARY")
}

CREATR_SUBSIDIARY{
    ------------------------------------------ 创建邮箱
    ------------------------------------------ 房子 <house-------mail> 邮箱
    $mail = CreateNpc(map = GetEntityMap(entity = $obj1), cfgName = GetConfigVar(obj = $obj1, key = "mail"))
    SetObjectVar(obj = $mail, key = "house", value = $obj1)
    SetObjectVar(obj = $obj1, key = "mail", value = $mail)

    StartTimer(rep = false, time = 1, object = $obj1, mail = $mail, event = "CHANGE_MAIL_YAW")
    ------------------------------------------ 创建房门，房门播放开门的
    ------------------------------------------ 房子 <house-------door> 房门
    $door = CreateNpc(map = GetEntityMap(entity = $obj1), cfgName = GetConfigVar(obj = $obj1, key = "door"))
    SetObjectVar(obj = $door, key = "house", value = $obj1)
    SetObjectVar(obj = $obj1, key = "door", value = $door)

    StartTimer(rep = false, time = 1, object = $obj1, door = $door, event = "CHANGE_DOOR_YAW")
    ------------------------------------------ 创建内部房子（创建动态地图）
    ------------------------------------------ 房子 <owner-------houseInsideMap> 内部房子
    -- Test("GetConfigVar(obj = $obj1, key = nsideMap)",GetConfigVar(obj = $obj1, key = "insideMap"))
    $map = CreateMap(name = GetConfigVar(obj = $obj1, key = "insideMap"))
    SetObjectVar(obj = $obj1, key = "houseInsideMap", value = $map)
    SetMapVar(map = $map, key = "owner", value = $obj1)
    StartTimer(time = 1, object = $obj1, event = "CREATR_HOUSE_INSIDE_SUBSIDIARY") -- 延迟一帧是因为需要用到上一帧创建完才设置的owner
}

CHANGE_MAIL_YAW{
    $yaw = GetEntityYaw(entity = $obj1)
    SetEntityYaw(entity = $mail, rotationYaw = $yaw)
    SetBodyYaw(entity = $mail, yaw = $yaw)
    SetEntityPosition(entity = $mail, map = GetEntityMap(entity = $obj1), 
        pos = ComputeV3(p1 = GetEntityPosition(entity = $obj1), p2 = V3RotationYaw(vector = GetConfigVar(obj = $obj1, key = "mailPos") or {x = 0,y = 0, z = 0}, yaw = $yaw), op = "add"))
}

CHANGE_DOOR_YAW{
    $yaw = GetEntityYaw(entity = $obj1)
    SetEntityYaw(entity = $door, rotationYaw = $yaw)
    SetBodyYaw(entity = $door, yaw = $yaw)
    SetEntityPosition(entity = $door, map = GetEntityMap(entity = $obj1), 
        pos = ComputeV3(p1 = GetEntityPosition(entity = $obj1), p2 = V3RotationYaw(vector = GetConfigVar(obj = $obj1, key = "doorPos") or {x = 0,y = 0, z = 0}, yaw = $yaw), op = "add"))
    StartTimer(time = 1, object = $door, event = "CREATE_DOOR_REGION")
}

CREATR_HOUSE_INSIDE_SUBSIDIARY{
    $houseVars = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "owner"), key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            $curHousedict = $dict
            Break()
        }
    }
    ------------------------------------------ 内部各区域的颜色，没有则默认颜色，vars里面取，此处的颜色是替换方块
    $map = GetObjectVar(obj = $obj1, key = "houseInsideMap")
    $allRegion = GetAllRegion(map = $map)
    -- //获取当前房子的内部regionColor 即存进数据库的
    $regionColor = DictionaryGet(dict = $curHousedict, key = "houseInsideRegionColors") or {}
    Foreach(array = $allRegion, key = "region"){
        $hadRegion = false
        $regionkey = GetRegionConfig(region = $region, key = "regionkey")
        $childRegionKeyArr = GetRegionConfig(region = $region, key = "childRegionKey") or {}
        $defaultChildRegionBlock = GetRegionConfig(region = $region, key = "defaultChildRegionBlock") or {}
        Foreach(array = $regionColor, key = "regionColorTb"){
            If(ArrayGet(array = $regionColorTb, index = 1) == $regionkey){
                $hadRegion = true
                $childRegionColorArr = ArrayGet(array = $regionColorTb, index = 2) or {}
                ForLoop(from = 1, to = ArraySize(array = $childRegionKeyArr), key = "index"){
                    $childRegionArr = GetRegionConfig(region = $region, key = ArrayGet(array = $childRegionKeyArr, index = $index)) or {}
                    $destBlock = ArrayGet(array = $childRegionColorArr, index = $index) or 
                                ArrayGet(array = $defaultChildRegionBlock, index = $index) or 
                                GetRegionConfig(region = $region, key = "defaultBlock")
                    -- Foreach(array = $childRegionArr, key = "cRegion"){
                        -- CallTrigger(object = $obj1, event = "CHANGE_HOUSE_REGION_COLOR", map = $map, region = $cRegion, destBlock = $destBlock)
                    -- }
                    CallTrigger(object = $obj1, event = "CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION", map = $map, 
                        childRegionKey = ArrayGet(array = $childRegionKeyArr, index = $index), childRegionArr = $childRegionArr, destBlock = $destBlock)
                }
                Break()
            }
        }
        If(not $hadRegion){
            Foreach(array = $childRegionKeyArr, key = "key"){
                $childRegionArr = GetRegionConfig(region = $region, key = $key) or {}
                $destBlock = GetRegionConfig(region = $region, key = "defaultBlock")
                -- Foreach(array = $childRegionArr, key = "cRegion"){
                    -- CallTrigger(object = $obj1, event = "CHANGE_HOUSE_REGION_COLOR", map = $map, region = $cRegion, destBlock = $destBlock)
                -- }
                CallTrigger(object = $obj1, event = "CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION", map = $map, 
                    childRegionKey = $key, childRegionArr = $childRegionArr, destBlock = $destBlock)
            }
        }
    }
    ------------------------------------------ 内部各个家具
    ------------------------------------------ 房子 <house------- 家具
    $furnitures = DictionaryGet(dict = $curHousedict, key = "houseInsideFurnishing") or {}
    ForLoop(from = 1, to = ArraySize(array = $furnitures), key = "findex"){
        $fDict = NewDictionary(ArrayGet(array = $furnitures, index = $findex))
        $temp = DictionaryGet(dict = $fDict, key = "pos")
        $pos = {
            x = GetPosX(pos = $temp),
            y = GetPosY(pos = $temp),
            z = GetPosZ(pos = $temp)
        } -- 这样拼接的原因是直接把pos传入会导致pos内部值多了个map，而这个是不需要的，故此处拼接一个临时的pos

        $npc = CreateNpc(map = $map, cfgName = DictionaryGet(dict = $fDict, key = "cfg"), 
            pos = $pos, ry = DictionaryGet(dict = $fDict, key = "yaw") or 0, rp = DictionaryGet(dict = $fDict, key = "pitch") or 0, owner = $obj1.owner)
        If($npc){
            SetEntityRoll(entity = $npc, rotationRoll = DictionaryGet(dict = $fDict, key = "roll") or 0)
            -- Test("DictionaryGet(dict = $fDict, key = roll) ", DictionaryGet(dict = $fDict, key = "roll"), DictionaryGet(dict = $fDict, key = "pitch"),DictionaryGet(dict = $fDict, key = "yaw") )
            $npc.lastSideNormal = DictionaryGet(dict = $fDict, key = "lastSideNormal") or Table(x = 0,y = 0,z = 0)
            -- UpdateEntityDateToClient(entity = $npc, key = "lastSideNormal", value = $npc.lastSideNormal)
            Foreach(array = DictionaryGet(dict = $fDict, key = "saveSkinList") or {}, key = "skinTb"){
                $skinDict = NewDictionary($skinTb)
                If(DictionaryGet(dict = $skinDict, key = "skin")){
                    SetSkin(entity = $npc, skinName = DictionaryGet(dict = $skinDict, key = "skinName"), skinValue = DictionaryGet(dict = $skinDict, key = "skin"))
                }
            }
            DictionarySet(dict = $fDict, key = "furnishingId", value = GetObjectID(object = $npc))
            SetObjectVar(obj = $npc, key = "house", value = $obj1)
            ArraySet(array = $furnitures, index = $findex, value = DictionaryToTable(dict = $fDict))
            SetObjectVar(obj = $npc, key = "blackboardStr", value = DictionaryGet(dict = $fDict, key = "blackboardStr"))
            CallTrigger(object = GetObjectVar(obj = $obj1, key = "owner"), obj1 = GetObjectVar(obj = $obj1, key = "owner"), 
                npc = $npc, add = true, event = "UPDATE_PLAYER_3DUI_ENTITY")

            CallTrigger(object = GetObjectVar(obj = $obj1, key = "owner"), obj1 = GetObjectVar(obj = $obj1, key = "owner"), 
                npc = $npc, add = true, event = "UPDATE_PLAYER_SINGLE_NUMBER_BOARD_ENTITY")

            CallTrigger(object = GetObjectVar(obj = $obj1, key = "owner"), obj1 = GetObjectVar(obj = $obj1, key = "owner"), 
                npc = $npc, add = true, event = "CREATE_PLAYER_SINGLE_BLACK_BOARD_ENTITY")     
        }
    }
    ------------------------------------------ 内部门
    ------------------------------------------ 房子 <house-------insideDoor> 内部门
    CallTrigger(object = $obj1, event = "CREATE_INSIDE_DOOR", map = $map, cfgName = DictionaryGet(dict = $curHousedict, key = "houseInsideDoor") or GetConfigVar(obj = $obj1, key = "insideDoor"))
}

CHANGE_HOUSE_REGION_COLOR{
    $center = GetRegionCenter(region = $region)
    $max = GetRegionMax(region = $region)
    $pos = {x = GetPosX(pos = $center), y = GetPosY(pos = $max), z = GetPosZ(pos = $center)}
    $block = GetBlockConfig(map = $map, pos = V3ToBlockPos(v3 = $pos), key = "fullName")
    If($destBlock and "" ~= $destBlock){
        $destBlockTypes = GetBlockConfigByName(block = $destBlock, key = "destBlockTypes")
        If($destBlockTypes){
            ReplaceBlockInRegion(map = $map, region = $region, replaceTb = [{key = "fullName", value = $block, destBlock = $destBlock}])
        }
        Else{
            ReplaceBlockInRegion(map = $map, region = $region, replaceTb = [{key = "fullName", value = $block, destBlock = $destBlock}])
        }
    }
}

CREATE_HOUSE_REGION_DEST_BLOCK{
    $filterDict = NewDictionary($filter or {})
    ForeachDictionary(dict = $filterDict, keyName = "i", valueName = "v"){
        If(GetBlockConfigByName(block = $sourceBlockCfg, key = $i) ~= $v){
            Return()
        }
    }
    RemoveBlock(map = $map, block = $pos)
    CreateBlock(map = $map, pos = $pos, block = $destBlockCfg)
}

CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION{
    If($childRegionKey == "wallRegion"){
        CallTrigger(object = $obj1, event = "CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION_WALL", map = $map, 
            childRegionKey = $childRegionKey, childRegionArr = $childRegionArr, destBlock = $destBlock)
    }Else{
        CallTrigger(object = $obj1, event = "CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION_FLOOR", map = $map, 
            childRegionKey = $childRegionKey, childRegionArr = $childRegionArr, destBlock = $destBlock)
    }
}

CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION_FLOOR{
    If(not $destBlock or "" == $destBlock){
        Return()
    }
    $regions = $childRegionArr
    $replaceTb = GetBlockConfigByName(block = $destBlock, key = "destBlockMatrix") or {}
    $filter = GetBlockConfigByName(block = $destBlock, key = "filter") or {}
    If(ArraySize(array = $replaceTb) == 0){
        Return()
    }
    $lastRegion = nil
    $matrixWidth = ArraySize(array = ArrayGet(array = $replaceTb, index = 1))
    $matrixHeight = ArraySize(array = $replaceTb)
    $widthCount = 0
    $heightCount = 0
    Foreach(array = $regions, key = "region"){
        $min = GetRegionMin(region = $region)
        $minX = GetPosX(pos = $min)
        $minY = GetPosY(pos = $min)
        $minZ = GetPosZ(pos = $min)
        $max = GetRegionMax(region = $region)
        $maxX = GetPosX(pos = $max)
        $maxY = GetPosY(pos = $max)
        $maxZ = GetPosZ(pos = $max)
        If($lastRegion and $minX == GetPosX(pos = GetRegionMin(region = $lastRegion))){
            $heightCount = (GetPosZ(pos = GetRegionMax(region = $lastRegion)) - GetPosZ(pos = GetRegionMin(region = $lastRegion)))%$matrixHeight
        }ElseIf($lastRegion and $minZ == GetPosZ(pos = GetRegionMin(region = $lastRegion))){
            $widthCount = (GetPosX(pos = GetRegionMax(region = $lastRegion)) - GetPosX(pos = GetRegionMin(region = $lastRegion)))%$matrixWidth
        }
        ForLoop(from = $minX, to = $maxX, key = "i"){
            ForLoop(from = $minZ, to = $maxZ, key = "j"){
                $destBlockCfg = ArrayGet(array = ArrayGet(array = $replaceTb, index = ($j - $minZ + $heightCount) % $matrixHeight + 1), index = ($i - $minX + $widthCount) % $matrixWidth + 1)
                $pos = {x = $i, y = $minY, z = $j}
                CallTrigger(object = $obj1, event = "CREATE_HOUSE_REGION_DEST_BLOCK", map = $map, filter = $filter, pos = $pos, 
                    sourceBlockCfg = GetBlockFullName(map = $map, pos = $pos), destBlockCfg = $destBlockCfg)
            }
        }
        $lastRegion = $region
    }
}

CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION_WALL{
    If(not $destBlock or "" == $destBlock){
        Return()
    }
    $regions = $childRegionArr
    $regionArea = 99
    Foreach(array = $regions, key = "region"){
        $min = GetRegionMin(region = $region)
        $max = GetRegionMax(region = $region)
        $x = GetPosX(pos = $max) - GetPosX(pos = $min)
        $y = GetPosY(pos = $max) - GetPosY(pos = $min)
        $z = GetPosZ(pos = $max) - GetPosZ(pos = $min)
        $regionArea = $regionArea + ($x * $y + $x * $z + $y * $z) * 2
    }
    $replaceTb = GetBlockConfigByName(block = $destBlock, key = "destBlockMatrix") or {}
    $filter = GetBlockConfigByName(block = $destBlock, key = "filter") or {}
    $filterDict = NewDictionary($filter or {})
    If(ArraySize(array = $replaceTb) == 0){
        $replaceTb = Table(Table($destBlock))
    }
    $firstRegion = ArrayGet(array = $regions, index = 1)
    $firstRegionMin = GetRegionMin(region = $firstRegion)
    $firstRegionMax = GetRegionMax(region = $firstRegion)
    $maxHeight = GetPosY(pos = $firstRegionMax)

    $matrixWidth = ArraySize(array = ArrayGet(array = $replaceTb, index = 1))
    $matrixHeight = ArraySize(array = $replaceTb)
    $widthCount = 0
    $heightCount = 0
    
    $directionMap = [
        {x = 1, y = 0, z = 0},
        {x = 0, y = 0, z = 1},
        {x = -1, y = 0, z = 0},
        {x = 0, y = 0, z = -1}
    ]
    $directionIndex = 1

    $firstBlockPos = $firstRegionMin
    $curBlockPos = $firstRegionMin
    $lastBlockPos = $firstRegionMin

    ForLoop(from = 1, to = (GetPosX(pos = $firstRegionMax) - GetPosX(pos = $firstRegionMin) + GetPosZ(pos = $firstRegionMax) - GetPosZ(pos = $firstRegionMin)), key = "index"){
        $firstSourceBlockCfg = GetBlockFullName(map = $map, pos = $firstBlockPos)
        $firstNeedReplace = true
        ForeachDictionary(dict = $filterDict, keyName = "i", valueName = "v"){
            If(GetBlockConfigByName(block = $firstSourceBlockCfg, key = $i) ~= $v){
                $firstNeedReplace = false
                Break()
            }
        }
        If($firstNeedReplace){
            $curBlockPos = $firstBlockPos
            $lastBlockPos = $firstBlockPos
            Break()
        }
        $firstBlockPos = ComputeV3(p1 = ArrayGet(array = $directionMap, index = $directionIndex), p2 = $firstBlockPos, op = "add")
    }
    ForLoop(from = 1, to = $regionArea, key = "index"){
        $sourceBlockCfg = GetBlockFullName(map = $map, pos = $curBlockPos)
        $needReplace = true
        ForeachDictionary(dict = $filterDict, keyName = "i", valueName = "v"){
            If(GetBlockConfigByName(block = $sourceBlockCfg, key = $i) ~= $v){
                $needReplace = false
                Break()
            }
        }
        If($needReplace){
            $destBlockCfg = ArrayGet(array = ArrayGet(array = $replaceTb, index = $heightCount % $matrixHeight + 1), index = $widthCount % $matrixWidth + 1)
            RemoveBlock(map = $map, block = $curBlockPos)
            CreateBlock(map = $map, pos = $curBlockPos, block = $destBlockCfg)
        }
        -- 计算nextBlock
        $nextBlockPos = nil
        ForLoop(from = 1, to = 4, key = "tindex"){
            $imcV3 = ArrayGet(array = $directionMap, index = $tindex)
            $tempPos = ComputeV3(p1 = $curBlockPos, p2 = $imcV3, op = "add")
            $tempPosInRegion = false
            Foreach(array = $regions, key = "region"){
                If(IsPosInRegion(pos = $tempPos, region = $region)){
                    $tempPosInRegion = true
                    Break()
                } 
            }
            If($tempPosInRegion){
                $tempPosBlockCfg = GetBlockFullName(map = $map, pos = $tempPos)
                $tempPosNeedReplace = true
                If(PosToV3(pos = $tempPos) ~= PosToV3(pos = $lastBlockPos)){
                    ForeachDictionary(dict = $filterDict, keyName = "i", valueName = "v"){
                        If(GetBlockConfigByName(block = $tempPosBlockCfg, key = $i) ~= $v){
                            $tempPosNeedReplace = false
                            Break()
                        }
                    }
                    If($tempPosNeedReplace){
                        $nextBlockPos = $tempPos
                        $directionIndex = $tindex
                        Break()
                    }
                }
            }
        }
        -- 处理断层
        If(not $nextBlockPos){
            $nextBlockPos = ComputeV3(p1 = ArrayGet(array = $directionMap, index = $directionIndex), p2 = $curBlockPos, op = "add")
            $nextBlockPosInRegion = false
            Foreach(array = $regions, key = "region"){
                If(IsPosInRegion(pos = $nextBlockPos, region = $region)){
                    $nextBlockPosInRegion = true
                    Break()
                } 
            }
            If(not $nextBlockPosInRegion){
                ForLoop(from = 1, to = 4, key = "tindex"){
                    $imcV3 = ArrayGet(array = $directionMap, index = $tindex)
                    $tempPos = ComputeV3(p1 = $curBlockPos, p2 = $imcV3, op = "add")
                    $tempPosInRegion = false
                    Foreach(array = $regions, key = "region"){
                        If(IsPosInRegion(pos = $tempPos, region = $region)){
                            $tempPosInRegion = true
                            Break()
                        } 
                    }
                    If($tempPosInRegion){
                        If(PosToV3(pos = $tempPos) ~= PosToV3(pos = $lastBlockPos)){
                            -- If(PosToV3(pos = $nextBlockPos) == PosToV3({x = 26,y = 15, z = 41})){
                            -- Test($tempPos, $lastBlockPos, $tindex)
                            $nextBlockPos = $tempPos
                            $directionIndex = $tindex
                            Break()
                        }
                    }
                }
            }
        }
        If(PosToV3(pos = $nextBlockPos) == PosToV3(pos = $firstBlockPos)){
            $tempPos = ComputeV3(p1 = $firstBlockPos, p2 = {x = 0, y = 1, z = 0}, op = "add")
            If(GetPosY(pos = $tempPos) > $maxHeight){
                Break()
            }
            $heightCount = $heightCount + 1
            $widthCount = 0
            $firstBlockPos = $tempPos
            $curBlockPos = $tempPos
            $lastBlockPos = $tempPos
        }Else{
            $lastBlockPos = $curBlockPos
            $curBlockPos = $nextBlockPos
            $widthCount = $widthCount + 1
        }
    }
}

-- CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION_CACHE{ -- 墙面算法，根据墙面渲染
--     --ReplaceBlockInRegions(map = $map, regions = $childRegionArr, replaceTb = GetBlockConfigByName(block = $destBlock, key = "destBlockMatrix"), filter = {blockType = "typeB"})
--     --Return()
--     If(not $destBlock or "" == $destBlock){
--         Return()
--     }
--     $regions = $childRegionArr
--     $replaceTb = GetBlockConfigByName(block = $destBlock, key = "destBlockMatrix") or {}
--     $filter = GetBlockConfigByName(block = $destBlock, key = "filter") or {}
--     If(ArraySize(array = $replaceTb) == 0){
--         Return()
--     }
--     $lastRegion = nil
--     $matrixWidth = ArraySize(array = ArrayGet(array = $replaceTb, index = 1))
--     $matrixHeight = ArraySize(array = $replaceTb)
--     $widthCount = 0
--     $heightCount = 0
--     Foreach(array = $regions, key = "region"){
--         $min = GetRegionMin(region = $region)
--         $minX = GetPosX(pos = $min)
--         $minY = GetPosY(pos = $min)
--         $minZ = GetPosZ(pos = $min)
--         $max = GetRegionMax(region = $region)
--         $maxX = GetPosX(pos = $max)
--         $maxY = GetPosY(pos = $max)
--         $maxZ = GetPosZ(pos = $max)
--         If($maxY == $minY){
--             If($lastRegion and $minX == GetPosX(pos = GetRegionMin(region = $lastRegion))){
--                 $heightCount = (GetPosZ(pos = GetRegionMax(region = $lastRegion)) - GetPosZ(pos = GetRegionMin(region = $lastRegion)))%$matrixHeight
--             }ElseIf($lastRegion and $minZ == GetPosZ(pos = GetRegionMin(region = $lastRegion))){
--                 $widthCount = (GetPosX(pos = GetRegionMax(region = $lastRegion)) - GetPosX(pos = GetRegionMin(region = $lastRegion)))%$matrixWidth
--             }
--             ForLoop(from = $minX, to = $maxX, key = "i"){
--                 ForLoop(from = $minZ, to = $maxZ, key = "j"){
--                     $destBlockCfg = ArrayGet(array = ArrayGet(array = $replaceTb, index = ($j - $minZ + $heightCount) % $matrixHeight + 1), index = ($i - $minX + $widthCount) % $matrixWidth + 1)
--                     $pos = {x = $i, y = $minY, z = $j}
--                     CallTrigger(object = $obj1, event = "CREATE_HOUSE_REGION_DEST_BLOCK", map = $map, filter = $filter, pos = $pos, 
--                         sourceBlockCfg = GetBlockFullName(map = $map, pos = $pos), destBlockCfg = $destBlockCfg)
--                 }
--             }
--         }Else{
--             $isRotateXZ = false
--             $directionX = $maxX - $minX ~= 0
--             $directionZ = $maxZ - $minZ ~= 0
--             $tempMax = {x = $maxX, y = $minY, z = $maxZ}
--             If($lastRegion){
--                 $lx = GetPosX(pos = GetRegionMax(region = $lastRegion)) - GetPosX(pos = GetRegionMin(region = $lastRegion))
--                 $lz = GetPosZ(pos = GetRegionMax(region = $lastRegion)) - GetPosZ(pos = GetRegionMin(region = $lastRegion))
--                 $widthCount = (0 < $lx and $lx * $matrixWidth) or (0 < $lz and $lz * $matrixWidth) or 0
--                 If(GetPosDistance(pos1 = GetRegionMin(region = $lastRegion), pos2 = $min) > GetPosDistance(pos1 = GetRegionMin(region = $lastRegion), pos2 = $tempMax)){
--                     $isRotateXZ = true
--                 }
--             }
--             ForLoop(from = $minX, to = $maxX, key = "i"){
--                 ForLoop(from = $minY, to = $maxY, key = "j"){
--                     ForLoop(from = $minZ, to = $maxZ, key = "k"){
--                         $pos = {
--                             x = $directionX and ($isRotateXZ and ($minX - $i + $maxX)) or $i,
--                             y = $j,
--                             z = $directionZ and ($isRotateXZ and ($minZ - $k + $maxZ)) or $k
--                         }
--                         $destBlockCfg = ArrayGet(array = ArrayGet(array = $replaceTb, index = ($j - $minY + $heightCount) % $matrixHeight + 1), 
--                             index = (($directionX and ($i - $minX) or ($k - $minZ)) + $widthCount) % $matrixWidth + 1)
--                         CallTrigger(object = $obj1, event = "CREATE_HOUSE_REGION_DEST_BLOCK", map = $map, filter = $filter, pos = $pos, 
--                             sourceBlockCfg = GetBlockFullName(map = $map, pos = $pos), destBlockCfg = $destBlockCfg)
--                     }
--                 }   
--             }
--         }
--         $lastRegion = $region
--     }
-- }

CREATE_INSIDE_DOOR{
    $insideDoor = CreateNpc(map = $map, cfgName = $cfgName, rp = 0, ry = 0, owner = $obj1.owner)
    SetEntityPosition(map = $map, entity = $insideDoor, pos = GetConfigVar(obj = $obj1, key = "insideDoorPos") or {x = 0,y = 0, z = 0})
    StartTimer(time = 1, object = $insideDoor, event = "CREATE_DOOR_REGION")
    SetObjectVar(obj = $insideDoor, key = "house", value = $obj1)
    SetObjectVar(obj = $obj1, key = "insideDoor", value = $insideDoor)
}

ENTITY_CLICK{
    If(not IsPlayer(entity = $obj2)){
        Return()
    }
    If(GetObjectVar(obj = $obj1, key = "isLock")){
        ShowTip(entity = $obj2, tipType = 2, textKey = "house_lock")
        Return()
    }
}

OPEN_THE_DOOR{
    If(not IsPlayer(entity = $player)){
        Return()
    }
    If(GetObjectVar(obj = $obj1, key = "isLock")){
        Return()
    }
    -- 此处门entity播放动作即可？房子entity不播放？
    PlayAction(entity = $obj1, target = $player, actionName = "openDoor", actionTime = -1)
}

CLOSE_THE_DOOR{
    If(not IsPlayer(entity = $player)){
        Return()
    }
    If(GetObjectVar(obj = $obj1, key = "isLock")){
        Return()
    }
    -- 此处门entity播放动作即可？房子entity不播放？
    PlayAction(entity = $obj1, target = $player, actionName = "closeDoor", actionTime = -1)
}

ENTITY_DIE{
    $outsideDoor = GetObjectVar(obj = $obj1, key = "door")
    $outsideDoorPos = GetEntityPosition(entity = $outsideDoor)
    $outsideDoorMap = GetEntityMap(entity = $outsideDoor)
    KillEntity(entity = GetObjectVar(obj = $obj1, key = "mail"))
    KillEntity(entity = $outsideDoor)
    $insideDoor = GetObjectVar(obj = $obj1, key = "insideDoor")
    KillEntity(entity = $insideDoor)

    ------------------------------------------ 销毁内部房子
    $map = GetObjectVar(obj = $obj1, key = "houseInsideMap")
    Test(GetEntityYaw(entity = $outsideDoor))
    $allPlayer = GetMapPlayer(map = $map)
    Foreach(array = $allPlayer, key = "player"){
        ShowTip(entity = $player, tipType = 2,textKey = "house_change_and_kick_you", keepTime = 40)
    }
    -- SetEntityPosition(entity = $door, map = GetEntityMap(entity = $obj1), 
    --     pos = ComputeV3(p1 = GetEntityPosition(entity = $obj1), p2 = V3RotationYaw(vector = GetConfigVar(obj = $obj1, key = "doorPos") or {x = 0,y = 0, z = 0}, yaw = $yaw), op = "add"))
    MoveMapPlayerTo(map = $map, newmap = $outsideDoorMap, pos = ComputeV3(p1 = GetEntityPosition(entity = $obj1), 
        p2 = V3RotationYaw(vector = Table(x = 0, y = 0.1, z = 9), yaw = GetEntityYaw(entity = $outsideDoor)), op = "add"))
    CloseMap(map = $map)
}