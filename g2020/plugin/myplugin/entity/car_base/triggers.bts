RIDE_ON
{
    $owner = GetOwner(entity = $obj1)
    $canDrive = false
    If($owner)
    {
        $ownerTeamId = GetEntityTeam(entity = $owner)
        $driverTeamId = GetEntityTeam(entity = $obj2)
        If($owner == $obj2)
        {
            $canDrive = true
        }
        ElseIf($ownerTeamId and $driverTeamId )
        {
            If($ownerTeamId ~= 0 and $driverTeamId~= 0 and $ownerTeamId == $driverTeamId)
            {
                $canDrive = true
            }
            Else
            {
                ShowTip(entity = $obj2, tipType = 2, textKey = "condition_with_equip_other_car", keepTime = 40)
            }
        }
    }
    If($canDrive)
    {
        If($obj2.otherItem){
            --ClearRide(entity = $obj2.createdTrolley)
			EquipItem(entity = $obj2, item = $obj2.equipItem)
            StartTimer(rep = false, time = 1, object = $obj1, obj1 = $obj1, obj2 = $obj2, event = "RIDE_ON_CAR")
        }
        Else
        {
            CallTrigger(obj1 = $obj2, event = "PLAYER_CLEAR_RIDE")
            RideOn(entity = $obj2, target = $obj1)
        }
    }
}

RIDE_ON_CAR
{
    CallTrigger(obj1 = $obj2, event = "PLAYER_CLEAR_RIDE")
    RideOn(entity = $obj2, target = $obj1)
}

ENTITY_RIDE_ON
{
    $obj2.onCar = true
    $hidePlayer = GetConfigVar(obj = $obj1, key = "hidePlayer")
    If($hidePlayer)
    {
        $obj2.driveHideBuff = AddEntityBuff(entity = $obj2, cfg = "myplugin/driveHide_buff")
    }
}

ENTITY_RIDE_OFF
{
    $obj2.onCar = false
    If($obj2.driveHideBuff)
    {
        RemoveEntityBuff(entity = $obj2, buff = $obj2.driveHideBuff)
    }
}

START_HORN{
    $hornSoundBuff = GetConfigVar(obj = $obj1, key = "hornSoundBuff")
    If(not $hornSoundBuff or $obj1.isCdHornSound){
        Return()
    }
    $soundBuffMap = NewDictionary(GetConfigVar(obj = $obj1, key = "hornSoundBuff") or {})
    $soundBuffCfg = DictionaryGet(dict = $soundBuffMap, key = "buff")
    $soundBuffCd = DictionaryGet(dict = $soundBuffMap, key = "cd")
    If(not $soundBuffCfg){
        Return()
    }
    $soundBuffTime = DictionaryGet(dict = $soundBuffMap, key = "time")
    $soundBuff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = $soundBuffCfg)
    AddEntityBuff(entity = $obj1, cfg = $soundBuffCfg, buffTime = $soundBuffTime)
    $obj1.isCdHornSound = true
    StartTimer(rep = false, object =$obj1, obj1 =$obj1, time = $soundBuffCd, event = "HORN_SOUND_CD_OK")
}

HORN_SOUND_CD_OK{
    $obj1.isCdHornSound = nil
}

STOP_HORN{
}

MOVE_BEGIN_FORWARD_BACK{
    $forwardBuffCfg = GetConfigVar(obj = $obj1, key = "carForwardMovementBuff")
    $backBuffCfg = GetConfigVar(obj = $obj1, key = "carBackMovementBuff")
    $entityYaw = GetEntityYaw(entity = $obj1) % 360
    $entityPos = GetEntityPosition(entity = $obj1)
    If($obj1.entityLastPos and $obj1.entityLastPos ~= $entityPos){
        $forwardBuff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = $forwardBuffCfg)
        $backBuff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = $backBuffCfg)
        $pointYaw = V3AngleXZ(vector = ComputeV3(op = "sub", p1 = $entityPos, p2 = $obj1.entityLastPos))
        $subYaw = $pointYaw - $entityYaw
        -- Test($entityYaw, V3AngleXZ(vector = ComputeV3(op = "sub", p1 = $entityPos, p2 = $obj1.entityLastPos)))
        If($subYaw > 90 or $subYaw < -90){
            --Test("444444444444444444444", $subYaw, $entityYaw, $pointYaw)
            If(not $backBuff and $key){
                AddEntityBuff(entity = $obj1, cfg = $backBuffCfg)
            }
            If($forwardBuff){
                RemoveEntityBuff(entity = $obj1, buff = $forwardBuff)
            }
        }Else{
            --Test("5555555555555555555555", $subYaw, $entityYaw, $pointYaw)
            If(not $forwardBuff and $key){
                AddEntityBuff(entity = $obj1, cfg = $forwardBuffCfg)
            }
            If($backBuff){
                RemoveEntityBuff(entity = $obj1, buff = $backBuff)
            }
        }
    }
    $obj1.entityLastPos = $entityPos
    $obj1.movementTimer = StartTimer(rep = false, object =$obj1, obj1 =$obj1, key = $key, time = 10, event = "MOVE_BEGIN_FORWARD_BACK")
}

MOVE_END_FORWARD_BACK{
    $buffCfg = GetConfigVar(obj = $obj1, key = "carForwardMovementBuff")
    $buff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = $buffCfg)
    If($buff){
        RemoveEntityBuff(entity = $obj1, buff = $buff)
    }
    $buffCfg = GetConfigVar(obj = $obj1, key = "carBackMovementBuff")
    $buff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = $buffCfg)
    If($buff){
        RemoveEntityBuff(entity = $obj1, buff = $buff)
    }
    If($obj1.movementTimer){
        StopTimer(timer = $obj1.movementTimer)
        $obj1.movementTimer = nil
    }
    $obj1.entityLastPos = nil
}

START_FORWARD{
    Test("START_FORWARD", GetLastPos(entity = $obj1), GetEntityYaw(entity = $obj1))
    CallTrigger(object = $obj1, obj1 = $obj1, key = "forward", event = "MOVE_BEGIN_FORWARD_BACK")
}

STOP_FORWARD{
    Test("STOP_FORWARD")
    CallTrigger(object = $obj1, obj1 = $obj1, event = "MOVE_END_FORWARD_BACK")
}

START_BACK{
    Test("START_BACK", GetLastPos(entity = $obj1), GetEntityYaw(entity = $obj1))
    CallTrigger(object = $obj1, obj1 = $obj1, key = "back", event = "MOVE_BEGIN_FORWARD_BACK")
}

STOP_BACK{
    Test("STOP_BACK")
    CallTrigger(object = $obj1, obj1 = $obj1, event = "MOVE_END_FORWARD_BACK")
}