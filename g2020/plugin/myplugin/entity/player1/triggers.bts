CHECK_CAN_INTERACT(debug1 = true){
    If(IsCameraMode(player = $obj1))
    {
        $canInteract = false
        Return()
    }
    If($interactTarget.cantInteractTarget){
        $canInteract = false
        Return()
    }

    If(GetEntityMap(entity = $obj1) ~= GetEntityMap(entity = $interactTarget))
    {
        $canInteract = false
        Return()
    }

}
SET_ITEM_USE {
    If($isUse)
    {

        CallTrigger(event = "WEAR_ITEM", obj1 = $obj1, item = $item)
    }
    Else
    {
        CallTrigger(event = "TAKEOFF_ITEM", obj1 = $obj1, item = $item)
    }
}

CHECK_CAN_USE_ITEM {
    $typeIndex = GetConfigVar(obj = $item, key = "typeIndex")
    If(IsDrive(entity = $obj1))
    {
		--正在开车不能装备任何东西
		If($typeIndex ~= 3)
		{
			$result = false
		}
    }
    If($typeIndex == 3 and $obj1.equipCarCd){
        $result = false
	}
	
	If($typeIndex == 3)
	{
		$mapName = GetEntityMapName(entity = $obj1)
		If($mapName ~= "map001" && $mapName ~= "map002")
		{
			ShowTip(entity = $obj1, tipType = 2, textKey = "disable_create_car_in_the_house", keepTime = 40)
			$result = false
		}
	}

}

CHECK_CLEAR_HAND_ITEM{
    CheckUseItemClear(entity = $obj1)
}

WEAR_ITEM {
    ClearItemUseByKey(entity = $obj1, key = "typeIndex", valueArray = NewArray(1, 2, 4, 5))
    $typeIndex = GetConfigVar(obj = $item, key = "typeIndex")
    If($typeIndex == 3)
    {
		-- on car
		
		ClearItemUseByKey(entity = $obj1, key = "typeIndex", valueArray = NewArray(1, 2, 3, 4, 5))

        $carName = GetConfigVar(obj = $item, key = "carName")
        CallTrigger(event = "EQUIP_CAR", obj1 = $obj1, carName = $carName)
    }
    ElseIf($typeIndex == 1)
    {
        --baby trolley
    	$obj1.equipItem = $item
        $obj1.otherItem = true
        CallTrigger(event = "EQUIP_BABY_TROLLEY", object = $obj1, cfgPath = GetConfigVar(obj = $item, key = "trolleyEntity"))
	}
    Else{
    	$obj1.equipItem = $item
        $obj1.otherItem = true
    }
	SetItemVar(entity = $obj1, item = $item, key = "equipFlag", value = true)
}

TAKEOFF_ITEM {
    $typeIndex = GetConfigVar(obj = $item, key = "typeIndex")
    If($typeIndex == 3)
    {
        CallTrigger(event = "TAKEOFF_EQUIP_CAR", obj1 = $obj1)
    }
    ElseIf($typeIndex == 1)
    {
        --baby trolley
        --SetObjectVar(obj = $obj1, key = "equipTakeOff", value = true)
        CallTrigger(event = "DEMOUNT_BABY_TROLLEY", object = $obj1)
	    $obj1.otherItem = false
        $obj1.equipItem = nil
    }
    Else{
        $obj1.otherItem = false
        $obj1.equipItem = nil
    }
}

INTERACTION_FEED {
    -- If(not IsPlayer(entity = $obj1))
    -- {
    --     Return()
    -- }
    
    $item = GetEntityHandItem(entity = $obj2)
    If(not $item)
    {
        Return()
    }
    $state = GetConfigVar(obj = $item, key = "state")
    $itemname = GetConfigVar(obj = $item, key = "itemname")
    $action = [
        [
            $obj1,
            GetConfigVar(obj = $item, key = "feededAction"),
            GetConfigVar(obj = $item, key = "feededActionTime")
        ],
        [
            $obj2,
            GetConfigVar(obj = $item, key = "feedAction"),
            GetConfigVar(obj = $item, key = "feedActionTime")
        ]
    ]
    ConsumeItem(item = $item, num = 1)
    CallTrigger(event = "FUNC_STATE_ADD_INTERACTLIST", entities = [$obj1, $obj2])
    Foreach(array = $action, key = "act")
    {
        PlayAction(
            entity = ArrayGet(array = $act, index = 1),
            includeSelf = true,
            actionName = ArrayGet(array = $act, index = 2),
            actionTime = ArrayGet(array = $act, index = 3)
        )
    }
    ShowBubbleMsg(
        entity = $obj1,
        textKey = "thank_sb_food",
        textP1 = GetEntityName(entity = $obj2),
        textP2 = $itemname
    )
    CallTrigger(object = $obj1, event = "FUNC_STATE_RELEASE", state = $state)
}
------------------------------------------------------------------------------------------------------------------------------ 分割线
CREATE_OWNER_HOUSE{
    ------------------------------------------ 当前选择存档 $curSelectHouse
    $curSelectHouse = {}
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    If(not $houseVars or ArraySize(array = $houseVars) == 0){ -- 第一次进入游戏的玩家
        $houseCfg = "myplugin/house1"
        $houseVars = [
                {
                    houseCfg = $houseCfg,
                    houseSelectColor = GetEntityCfg(fullName = $houseCfg, key = "defaultColor"),
                    houseInsideFurnishing = Copy(value = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultFurniture") or []),
                    houseInsideRegionColors = Copy(value = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultInsideMapColorTb") or {}),
                    isCurEquip = "enable",
                    houseName = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultName") or "",
                    houseType = GetEntityCfg(fullName = $houseCfg, key = "houseType") or "",
                    houseId = Concat(p1 = GetTime(), p2 = GetGameTime(), p3 = Random(min = 0, max = 999999)),
                    houseInsideDoor = GetEntityCfg(fullName = $houseCfg, key = "insideDoor") or "myplugin/house_base_inside_door"
                }
            ]
        SetObjectVar(obj = $obj1, key = "houseVars", value = $houseVars)

        -- 玩家第一次游戏时，给他一点钱
        $money = @firstTimeLoginMoney
        AddCurrency(count = $money, coinName = "green_currency", entity = $obj1)
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "getMoneyTipSoundBuff")
        ShowRewardItemEffect(type = "Coin", count = $money, fullName = "green_currency", player = $obj1)

    }

    $dict = {}
    Foreach(array = $houseVars, key = "house"){
        $dict = NewDictionary($house)
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            Break()
        }
    }
    $obj1.curHouseCfg = DictionaryGet(dict = $dict, key = "houseCfg")
    ------------------------------------------ 有租地特权把房子移到public区域
    $manorId = GetPlayerManorId(player = $obj1) --服务器分配的房子id, 1-2为特权
    Test("Test Get Player ManorID::",GetPlayerUserID(player = $obj1), $manorId)
    If(ArrayFind(array = $obj1.privilege, value = "myplugin/home_privilege") and $manorId >0 and $manorId <=2){
        $regions = GetAllRegion(map = @Map001)
        Foreach(array = $regions or {}, key = "publicRegion"){
            If(not GetRegionOwner(region = $publicRegion) and GetRegionConfig(region = $publicRegion, key = "isHouseRegion")){
                CallTrigger(
                    object = $obj1, 
                    event = "CREATE_HOUSE_OUTSIDE",
                    region = $publicRegion, 
                    houseCfg = DictionaryGet(dict = $dict, key = "houseCfg"),
                    houseColor = DictionaryGet(dict = $dict, key = "houseSelectColor"),
                    houseMap = @Map001,
                    housePos = GetRegionCenter(region = $publicRegion)
                )
                $isCreate = true
                @HOME_SUM = @HOME_SUM + 1
                --删除空地邮箱
                $emailIndex = GetRegionConfig(region = $publicRegion, key = "emailIndex")
                $obj1.emailIndex = $emailIndex
                $emailEntity = @ENTITY_ENTER1
                If($obj1.emailIndex == 2){
                    $emailEntity = @ENTITY_ENTER2
                }
                If($emailEntity){
                    KillEntity(entity = $emailEntity)
                }
                Break()
            }
        }
    }
    ------------------------------------------ 获得当前地图上的空出的区域，创建房子 * 
    -- 区域 <region------owner(需要使用GetRegionOwner)> 房子 <house-------owner> 玩家，可通过区域获取区域上的房子，通过房子获得所属玩家。 反向同理
    If(not $isCreate){
        $regions = GetAllRegion(map = GetEntityMap(entity = $obj1))
        Foreach(array = $regions, key = "region"){
            If(not GetRegionOwner(region = $region) and GetRegionConfig(region = $region, key = "isHouseRegion")){
                CallTrigger(object = $obj1, event = "CREATE_HOUSE_OUTSIDE", region = $region, 
                    houseCfg = DictionaryGet(dict = $dict, key = "houseCfg"),
                    houseColor = DictionaryGet(dict = $dict, key = "houseSelectColor"))
                Break()
            }
        }
    }
    ------------------------------------------ 玩家进入游戏就进入自己房间
    $house = GetObjectVar(obj = $obj1, key = "house")
    If(not $house){
        KickOutPlayer(entity = $obj1) -- 踢出服务器多分配的玩家
    }
    $yaw = 0
    If($obj1.curHouseCfg){
        $yaw = GetEntityCfg(fullName = $obj1.curHouseCfg, key = "insideMapRotationYaw")
    }
    $houseInsideMap = GetObjectVar(obj = $house, key = "houseInsideMap")
    CallTrigger(object = $obj1, obj1 = $obj1, yaw = $yaw, houseInsideMap = $houseInsideMap, event = "GOTO_INSIDE_HOUSE")
}

GOTO_INSIDE_HOUSE{
    SetEntityPosition(map = $houseInsideMap, entity = $obj1, ry = $yaw,
	  pos = GetMapInitPos(map = $houseInsideMap) or GetEntityPosition(entity = $obj1))
    CallTrigger(object = $obj1, event = "SHOW_TITLE_BAR")
}

ENTITY_DIE{
	CallTrigger(obj1 = $obj1, event = "ENTITY_REMOVE_INTERACTION")
    $house = $obj1.house
    $houseInsideMap = GetObjectVar(obj = $house, key = "houseInsideMap")
    $yaw = 0
    If($obj1.curHouseCfg){
        $yaw = GetEntityCfg(fullName = $obj1.curHouseCfg, key = "insideMapRotationYaw")
    }
    If($obj1.damageTimer){
        StopTimer(timer = $obj1.damageTimer)
        $obj1.damageTimer = nil
    }
    $mapOwner = GetMapVar(map = GetEntityMap(entity = $obj1), key = "owner")
    If($mapOwner){
        $houseInsideMap = GetObjectVar(obj = $mapOwner, key = "houseInsideMap")
        $yaw = 0
        If($mapOwner.owner.curHouseCfg){
            $yaw = GetEntityCfg(fullName = $mapOwner.owner.curHouseCfg, key = "insideMapRotationYaw")
        }
    }
    ReviveEntity(entity = $obj1, map = $houseInsideMap)
    If($obj1.role == @child){
        CallTrigger(obj1 = $obj1, event = "CHANGE_PLAYER_SCALE_CHILD")
    }Else{
        CallTrigger(obj1 = $obj1, event = "CHANGE_PLAYER_SCALE_ADULT")
    }
    CallTrigger(object = $obj1, obj1 = $obj1, houseInsideMap = $houseInsideMap, yaw = $yaw, event = "GOTO_INSIDE_HOUSE")
}

CHRONIC_KILL_SELF{
    $obj1.damageTimer = StartTimer(time = 100, object = $obj1, obj1 = $obj1, damage = GetEntityMaxHp(entity = $obj1), event = "CHRONIC_KILL_SELF_BY_DAMAGE")
}

CHRONIC_KILL_SELF_BY_DAMAGE{
    Damage(entity = $obj1, damage = $damage)
}

MOVE_HOME_FROM_PROTECT_TO_PUBLIC(){ --把房子移到公共区域/重新创建房子/这个逻辑作废，购买特权重新分配服务器
    If(not ArrayFind(array = $obj1.privilege, value = "myplugin/home_privilege")){
        Return()
    }
    $curMapName = GetEntityMapName(entity = $obj1)
    $holdPos = true
    ForLoop(from = 1, to = 15, key = "index"){
        $tmp = Concat(p1 = "house", p2 = $index, p3 = "_map")
        If($tmp == $curMapName){
            $holdPos = false
        }
    }
    $curSelectHouse = {}
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    $dict = {}
    Foreach(array = $houseVars, key = "house"){
        $dict = NewDictionary($house)
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            Break()
        }
    }
    $obj1.curHouseCfg = DictionaryGet(dict = $dict, key = "houseCfg")
    $regions = GetAllRegion(map = @Map001)
    Foreach(array = $regions or {}, key = "publicRegion"){
        If(not GetRegionOwner(region = $publicRegion) and GetRegionConfig(region = $publicRegion, key = "isHouseRegion")){
            $house = GetObjectVar(obj = $obj1, key = "house")
            KillEntity(entity = $house)
            CallTrigger(
                object = $obj1, 
                event = "CREATE_HOUSE_OUTSIDE",
                region = $publicRegion, 
                houseCfg = DictionaryGet(dict = $dict, key = "houseCfg"),
                houseColor = DictionaryGet(dict = $dict, key = "houseSelectColor"),
                houseMap = @Map001,
                housePos = GetRegionCenter(region = $publicRegion)
            )
            @HOME_SUM = @HOME_SUM + 1
            Break()
        }
    }
    If($holdPos){ --If player in home then move home to public with playerr Else player dont move 
        Return()
    }
    $newHouse = GetObjectVar(obj = $obj1, key = "house")
    $houseInsideMap = GetObjectVar(obj = $newHouse, key = "houseInsideMap")
    $yaw = 0
    If($obj1.curHouseCfg){
        $yaw = GetEntityCfg(fullName = $obj1.curHouseCfg, key = "insideMapRotationYaw")
    }
    SetEntityPosition(map = $houseInsideMap, entity = $obj1, ry = $yaw,
      pos = GetMapInitPos(map = $houseInsideMap) or GetEntityPosition(entity = $obj1))
    CallTrigger(object = $obj1, event = "SHOW_TITLE_BAR")
}
------------------------------------------------------------------------------------------------------------------------------ 分割线

ENTITY_ENTER
{
    UpdateUIData(player = $obj1, ui = "mainExtension", data = {
        guideEnd = $obj1.guideStep == @GuideEnd,
        guideWork = $obj1.guideWork,
        guideParty = $obj1.guideParty
    })
    If($obj1.guideStep ~= @GuideEnd){ --进入游戏的时候不让引导默认开启
        SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = 10),canBack = true)
    }
    UpdateUIData(player = $obj1, ui = "circleProgress", data = {})
    OperationWindows(win = "workTask", isOpen = true, player = $obj1)
    CallTrigger(event = "INIT_WORK_TASK", object = $obj1) --初始化打工任务
    AddItem(entity = $obj1, cfg = "myplugin/free_food", count = 1)
    ClearItemUseByKey(entity = $obj1, key = "typeIndex", valueArray = NewArray(1, 2, 3, 4, 5))
    $obj1.outOfCameraModeState = {}
    $obj1.curStates = {}
    $obj1.stateProgress = {}
    CallTrigger(event = "CHECK_SHOW_SVIP_UI", object = $obj1)
    AddEntityBuff(entity = $obj1, cfg = "myplugin/click_action")
    CallTrigger(event = "CREATE_OWNER_HOUSE", object = $obj1)
    CallTrigger(event = "CHECK_IN_PARTY", object = $obj1)
    SetWorksArchiveNum(player = $obj1, num = $obj1.worksArchiveNum)
    If(IsPlayer(entity = $obj1))
    {
        $playerName = GetEntityName(entity = $obj1)

        If($obj1.nickName == "defaultNickName")
        {
            $obj1.nickName = $playerName
        }
        
        SetEntityName(entity = $obj1, name = $obj1.nickName)

        $obj1.isReadyReward = false

        CallTrigger(event = "ADD_MONEY", object = $obj1)
        If($obj1.inPartyOwnerId == 0)   -- not in party
        {
            $obj1.role = @adult
            CallTrigger(event = "SHOW_SELECT_ROLE", object = $obj1)
        }
        Else
        {
            If($obj1.role == @adult)
            {
                CallTrigger(object = $obj1, event = "CHANGE_PLAYER_SCALE_ADULT")
            }
            ElseIf($obj1.role == @child)
            {
                CallTrigger(object = $obj1, event = "CHANGE_PLAYER_SCALE_CHILD")
            }
        }
		
		CallTrigger(event = "SET_DRESS_ARCHIVE", object = $obj1)
        CallTrigger(event = "INIT_PLAYER_DRESS", object = $obj1)
        CallTrigger(event = "INIT_FAMILY_ALBUM", object = $obj1)

        LoadPlayerAppDress(player = $obj1, event = "HTTP_PURCHASED_DRESS_CALL_BACK")

        CallTrigger(event = "FUNC_LOAD_NEW_WORKS")
        CallTrigger(event = "FUNC_LOAD_EXCELLENT_WORKS")
    }
    $curTime = GetTime()
    $curData = Concat(p1 = GetYear(time = $curTime),p2 = GetMonth(time = $curTime),p3 = GetDayOfMonth(time = $curTime))
    $joinUserPartyDataDict = NewDictionary(GetObjectVar(obj = $obj1, key = "joinUserPartyData"))
    If(DictionaryGet(dict = $joinUserPartyDataDict, key = "data") ~= $curData){
        SetObjectVar(obj = $obj1, key = "joinUserPartyData", value = {
            data = $curData,
            userIds = {}
        })
    }
}

OPEN_DANCE
{
    CallTrigger(event = "CHANGE_DANCE_SKILL", obj1 = $obj1, newSkill = $obj1.danceUseItem)
    AddSkill(entity = $obj1, name = "myplugin/open_dance")
}

CLOSE_DANCE
{
    CallTrigger(event = "CHANGE_DANCE_SKILL", obj1 = $obj1, oldSkill = $obj1.danceUseItem)
    RemoveSkill(entity = $obj1, name = "myplugin/open_dance")
}

------------------------------------------------------------------------------------------------------------------------------ 分割线
TEST_DATA{ -- 保存进数据库的数据伪代码 -- 旧 11-30
    Table(
        houseVars = [ -- all house 当前entity的所有房子
            [ --   arr[1] = houseCfg, arr[2] = houseSelectColor, 
                -- arr[3] = houseInsideFurnishing, arr[4] = houseInsideRegionColors, arr[5] = enable 当前选中房子标识/ disable 未选中
                -- arr[6] = curHouseName, arr[7] = curHouseType, arr[8] = ID, arr[9] = 房子内部门
                "myplugin/xxx...", -- houseCfg 
                "myplugin/xxx...", -- houseSelectColor，是buff来着 -- 外部颜色不影响内部
                [ -- houseInsideFurnishing , 房子内部物品摆放
                    -- pos是相对坐标，每个map都有一个initPos，坐标都是这个initPos+pos
                    -- 绝对坐标也行
                    [{x = "xx", y = "xx", z = "xx"},0,"myplugin/xxx...","id","true/false"],
                    [{x = "xx", y = "xx", z = "xx"},0,"myplugin/xxx...","id","true/false"]
                    -- {pos,yaw,cfg,全局唯一id:furnishingId（当前obj的id）,是否是旧家具，下线后则会将当前玩家全部房子的全部家具设置成true，即是旧家具}
                ],
                [ -- houseInsideRegionColors 房子内部区域颜色
                    ["regionkey", ["myplugin/xxx...","myplugin/xxx...","myplugin/xxx..."]], -- 第一个key是对应的region key，通过这个key获取这个区域region/获取到配置
                    ["regionkey", ["myplugin/xxx...","myplugin/xxx...","myplugin/xxx..."]] -- 第二个数组对应的是上面获取到的region的childRegionKey属性中对应
                                                                                        -- 该region的子region使用的方块！
                ],
                "enable", -- cur select house 有这个标志就是 当前选择/出生的房子
                "houseName", -- cur house name 当前房子的名字
                "houseType", -- cur house type 当前房子的类型
                "houseKey", -- cur house id 房子唯一ID，Concat(p1 = GetTime(), p2 = GetGameTime(), p3 = Random(min = 0, max = 999999))
                "houseInsideDoor" -- cur house InsideDoor
            ],
            [
                -- ... 同上，不是当前选择则第五个参数为disable
            ]
        ]
    )
    Table(Demo = [[[],[]],[[],[]]])
    Table( -- 保存进数据库的数据伪代码 -- 新 11-30
        houseVars = [ -- all house 当前entity的所有房子
            {
                houseCfg = "myplugin/xxx...", -- houseCfg 
                houseSelectColor = "myplugin/xxx...", -- houseSelectColor，是buff来着 -- 外部颜色不影响内部
                houseInsideFurnishing = [ -- houseInsideFurnishing , 房子内部物品摆放
                    -- pos是相对坐标，每个map都有一个initPos，坐标都是这个initPos+pos
                    -- 绝对坐标也行
                    {pos = {x = "xx", y = "xx", z = "xx"},yaw = 0,cfg = "myplugin/xxx...",
                        furnishingId = "id",isOldFurnishing = "true/false", saveSkinList = [{skinName = "xxx", skin = "xxx"}],
                        sellMoney = $sellMoney, sellByDiscountMoney = $sellByDiscountMoney}
                    -- {pos,yaw,cfg,全局唯一id:furnishingId（当前obj的id）,
                    -- isOldFurnishing 是否是旧家具，下线后则会将当前玩家全部房子的全部家具设置成true，即是旧家具
                    -- saveSkinList 特殊家具需要保存皮肤列表（需要在该家具中配一个saveSkinList 要保存的皮肤列表）}
                ],
                houseInsideRegionColors = [ -- houseInsideRegionColors 房子内部区域颜色
                    ["regionkey", ["myplugin/xxx...","myplugin/xxx...","myplugin/xxx..."]], -- 第一个key是对应的region key，通过这个key获取这个区域region/获取到配置
                    ["regionkey", ["myplugin/xxx...","myplugin/xxx...","myplugin/xxx..."]] -- 第二个数组对应的是上面获取到的region的childRegionKey属性中对应
                                                                                        -- 该region的子region使用的方块！
                ],
                isCurEquip = "enable", -- cur select house 有这个标志就是 当前选择/出生的房子
                houseName = "houseName", -- cur house name 当前房子的名字
                houseType = "houseType", -- cur house type 当前房子的类型
                houseId = "houseKey", -- cur house id 房子唯一ID，Concat(p1 = GetTime(), p2 = GetGameTime(), p3 = Random(min = 0, max = 999999))
                houseInsideDoor = "houseInsideDoor" -- cur house InsideDoor
            },{}

        ]
    )
}

CREATE_HOUSE_OUTSIDE{
    $yaw = GetRegionConfig(region = $region, key = "regionHouseYaw")
    $housePosOffset = GetEntityCfg(fullName = $houseCfg, key = "housePosOffset") or {x = 0, y = 0, z = 0}
    $houseMap = $houseMap or GetEntityMap(entity = $obj1)
    $housePos = $housePos or GetEntityPosition(entity = $obj1)
    $house = CreateNpc(map = $houseMap, cfgName = $houseCfg, pos = $housePos)
    $regionCenter = GetRegionCenter(region = $region)
    $pos = {x = GetPosX(pos = $regionCenter), y = GetPosY(pos = GetRegionMin(region = $region)), z = GetPosZ(pos = $regionCenter)}
    $pos = ComputeV3(p1 = V3ToBlockPos(v3 = $pos), op = "add", p2 = V3RotationYaw(vector = $housePosOffset, yaw = $yaw))
    $pos = ComputeV3(p1 = $pos, op = "add", p2 = Table(x = 0.5,y = 0,z = 0.5))
    SetEntityPosition(entity = $house, pos = $pos, map = GetEntityMap(entity = $house))
    SetEntityYaw(entity = $house, rotationYaw = $yaw)
    SetBodyYaw(entity = $house, yaw = $yaw)

    AddEntityBuff(entity = $house, cfg = GetConfigVar(obj = $house, key = "houseCreateBuff"), buffTime = 200)
    -- 改变房子外部颜色，通过加buff
    AddEntityBuff(entity = $house, cfg = $houseColor)

    SetRegionOwner(region = $region, owner = $house)
    SetObjectVar(obj = $house, key = "owner", value = $obj1)

    SetObjectVar(obj = $obj1, key = "house", value = $house)
    SetObjectVar(obj = $house, key = "region", value = $region)

    ---脚本action
    ShowHomeGuide(entity = $house, player = $obj1)
}

REMOVE_HOUSE_OUTSIDE{
    $house = GetObjectVar(obj = $obj1, key = "house")
    $map = GetObjectVar(obj = $house, key = "houseInsideMap")
    SetMapVar(map = $map, key = "isRemove", value = true)
    $region = GetObjectVar(obj = $house, key = "region")
    SetRegionOwner(region = $region, owner = nil)
    KillEntity(entity = $house)
}

ENTITY_LEAVE{ 

    $lastInteractionUiObjId = GetObjectVar(obj = $obj1, key = "lastInteractionUiObjId") -- 更新家具编辑位置
    If($lastInteractionUiObjId){
        UpdateEntityEditContainer2(player = $obj1, entityId = $lastInteractionUiObjId, show = false)
        SetObjectVar(obj = $obj1, key = "lastInteractionUiObjId", value = nil)
    }

    CallTrigger(object = $obj1, event = "TAKEOFF_EQUIP_CAR")
    CallTrigger(object = $obj1, event = "DEMOUNT_BABY_TROLLEY")

    ------------------------------------------ 玩家退出，清掉房子 邮箱 门，重置区域owner为nil
    CallTrigger(object = $obj1, event = "REMOVE_HOUSE_OUTSIDE")
    ------------------------------------------ 更新全部家具为旧家具
    CallTrigger(object = $obj1, event = "UPDATE_FURNITURE_STATUS")
    ----------------------------------------- 玩家退出，保存身上穿搭
    CallTrigger(object = $obj1, event = "SAVE_PLAYER_DRESS")
    ---------------------------------------玩家退出，删除掉暂存在数据库“dressArchive”字段中的bm装扮信息
    CallTrigger(object = $obj1, event = "REMOVE_BM_DRESS")
    If( not $obj1.hasRelease){
        Test("ENTITY_LEVAE:RELESEMANOR :", GetPlayerUserID(player = $obj1))
        ReleaseManor(player = $obj1)
    }
    CallTrigger(object = $obj1, event = "CHECK_LEAVE_PARTY")
    --清除手持道具
    ClearItemUseByKey(entity = $obj1, key = "typeIndex", valueArray = NewArray(1, 2, 3, 4, 5))
	
    CallTrigger(object = $obj1, event = "ENTITY_LEAVE_DATA_REPORT")

    --玩家退出生成空地邮箱
    $emailIndex = $obj1.emailIndex
    If($emailIndex == 2){
        CallTrigger(event = "CREATE_EMAIL_NPC", npc1 = false, npc2 = true)
    }ElseIf($emailIndex == 1){
        CallTrigger(event = "CREATE_EMAIL_NPC", npc1 = true, npc2 = false)
    }
    --
    If(not $obj1.punishmentCD){
        $obj1.punishTime = 0
    }
    --清除家指向
    ShowHomeGuide(entity = nil, player = $obj1)
}

ENTITY_LEAVE_DATA_REPORT{
	-- 统计玩家下线时背包道具情况
    CallTrigger(object = $obj1, event = "DATA_REPORT_BAG")
	-- 统计玩家下线时当次聊天发言的数量
    CallTrigger(object = $obj1, event = "DATA_REPORT_GOLD_NUM")
	-- 统计玩家下线时历史聊天发言的数量
    CallTrigger(object = $obj1, event = "DATA_REPORT_CHAT_MESSAGE")
	-- 统计玩家下线时作品的数量
    CallTrigger(object = $obj1, event = "DATA_REPORT_WORKS_ARCHIVE")
	-- 统计玩家下线时装饰的数量
    CallTrigger(object = $obj1, event = "DATA_REPORT_DRESS_NUM")
	-- 统计玩家下线时房子数量
	CallTrigger(object = $obj1, event = "DATA_REPORT_HOUSE_SIZE")
	-- 统计玩家下线时消耗的货币总量
	CallTrigger(object = $obj1, event = "DATA_REPORT_CONSUME_GOLD_NUM")
    -- 统计玩家下线时消除的状态总数
    CallTrigger(object = $obj1, event = "DATA_REPORT_RELEASE_STATE_SUM")
    -- 统计玩家下线时家庭数量
    CallTrigger(object = $obj1, event = "DATA_REPORT_FAMILY_NUM")
    -- 统计玩家下线时打工次数的总数
    CallTrigger(object = $obj1, event = "DATA_REPORT_FINISH_WORK_SUM")
    -- 统计玩家下线时添加好友数量
    CallTrigger(object = $obj1, event = "DATA_REPORT_ADD_FRIEND")
    -- 统计玩家下线时派对邀请相关
    CallTrigger(object = $obj1, event = "DATA_REPORT_PARTY_INVITE")
    -- 统计玩家下线时派对操作总数相关
    CallTrigger(object = $obj1, event = "DATA_REPORT_PARTY_ALL_GAME")
    -- 统计玩家正常下线时单个游戏相关(普通下线而不是主动跳转)
    CallTrigger(object = $obj1, event = "DATA_REPORT_NORMAL_LOGOUT")
    -- 统计玩家跨服情况 成功上报
    CallTrigger(object = $obj1, event = "DATA_REPORT_JUMP_SERVER_SUCCESS")
}
DATA_REPORT_FINISH_WORK_SUM{
    --打工完成数量埋点
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $obj1.workTaskfinish, array = [0,10,20,30,40,80,120,400,800,1200,1600,2000,2400,2800,3200,3201])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:task:finish", @rangeBoundary])
}
DATA_REPORT_HOUSE_SIZE{
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = ArraySize(array = GetObjectVar(obj = $obj1, key = "houseVars") or {}), array = [1, 2 ,3 ,4 ,5 ,6, 7, 8])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:house:num", @rangeBoundary])
}

DATA_REPORT_BAG{
	@count = CountTrayItemNum(entity = $obj1, trayType = 21) --baby_car
    CallTrigger(event = "SET_RANGE_BOUNDARY", num = @count, array = [0, 2, 5, 10, 20, 30, 50, 51])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:bag:trolley", @rangeBoundary])
	
	@count = CountTrayItemNum(entity = $obj1, trayType = 22) --food
    CallTrigger(event = "SET_RANGE_BOUNDARY", num = @count, array = [0, 2, 5, 10, 20, 30, 50, 51])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:bag:food", @rangeBoundary])
	
	@count = CountTrayItemNum(entity = $obj1, trayType = 23) --car
    CallTrigger(event = "SET_RANGE_BOUNDARY", num = @count, array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 30, 50, 70, 71])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:bag:car", @rangeBoundary])
	
	@count = CountTrayItemNum(entity = $obj1, trayType = 24) --toy
    CallTrigger(event = "SET_RANGE_BOUNDARY", num = @count, array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 70, 71])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:bag:toy", @rangeBoundary])
}

UPDATE_FURNITURE_STATUS{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars") or {}
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        $furnitures = DictionaryGet(dict = $dict, key = "houseInsideFurnishing")
        ForLoop(from = 1, to = ArraySize(array = $furnitures or {}), key = "fIndex"){
            $fDict = NewDictionary(ArrayGet(array = $furnitures, index = $fIndex))
            DictionarySet(dict = $fDict, key = "isOldFurnishing", value = true)
            DictionarySet(dict = $fDict, key = "furnishingId", value = 0)
            ArraySet(array = $furnitures, index = $fIndex, value = DictionaryToTable(dict = $fDict))
        }
        ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $dict))
    }
}

UPDATE_HOUSE{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") ~= "enable" and $houseKey == DictionaryGet(dict = $dict, key = "houseId")){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $newHouseDict = $dict
        }
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHouseDict = $dict
        }
    }
    If(not $newHouseDict){
        DictionarySet(dict = $curHouseDict, key = "houseSelectColor", value = $curSelectKey)
        $index = DictionaryGet(dict = $curHouseDict, key = "curHouseVarsIndex")
        DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = nil)
        ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHouseDict))
        CallTrigger(object = $obj1, event = "CHANGE_HOUSE_COLOR", oldHouseColor = $oldSelectKey, houseColor = $curSelectKey)
    }Else{
        DictionarySet(dict = $curHouseDict, key = "isCurEquip", value = "disable")
        $index = DictionaryGet(dict = $curHouseDict, key = "curHouseVarsIndex")
        DictionarySet(dict = $curHouseDict, key = "curHouseVarsIndex", value = nil)
        ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHouseDict))
        DictionarySet(dict = $newHouseDict, key = "isCurEquip", value = "enable")
        DictionarySet(dict = $newHouseDict, key = "houseSelectColor", value = $curSelectKey)
        $index = DictionaryGet(dict = $newHouseDict, key = "curHouseVarsIndex")
        DictionarySet(dict = $newHouseDict, key = "curHouseVarsIndex", value = nil)
        ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $newHouseDict))
        CallTrigger(object = $obj1, event = "CHANGE_HOUSE", 
            newHouse = DictionaryGet(dict = $newHouseDict, key = "houseCfg"), houseColor = $curSelectKey)
    }
    ShowGenericListDisplayBox(entity = $obj1, closeWin = true)
}

CHANGE_HOUSE_COLOR{ -- 换色
    $curHouse = GetObjectVar(obj = $obj1, key = "house")
    $oldBuff = GetEntityTypeBuff(entity = $curHouse, key = "fullName", value = $oldHouseColor)
    If($oldBuff){
        RemoveEntityBuff(entity = $curHouse, buff = $oldBuff)
    }
    AddEntityBuff(entity = $curHouse, cfg = $houseColor) -- 通过buff换skin

    -- 换色特效
    $effectBuff = GetEntityTypeBuff(entity = $curHouse, key = "fullName", value = GetConfigVar(obj = $house, key = "houseCreateBuff"))
    If($effectBuff){
        RemoveEntityBuff(entity = $curHouse, buff = $effectBuff)
    }
    AddEntityBuff(entity = $curHouse, cfg = GetConfigVar(obj = $curHouse, key = "houseCreateBuff"), buffTime = 200)
}

CHANGE_HOUSE{ -- 换房子/存档
    $region = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "region")
    $obj1.curHouseCfg = $newHouse
    ------------------------------------------ 改变房子(actor)，直接杀掉原来的，新建新的
    CallTrigger(object = $obj1, event = "REMOVE_HOUSE_OUTSIDE")
    ShowTip(entity = $obj1, tipType = 2, textKey = "house_change")

    $obj1.entityOf3DUI = {}
    CallTrigger(object = $obj1, event = "CREATE_HOUSE_OUTSIDE", region = $region, houseCfg = $newHouse, houseColor = $houseColor)
}



-------------------------------------- ui/btn/event
HOUSE_TAB_EVENT{
    If(not $key or "0" == $key){
        $listInfoTb = {}
        Foreach(array = GetConfigVar(obj = $obj1, key = "houseStore") or {}, key = "houseFullName"){
            $coinImg = ArrayGet(array = @CURRENT_ID_IMAGE, index = (GetEntityCfg(fullName = $houseFullName, key = "coinId") or 3) + 1)
                        or "plugin/myplugin/image/coin.png"
            ArrayAppend(array = $listInfoTb, value = {
                image = GetEntityCfg(fullName = $houseFullName, key = "defaultColorImage") or "",
                text = GetEntityCfg(fullName = $houseFullName, key = "houseType") or "",
                coinImg = $coinImg or "",
                btnShowText = GetEntityCfg(fullName = $houseFullName, key = "buyMoney") or 0,
                context = {houseCfg = $houseFullName}
            })
        }
        ShowGenericListDisplayBox(entity = $obj1, infoTb = {
            uiWin = "genericListDisplayBox3",
            childInfoTb = {
                listInfo = {
                    infoTb = $listInfoTb
                },
                btnInfo = {
                    btnText = "ui_house_buy_house",
                    event = "SURE_BUY_HOUSE"
                }
            }
        }, isOpenChild = true)
        Return()
    }
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars") or {}
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "houseId") == $key){
            $curSelectDict = $dict
            Break()
        }
    }
    -- $curSelectHouse = $houseVar
    If(not $curSelectDict){
        Return()
    }
    -- color
    $selectGvInfo = {}
    $worldAllColor = GetWorldVar(key = "allColor")
    $curHouseColor = GetEntityCfg(fullName = DictionaryGet(dict = $curSelectDict, key = "houseCfg"), key = "allColor")
    Foreach(array = $curHouseColor, key = "entity_color"){
        Foreach(array = $worldAllColor, key = "world_color"){
            If(ArrayGet(array = $entity_color, index = 1) == ArrayGet(array = $world_color, index = 1)){
                ArrayAppend(array = $selectGvInfo, value = {
                    rightImg = ArrayGet(array = $world_color, index = 3),
                    leftImg = ArrayGet(array = $entity_color, index = 2),
                    key = ArrayGet(array = $world_color, index = 2),
                    curSelect = ArrayGet(array = $world_color, index = 2) == DictionaryGet(dict = $curSelectDict, key = "houseSelectColor")
                        and true or false
                })
            }
        }
    } 
    ShowGenericListDisplayBox(entity = $obj1, infoTb = {
        uiWin = "genericListDisplayBox2",
        childInfoTb = {
            upperLayerKey = $key,
            titleTb = {text = DictionaryGet(dict = $curSelectDict, key = "houseName"), event = "EDIT_HOUSE_NAME", 
                context = {houseKey = DictionaryGet(dict = $curSelectDict, key = "houseId"), houseName = DictionaryGet(dict = $curSelectDict, key = "houseName")}},
            selectInfo = {
                selectTitleText = "ui_house_choice_color",
                selectButtomText = DictionaryGet(dict = $curSelectDict, key = "houseType"),
                selectGvSpec = 3,
                selectGvInfo = $selectGvInfo
            },
            btnInfo = {
                btnType = 2,
                btnList = [
                    {text = "ui_house_sell_house", event = "SELL_HOUSE", context = { houseKey = $key }},
                    {text = "ui_house_use_house", event = "UPDATE_HOUSE", context = { houseKey = $key },
                        curSelect = DictionaryGet(dict = $curSelectDict, key = "isCurEquip") == "enable"}
                ] 
            }
        }
    }, isOpenChild = true)
}

EDIT_HOUSE_NAME{
    -- 房子改名
    If(not $titleEditText or not $upperLayerKey){
        Return()
    }
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "houseId") == $upperLayerKey){
            DictionarySet(dict = $dict, key = "houseName", value = $titleEditText)
            ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $dict))
            Break()
        }
    }
    $mail = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "mail")
    SetEntityName(entity = $mail, name = $titleEditText)
    ShowGenericListDisplayBox(entity = $obj1, closeWin = true)
    StartTimer(rep = false, time = 1, object = $obj1, obj1 = $obj1, mail = $mail, event = "UPDATE_HOUSE_TAB")
}

UPDATE_HOUSE_TAB{
    CastSkill(skill = "/click", from = $obj1, packet = {targetID = GetObjectID(object = $mail)})
}

SURE_BUY_HOUSE{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars") or {}
    If(not $houseCfg or ArraySize(array = $houseVars) >= (GetConfigVar(obj = $obj1, key = "maxHouseVarsSize") or 8)){
        -- 买房子 成功则关闭界面，失败则不关闭 -- 达到房子上限也不给买
        ShowTip(entity = $obj1, tipType = 2, textKey = "ui_buy_failure")
        Return()
    }
    ------------- 花钱买房 -- 此处判断是否购买失败，失败直接返回
    $buyMoney = GetEntityCfg(fullName = $houseCfg, key = "buyMoney") or 0
    $coinId = GetEntityCfg(fullName = $houseCfg, key = "coinId")
    If(3 ~= $coinId){
        $Context = {
            coinId = $coinId,
            buyMoney = $buyMoney,
            houseCfg = $houseCfg
        }
        $hintImage = GetEntityCfg(fullName = $houseCfg, key = "hintImage")
        $hintDesc = GetEntityCfg(fullName = $houseCfg, key = "hintDesc")
        $houseName = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultName")
        ShowShopItemDetail(
            player = $obj1, 
            event = "TIP_SURE_BUY_HOUSE", 
            context = $Context, 
            hintImage = $hintImage, 
            price = $buyMoney, tip = $houseName, desc = $hintDesc
        )
        Return()
    }
    If(not PayCurrency(entity = $obj1, coinName = "green_currency", count = $buyMoney)){
        ShowGoldShop(player = $obj1, show = true)    
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_house_not_enough_money", keepTime = 40)
        Return()
    }
    CallTrigger(object = $obj1, event = "GIVE_HOUSE", houseCfg = $houseCfg)
}
TIP_SURE_BUY_HOUSE(){
    BuyGoods(player = $obj1, uniqueId = 20201001,  coinId = $coinId, price = $buyMoney, houseCfg = $houseCfg, event = "BUY_HOUSE_BY_APP" )
}
BUY_HOUSE_BY_APP{
    $dictValue = NewDictionary($response)
    $houseCfg = DictionaryGet(dict = $dictValue, key = "houseCfg")
    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    If(not $isSucceed){
        ShowRecharge(player = $obj1)
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_house_not_enough_money", keepTime = 40)
        Return()
    }
    CallTrigger(object = $obj1, event = "GIVE_HOUSE", houseCfg = $houseCfg)
}

GIVE_HOUSE{
    ------------- 给房子
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars") or {}
    $houseId = Concat(p1 = GetTime(), p2 = GetGameTime(), p3 = Random(min = 0, max = 999999))
    $curSelect = GetEntityCfg(fullName = $houseCfg, key = "defaultColor")
    ArrayAppend(array = $houseVars, value = { -- 购买成功后拼接一个新的房子数据放进entity的houseVars中 -- TEST CODE
            houseCfg = $houseCfg,
            houseSelectColor = $curSelect,
            houseInsideFurnishing = Copy(value = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultFurniture") or []),
            houseInsideRegionColors = Copy(value = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultInsideMapColorTb") or {}),
            isCurEquip = "disable",
            houseName = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultName") or "",
            houseType = GetEntityCfg(fullName = $houseCfg, key = "houseType") or "other",
            houseId = $houseId,
            houseInsideDoor = GetEntityCfg(fullName = $houseCfg, key = "insideDoor") or "myplugin/house_base_inside_door"
        }
    )
    ShowTip(entity = $obj1, tipType = 2, textKey = "ui_buy_success")
    ShowGenericListDisplayBox(entity = $obj1, closeWin = true)
    CallTrigger(object = $obj1, event = "UPDATE_HOUSE", houseKey = $houseId, curSelectKey = $curSelect)
    GameAnalyticsCustomEvent(player = $obj1, parts = ["buy:goods:house",
        Concat(p1 = "myplugin_", p2 = FindStr(where_ = "/", back_ = true, str = $houseCfg)),
        GetEntityCfg(fullName = $houseCfg, key = "houseType") or "other"])
}

SELL_HOUSE{
    $curSelectDict = nil
    Foreach(array = GetObjectVar(obj = $obj1, key = "houseVars") or {}, key = "houseVar"){
        $dict = NewDictionary($houseVar)
        If(DictionaryGet(dict = $dict, key = "houseId") == $houseKey){
            $curSelectDict = $dict
            Break()
        }
    }
    If(not $curSelectDict){
        Return()
    }
    -- showImage
    $worldAllColor = GetWorldVar(key = "allColor")
    $curHouseColor = GetEntityCfg(fullName = DictionaryGet(dict = $curSelectDict, key = "houseCfg"), key = "allColor")
    Foreach(array = $curHouseColor, key = "entity_color"){
        Foreach(array = $worldAllColor, key = "world_color"){
            If(ArrayGet(array = $world_color, index = 2) == DictionaryGet(dict = $curSelectDict, key = "houseSelectColor") and 
                ArrayGet(array = $world_color, index = 1) == ArrayGet(array = $entity_color, index = 1)){
                $showImage = ArrayGet(array = $entity_color, index = 2)
                Break()
            }
        }
    }
    $sellHouseMoney = 0
    $sellHouseCfg = DictionaryGet(dict = $curSelectDict, key = "houseCfg")
    $sellHouseMoney = $sellHouseMoney + GetEntityCfg(fullName = $sellHouseCfg, key = "sellMoney")
    $sellHouseFurnitures = DictionaryGet(dict = $curSelectDict, key = "houseInsideFurnishing") or {}
    Foreach(array = $sellHouseFurnitures, key = "furniture"){
        $fDict = NewDictionary($furniture)
        $cfg = DictionaryGet(dict = $fDict, key = "cfg")
        $sellMoney = GetEntityCfg(fullName = $cfg, key = "sellMoney")
        If(DictionaryGet(dict = $fDict, key = "isOldFurnishing")){
            $sellMoney = GetEntityCfg(fullName = $cfg, key = "sellByDiscountMoney")
        }
        $sellHouseMoney = $sellHouseMoney + $sellMoney
    }          
    -- showTextTb
    $showTextTb = {textWeightList = [
        {keyText = "ui_house_sell_house_money", valueText = $sellHouseMoney},
        {keyText = "ui_house_sell_house_type", valueText = DictionaryGet(dict = $curSelectDict, key = "houseType")}
    ]}
    ShowGenericListDisplayBox(entity = $obj1, infoTb = {
        uiWin = "genericShowPage",
        childInfoTb = {
            upperLayerKey = $houseKey,
            titleTb = {text = DictionaryGet(dict = $curSelectDict, key = "houseName"), event = "EDIT_HOUSE_NAME", 
                context = {houseKey = DictionaryGet(dict = $curSelectDict, key = "houseId"), houseName = DictionaryGet(dict = $curSelectDict, key = "houseName")}},
            showImage = $showImage,
            showTextTb = $showTextTb,
            btnInfo = {
                btnType = 2,
                btnList = [
                        {text = "ui_sure", event = "SELL_HOUSE_SURE", context = { houseKey = $houseKey}},
                        {text = "ui_cancel", event = "HOUSE_TAB_EVENT", context = { key = $houseKey}}
                    ]
            }
        }
    }, isOpenChild = true)
}

SELL_HOUSE_SURE{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    If(ArraySize(array = $houseVars) <= 1){ -- 最后一套房不能出售
        ShowTip(entity = $obj1, tipType = 2, textKey = "ui_house_sell_cant_sell")
        Return()
    }
    $isSellEquipHouse = false
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "houseId") == $houseKey){
            If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
                $isSellEquipHouse = true
            }
            $curSelectDict = $dict
            ArrayRemove(array = $houseVars, index = $index)
            Break()
        }
    }
    If($isSellEquipHouse){
        $newHouseVar = ArrayGet(array = $houseVars, index = 1)
        $newHouseDict = NewDictionary($newHouseVar)
        DictionarySet(dict = $newHouseDict, key = "isCurEquip", value = "enable")
        ArraySet(array = $houseVars, index = 1, value = DictionaryToTable(dict = $newHouseDict))
        CallTrigger(object = $obj1, event = "CHANGE_HOUSE", 
                newHouse = DictionaryGet(dict = $newHouseDict, key = "houseCfg"), houseColor = DictionaryGet(dict = $newHouseDict, key = "houseSelectColor"))
    }
    -- 出售成功，给玩家钱
    $sellHouseCfg = DictionaryGet(dict = $curSelectDict, key = "houseCfg")
    AddCurrency(entity = $obj1, coinName = "green_currency", 
        count = GetEntityCfg(fullName = $sellHouseCfg, key = "sellMoney"))
    CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "getMoneyTipSoundBuff")
    $sellHouseFurnitures = DictionaryGet(dict = $curSelectDict, key = "houseInsideFurnishing") or {}
    Foreach(array = $sellHouseFurnitures, key = "furniture"){
        $fDict = NewDictionary($furniture)
        $cfg = DictionaryGet(dict = $fDict, key = "cfg")
        $sellMoney = GetEntityCfg(fullName = $cfg, key = "sellMoney")
        If(DictionaryGet(dict = $fDict, key = "isOldFurnishing")){
            $sellMoney = GetEntityCfg(fullName = $cfg, key = "sellByDiscountMoney")
        }
        $coinName = GetEntityCfg(fullName = $cfg, key = "coinName")
        AddCurrency(entity = $obj1, coinName = $coinName, count = $sellMoney)
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "getMoneyTipSoundBuff")
    }

    ShowGenericListDisplayBox(entity = $obj1, closeWin = true)
    $mail = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "mail")
    -- If(not $isSellEquipHouse){
    StartTimer(rep = false, time = 2, object = $obj1, obj1 = $obj1, event = "DELAY_SHOW_HOUSE_SHOP")
    -- }
}

DELAY_SHOW_HOUSE_SHOP{
    If(not IsPlayer(entity = $obj1)){
        Return()
    }
    ------------------------------------------ 打开换色换房子操作界面/存档
    -- infoTb是拼出来的
    $btnList = [{text = "ui_house_get_more", btnType = 3, event = "HOUSE_TAB_EVENT", context = { key = "0" }}]
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    Foreach(array = $houseVars, key = "houseVar"){
        $dict = NewDictionary($houseVar)
        ArrayAppend(array = $btnList, value = {
            text = DictionaryGet(dict = $dict, key = "houseName"), 
            curSelect = DictionaryGet(dict = $dict, key = "isCurEquip") == "enable",
            isEquip = DictionaryGet(dict = $dict, key = "isCurEquip") == "enable",
            event = "HOUSE_TAB_EVENT", 
            context = { key = DictionaryGet(dict = $dict, key = "houseId") }
        })
    }
    $infoTb = {
        titleTb = {text = "ui_house_my_home"},
        btnInfo = {btnList = $btnList}
    }
    ShowGenericListDisplayBox(entity = $obj1, infoTb = $infoTb)
}

BUY_STORE{
    If(not $cfg or $obj1.isInnerInsideDoor){
        Return()
    }
    $buyMoney = GetEntityCfg(fullName = $cfg, key = "buyMoney")
    $coinId = GetEntityCfg(fullName = $cfg, key = "coinId")
    Foreach(array = @DECORATION_STORE, key = "decorationTb"){
        $decorationDic = NewDictionary($decorationTb)
        If(DictionaryGet(dict = $decorationDic, key = "fullName") == $cfg){
            $buyMoney = ToNumber(DictionaryGet(dict = $decorationDic, key = "buyMoney") or 0)
            $coinId = ToNumber(DictionaryGet(dict = $decorationDic, key = "coinId") or 3)
            $sellMoney = ToNumber(DictionaryGet(dict = $decorationDic, key = "sellMoney") or 0)
            $sellByDiscountMoney = ToNumber(DictionaryGet(dict = $decorationDic, key = "sellByDiscountMoney") or 0)
            $storeId = $storeId or DictionaryGet(dict = $decorationDic, key = "storeId") or "other"
        }
    }
    If(3 ~= $coinId){
        BuyGoods(player = $obj1, uniqueId = 20201002,  coinId = $coinId, price = $buyMoney, cfg = $cfg, storeId = $storeId, sellMoney = $sellMoney, sellByDiscountMoney = $sellByDiscountMoney, event = "BUY_STORE_BY_APP" )
        Return()
    }
    If(not PayCurrency(entity = $obj1, coinName = "green_currency", count = $buyMoney)){
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_store_not_enough_money", keepTime = 40)
        -- $obj1.hadCloseActorStore = true
        -- ShowGenericActorShowStore(entity = $obj1, closeWin =true)
        ShowGoldShop(player = $obj1, show = true)
        Return()
    }
    CallTrigger(object = $obj1, event = "GIVE_STORE", cfg = $cfg, storeId = $storeId, sellMoney = $sellMoney, sellByDiscountMoney = $sellByDiscountMoney)
}

BUY_STORE_BY_APP{
    $dictValue = NewDictionary($response)
    $cfg = DictionaryGet(dict = $dictValue, key = "cfg")
    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    $storeId = DictionaryGet(dict = $dictValue, key = "storeId")
    If(not $isSucceed){
        ShowRecharge(player = $obj1)
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_store_not_enough_money", keepTime = 40)
        Return()
    }
    CallTrigger(object = $obj1, event = "GIVE_STORE", cfg = $cfg, storeId = $storeId, sellMoney = $sellMoney, sellByDiscountMoney = $sellByDiscountMoney)
}

GIVE_STORE{
    $obj1.hadCloseActorStore = true
    ShowGenericActorShowStore(entity = $obj1, closeWin =true)

    $map = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "houseInsideMap")
    $telPos = GetEntityPosition(entity = $obj1)
    $rideOn = GetRideOn(entity = $obj1.house.owner)
    If($rideOn and GetConfigVar(obj = $rideOn, key = "base") == "fur_base"){
        $rideOnLastSideNormal = $rideOn.lastSideNormal
        $rideOnYaw = GetEntityYaw(entity = $rideOn)
        $rideOnPitch = GetEntityPitch(entity = $rideOn)
        $rideOnRoll = GetEntityRoll(entity = $rideOn)
    }
    If($rideOn){
        $telPos = GetEntityPosition(entity = $rideOn)
    }
    $npc = CreateNpc(pos = $telPos, map = $map, cfgName = $cfg, ry = $rideOnYaw or 0, rp = $rideOnPitch or 0, owner = $obj1)
    If($rideOnRoll){
        SetEntityRoll(entity = $npc, rotationRoll = $rideOnRoll)
    }
    $npc.lastSideNormal = $rideOnLastSideNormal
    SetObjectVar(obj = $npc, key = "house", value = GetObjectVar(obj = $obj1, key = "house"))
    
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHousedict = $dict
            Break()
        }
    }
    $interFruId = Concat(p1 = $cfg, p2 = GetGameTime())
    $npc.interFruId = $interFruId
    ArrayAppend(array = DictionaryGet(dict = $curHousedict, key = "houseInsideFurnishing"), value = {
        pos = GetEntityPosition(entity = $npc), yaw = GetEntityYaw(entity = $npc),cfg = $cfg,
        furnishingId = GetObjectID(object = $npc),isOldFurnishing = false, interFruId = $interFruId,
        sellMoney = $sellMoney, sellByDiscountMoney = $sellByDiscountMoney
    })
    $index = DictionaryGet(dict = $curHousedict, key = "curHouseVarsIndex")
    DictionarySet(dict = $curHousedict, key = "curHouseVarsIndex", value = nil)
    ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHousedict))

    CallTrigger(object = $obj1, obj1 = $obj1, npc = $npc, add = true, event = "UPDATE_PLAYER_3DUI_ENTITY")
    CallTrigger(object = $obj1, obj1 = $obj1, npc = $npc, add = true, event = "CREATE_PLAYER_SINGLE_NUMBER_BOARD_ENTITY")
    CallTrigger(object = $obj1, obj1 = $obj1, npc = $npc, add = true, event = "CREATE_PLAYER_SINGLE_BLACK_BOARD_ENTITY")
    GameAnalyticsCustomEvent(player = $obj1, parts = ["buy:goods:decoration",$storeId,
        Concat(p1 = "myplugin_", p2 = FindStr(where_ = "/", back_ = true, str = $cfg))])
    $npc.isBuyByShop = true
    If(GetConfigVar(obj = $npc, key = "isBgmSpeakers")) {
        $counts = GetMapVar(map = $map, key = "SpeakersCount")
        If(not $counts){
            $counts = 0
        }
        $counts = $counts + 1
        SetMapVar(map = $map, key = "SpeakersCount", value = $counts)
    }
}

UPDATE_PLAYER_3DUI_ENTITY{
    $typeOf3DUI = GetConfigVar(obj = $npc, key = "typeOf3DUI")
    If($typeOf3DUI){ -- 购买/出售/生成 3dui 家具
        If(not GetObjectVar(obj = $obj1, key = "entityOf3DUI"))
        {
            SetObjectVar(obj = $obj1, key = "entityOf3DUI", value = {})
        }
        
        $entityOf3DUIDict = NewDictionary(GetObjectVar(obj = $obj1, key = "entityOf3DUI"))
        $typeTable = DictionaryGet(dict = $entityOf3DUIDict, key = $typeOf3DUI) or {}
        If($add)
        {
            ArrayAppend(array = $typeTable, value = GetObjectID(object = $npc))
        }
        ElseIf($remove)
        {
            $map = GetEntityMap(entity = $npc)
            ForLoop(from = 1, to = ArraySize(array = $typeTable), key = "index"){
                If(ArrayGet(array = $typeTable, index = $index) == GetObjectID(object = $npc)){
                    ArrayRemove(array = $typeTable, index = $index)
                }
            }
        }
        DictionarySet(dict = $entityOf3DUIDict, key = $typeOf3DUI, value = $typeTable)
        SetObjectVar(obj = $obj1, key = "entityOf3DUI", value = DictionaryToTable(dict = $entityOf3DUIDict))
    }
}

SAVE_FURNITURE{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHousedict = $dict
            Break()
        }
    }
    $furnitures = DictionaryGet(dict = $curHousedict, key = "houseInsideFurnishing")
    ForLoop(from = 1, to = ArraySize(array = $furnitures or {}), key = "fIndex"){
        $fDict = NewDictionary(ArrayGet(array = $furnitures, index = $fIndex))
        $npc = GetObject(objID = DictionaryGet(dict = $fDict, key = "furnishingId"))
        If($npc){
            DictionarySet(dict = $fDict, key = "pos", value = GetEntityPosition(entity = $npc))
            DictionarySet(dict = $fDict, key = "yaw", value = GetEntityYaw(entity = $npc))
            DictionarySet(dict = $fDict, key = "pitch", value = GetEntityPitch(entity = $npc))
            DictionarySet(dict = $fDict, key = "roll", value = GetEntityRoll(entity = $npc))
            DictionarySet(dict = $fDict, key = "lastSideNormal", value = $npc.lastSideNormal or Table(x = 0,y = 1,z = 0))
            -- 如果是衣架，有saveSkinList，则需要保存当前衣架的皮肤
            If(GetConfigVar(obj = $npc, key = "saveSkinList")){
                $saveSkinList = {}
                Foreach(array = GetConfigVar(obj = $npc, key = "saveSkinList"), key = "skinName"){
                    ArrayAppend(array = $skinList, value = {
                        skinName = $skinName,
                        skin = GetSkin(entity = $npc, skinName = $skinName)
                    })
                }
                DictionarySet(dict = $fDict, key = "saveSkinList", value = $saveSkinList)
            }
            -- 如果是黑板类型的，则保存黑板相关数据
            DictionarySet(dict = $fDict, key = "blackboardStr", value = GetObjectVar(obj = $npc, key = "blackboardStr"))
        }
        ArraySet(array = $furnitures, index = $fIndex, value = DictionaryToTable(dict = $fDict))
    }
    If($obj1.lastInterFruId){
        DictionarySet(dict = $curHousedict, key = "lastInterFruId", value = $obj1.lastInterFruId)
    }
    $index = DictionaryGet(dict = $curHousedict, key = "curHouseVarsIndex")
    DictionarySet(dict = $curHousedict, key = "curHouseVarsIndex", value = nil)
    ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHousedict))
}

SHOW_TITLE_BAR{
    If($obj1.isInnerInsideDoor){
        Return()
    }
    $obj1Map = GetEntityMap(entity = $obj1)
    $obj1MapOwner = GetMapVar(map = $obj1Map, key = "owner")
    If($obj1.inPartyOwnerId ~= 0 or not $obj1MapOwner or ($obj1MapOwner ~= GetObjectVar(obj = $obj1, key = "house"))){
        Return()--in party
    }
    $editBuff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = "myplugin/edit_house_buff")
    If($editBuff){
        RemoveEntityBuff(entity = $obj1, buff = $editBuff)
    }
    
    $lastInteractionUiObjId = GetObjectVar(obj = $obj1, key = "lastInteractionUiObjId")
    If($lastInteractionUiObjId){
        $dec = GetObject(objID = $lastInteractionUiObjId)
        $dec.isNotNeedShowDec = true
        UpdateEntityEditContainer2(player = $obj1, entityId = $lastInteractionUiObjId, show = false)
        SetObjectVar(obj = $obj2, key = "lastInteractionUiObjId", value = nil)
    }

    CallTrigger(object = $obj1, event = "SAVE_FURNITURE")

    $infoTb = {
        btnInfo = {
            btnList = [
                {text = "ui_edit", btnType = 5, event = "EDIT_HOUSE"},
                {text = "ui_lock", btnType = 2, event = "HOUSE_LOCK", 
                    curSelect = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "isLock")}
            ]
        }
    }
    $obj1.hadCloseActorStore = false
    ShowTitleBarPage(entity = $obj1, infoTb = {})
    StartTimer(object =$obj1, obj1 =$obj1, infoTb = $infoTb, time = 3, event = "UPDATE_TITLE_SHOW_BAR")
}

EDIT_HOUSE{
    $obj1Map = GetEntityMap(entity = $obj1)
    $obj1MapOwner = GetMapVar(map = $obj1Map, key = "owner")
    If(not $obj1MapOwner or ($obj1MapOwner ~= GetObjectVar(obj = $obj1, key = "house"))){
        Return()--in outside
    }
    If(not $obj1.hadCloseActorStore){
        ShowGenericActorShowStore(entity = $obj1, closeWin =true)
    }
    $editBuff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = "myplugin/edit_house_buff")
    If(not $editBuff){
        AddEntityBuff(entity = $obj1, cfg = "myplugin/edit_house_buff")
    }

    $infoTb = {
        btnInfo = {
            btnList = [
                {text = "ui_dec_shop", btnType = 1, event = "SHOW_DEC_STORE"},
                {text = "ui_cancel", btnType = 4, event = "SHOW_TITLE_BAR"}
            ]
        }
    }
    ShowTitleBarPage(entity = $obj1, infoTb = {})
    StartTimer(object =$obj1, obj1 =$obj1, infoTb = $infoTb, time = 1, event = "UPDATE_TITLE_SHOW_BAR")
}

UPDATE_TITLE_SHOW_BAR{
    ShowTitleBarPage(entity = $obj1, infoTb = $infoTb, updateWin = true)
}

LOCK_HOUSE_CONTENT{
    SetObjectVar(obj = $house, key = "isLock", value = $isLock)
    If($textKey){
        ShowTip(entity = $obj1, tipType = 2,textKey = $textKey, keepTime = 40)
    }
    CallTrigger(object = $obj1, event = "SHOW_TITLE_BAR") 
}

HOUSE_LOCK{
    $house = GetObjectVar(obj = $obj1, key = "house")
    $insideMap = GetObjectVar(obj = $house, key = "houseInsideMap")
    $isLock = GetObjectVar(obj = $house, key = "isLock")
    If(not $isLock){ -- wanna to lock
        $notCurHouseFamilyPlayer = {}
        $allPlayerInThisHouse = GetMapPlayer(map = $insideMap)
        Foreach(array = $allPlayerInThisHouse, key = "player"){
            If(GetObjectID(object = $obj1) ~= GetObjectID(object = $player) and 
                (0 == GetEntityTeam(entity = $player) or GetEntityTeam(entity = $player) ~= GetEntityTeam(entity = $obj1))){
                ArrayAppend(array = $notCurHouseFamilyPlayer, value = $player)
            }
        }
        If(ArraySize(array = $notCurHouseFamilyPlayer) > 0){
            $btnInfo = {
                leftCoinId = nil,
                leftContent = "ui_cancel",
                rightCoinId = nil,
                rightContent = "ui_sure"
            }
            $content = {
                msg = "ui_tip_sure_lock_house_and_kick_some_one"
            }
            $tipType = 5
            ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "SURE_LOCK_HOUSE_AND_KICK_OTHERS", 
                p1 = "ui_tip", p2 = $content, p3 = $btnInfo)
        }Else{
            StartTimer(object =$obj1, obj1 =$obj1, house = $house, isLock = true, textKey = "house_lock", time = 2, event = "LOCK_HOUSE_CONTENT")
        }
    }Else{ -- 上锁状态则重置为未上锁状态
        StartTimer(object =$obj1, obj1 =$obj1, house = $house, isLock = false, textKey = "house_unlock", time = 2, event = "LOCK_HOUSE_CONTENT")
    }
}

FUNC_TO_KICK_PLAYER_AND_SHOW_TIP --params: insideDoor, notToClearRide
{
    $obj1.kickOut = true
    If(not $notToClearRide) {
        CallTrigger(object = $obj1, event = "PLAYER_CLEAR_RIDE")
    }
    CallTrigger(object = $insideDoor, obj1 = $insideDoor, obj2 = $obj1, event = "INTER_WITH_DOOR")
    ShowTip(entity = $obj1, tipType = 2,textKey = "house_owner_lock_house_and_kick_you", keepTime = 40)
}

SURE_LOCK_HOUSE_AND_KICK_OTHERS{
    $house = GetObjectVar(obj = $obj1, key = "house")
    If($button == "right"){
        $insideMap = GetObjectVar(obj = $house, key = "houseInsideMap")
        $selfTeamId = GetEntityTeam(entity = $obj1)
        $insideDoor = GetObjectVar(obj = $house, key = "insideDoor")
        If($obj1.createdTrolley) { --先踢出房主手推车上的非家人
            $passengers = NewDictionary(GetPassengers(entity = $obj1.createdTrolley))
            ForeachDictionary(dict = $passengers, keyName = "key", valueName = "objID") {
                $player = GetObject(objID = $objID)
                If($player ~= $obj1 and ($selfTeamId == 0 or GetEntityTeam(entity = $player) ~= $selfTeamId)) {
                    CallTrigger(object = $player, event = "FUNC_TO_KICK_PLAYER_AND_SHOW_TIP", insideDoor = $insideDoor)
                }
            }
        } ElseIf($obj1.useTrolley) { --再踢出房主所在手推车的主人（如果是非家人的话）
            $trolley = GetRideOn(entity = $obj1)
            $trolleyOwner = GetOwner(entity = $trolley)
            If(IsPlayer(entity = $trolleyOwner) and ($selfTeamId == 0 or $selfTeamId ~= GetEntityTeam(entity = $trolleyOwner))) {
                    CallTrigger(obj1 = $obj1, event = "PLAYER_CLEAR_RIDE")
                CallTrigger(object = $trolleyOwner, event = "FUNC_TO_KICK_PLAYER_AND_SHOW_TIP", insideDoor = $insideDoor, notToClearRide = true)
            }
                }
        Foreach(array = GetMapPlayer(map = $insideMap), key = "player") { --再踢出推着手推车的非家人
            If(not IsPlayer(entity = $player) or $obj1 == $player or GetEntityMap(entity = $player) ~= $insideMap or ($selfTeamId ~= 0 and $selfTeamId == GetEntityTeam(entity = $player)) or not $player.createdTrolley) { Continue() }
            CallTrigger(object = $player, event = "FUNC_TO_KICK_PLAYER_AND_SHOW_TIP", insideDoor = $insideDoor, notToClearRide = true)
                }
        Foreach(array = GetMapPlayer(map = $insideMap), key = "player") { --最后踢出剩余的非家人
            If(IsPlayer(entity = $player) && $obj1 ~= $player && GetEntityMap(entity = $player) == $insideMap && ($selfTeamId == 0 || $selfTeamId ~= GetEntityTeam(entity = $player))) {
                CallTrigger(object = $player, event = "FUNC_TO_KICK_PLAYER_AND_SHOW_TIP", insideDoor = $insideDoor)
            }
        } 
        StartTimer(object =$obj1, obj1 =$obj1, house = $house, isLock = true, textKey = "house_lock", time = 2, event = "LOCK_HOUSE_CONTENT")
    }ElseIf($button == "left"){
        StartTimer(object =$obj1, obj1 =$obj1, house = $house, isLock = true, textKey = "house_lock", time = 2, event = "LOCK_HOUSE_CONTENT")
    }Else{
        StartTimer(object =$obj1, obj1 =$obj1, house = $house, isLock = false, time = 2, event = "LOCK_HOUSE_CONTENT")
    }
}

UPDATE_EDIT_STORE_SELL_TAB{
    Foreach(array = GetConfigVar(obj = $obj1, key = "editStoreSellTab") or {}, key = "topTab"){
        $dic = NewDictionary($topTab)
        ArrayAppend(array = $btnListTb, value = {
            text = DictionaryGet(dict = $dic, key = "text"),
            curSelect = $titleKey == DictionaryGet(dict = $dic, key = "titleKey"),
            event = DictionaryGet(dict = $dic, key = "event"),
            context = {
                titleKey = DictionaryGet(dict = $dic, key = "titleKey"),
                nextCfgKey = DictionaryGet(dict = $dic, key = "nextCfgKey")
            }
        })
    }
}

SHOW_DEC_STORE{
    If($obj1.isInnerInsideDoor){
        Return()
    }
    $obj1.hadCloseActorStore = false
    ShowGenericActorShowStore(entity = $obj1, infoTb = {})
    ShowTitleBarPage(entity = $obj1, closeWin = true)
    If(not $titleKey){
        $titleKey = "allDec"
    }
    If(not $nextCfgKey){
        $nextCfgKey = "decStoreList"
    }
    $btnListTb = {}
    CallTrigger(object = $obj1, event = "UPDATE_EDIT_STORE_SELL_TAB", titleKey = $titleKey, nextCfgKey = $nextCfgKey, btnListTb = $btnListTb) 

    $listInfoTb = {}
    $closeEvent = {}
    Foreach(array = GetConfigVar(obj = $obj1, key = $nextCfgKey) or {}, key = "bottomBtn"){
        $dic = NewDictionary($bottomBtn)
        If(DictionaryGet(dict = $dic, key = "nextCfgKey")){
            ArrayAppend(array = $listInfoTb, value = {
                text = DictionaryGet(dict = $dic, key = "text"),
                image = DictionaryGet(dict = $dic, key = "image"),
                event = DictionaryGet(dict = $dic, key = "event"),
                context = {
                    titleKey = DictionaryGet(dict = $dic, key = "titleKey"),
                    nextCfgKey = DictionaryGet(dict = $dic, key = "nextCfgKey"),
                    childRegionKey = DictionaryGet(dict = $dic, key = "childRegionKey")
                }
            })
        }
        If(DictionaryGet(dict = $dic, key = "closeEvent")){
            $closeEvent = {
                event = DictionaryGet(dict = $dic, key = "closeEvent"),
                context = DictionaryGet(dict = $dic, key = "context")
            }
        }
    }

    $infoTb = {
        btnInfo = {
            btnType = 3,
            btnList = $btnListTb
        },
        listInfo = {
            uiType = 3,
            infoTb = $listInfoTb
        },
        eventInfo = {
            closeEventInfo = $closeEvent
        }
    }
    StartTimer(object =$obj1, obj1 =$obj1, infoTb = $infoTb, time = 1, event = "UPDATE_ACTOR_SHOW_STORE")
}

UPDATE_ACTOR_SHOW_STORE{
    ShowGenericActorShowStore(entity = $obj1, infoTb = $infoTb, updateWin =true)
}

UPDATE_STORE_LIST{
    $dicInfoTb = NewDictionary(GetConfigVar(obj = $obj1, key = $nextCfgKey) or {})
    If(DictionaryGet(dict = $dicInfoTb, key = "storeInfo")){
        $dic = NewDictionary(DictionaryGet(dict = $dicInfoTb, key = "storeInfo"))
        $storeId = DictionaryGet(dict = $dic, key = "storeId")
        Foreach(array = @DECORATION_STORE, key = "decorationTb"){
            $decorationDic = NewDictionary($decorationTb)
            $type = DictionaryGet(dict = $decorationDic, key = "type")
            If(DictionaryGet(dict = $decorationDic, key = "storeId") == $storeId and "entity" == $type){
                $fullName = DictionaryGet(dict = $decorationDic, key = "fullName")
                ArrayAppend(array = $listInfoTb, value = {
                    text = DictionaryGet(dict = $decorationDic, key = "buyMoney") or GetEntityCfg(fullName = $fullName, key = "buyMoney") or "",
                    image = DictionaryGet(dict = $decorationDic, key = "image") or GetEntityCfg(fullName = $fullName, key = "image") or "",
                    actorScale = DictionaryGet(dict = $decorationDic, key = "showActorScale") or GetEntityCfg(fullName = $fullName, key = "showActorScale") or 0,
                    coinImg = ArrayGet(array = @CURRENT_ID_IMAGE, 
                        index = (DictionaryGet(dict = $decorationDic, key = "coinId") or GetEntityCfg(fullName = $fullName, key = "coinId") or 3) + 1) 
                        or "plugin/myplugin/image/coin.png",
                    cfg = $fullName,
                    showName = DictionaryGet(dict = $decorationDic, key = "showName"),
                    showDesc = DictionaryGet(dict = $decorationDic, key = "showDesc"),
                    event = DictionaryGet(dict = $dic, key = "event") or "BUY_STORE",
                    context = {
                        cfg = $fullName,
                        storeId = $storeId
                    }
                })
            }
            If(DictionaryGet(dict = $decorationDic, key = "storeId") == $storeId and "block" == $type){
                $fullName = DictionaryGet(dict = $decorationDic, key = "fullName")
                ArrayAppend(array = $listInfoTb, value = {
                    text = DictionaryGet(dict = $decorationDic, key = "buyMoney") or GetBlockConfigByName(block = $fullName, key = "buyMoney") or 0,
                    image = DictionaryGet(dict = $decorationDic, key = "image") or GetBlockConfigByName(block = $fullName, key = "image") or "",
                    coinImg = ArrayGet(array = @CURRENT_ID_IMAGE, 
                        index = (DictionaryGet(dict = $decorationDic, key = "coinId") or GetBlockConfigByName(block = $fullName, key = "coinId") or 3) + 1) 
                        or "plugin/myplugin/image/coin.png",
                    event = "BUY_HOUSE_REGION_COLOR",
                    context = {
                        colorBlock = $fullName,
                        childRegionKey = $childRegionKey,
                        storeId = $storeId
                    }
                })
            }
        }
    }
    If(DictionaryGet(dict = $dicInfoTb, key = "closeInfo")){
        $dic = NewDictionary(DictionaryGet(dict = $dicInfoTb, key = "closeInfo"))
        ArrayAppend(array = $closeEvent, value = {
            event = DictionaryGet(dict = $dic, key = "closeEvent"),
            context = DictionaryGet(dict = $dic, key = "context")
        })
    }
    If(DictionaryGet(dict = $dicInfoTb, key = "rightInfo")){
        $dic = NewDictionary(DictionaryGet(dict = $dicInfoTb, key = "rightInfo"))
        ArrayAppend(array = $rightEvent, value = {
            event = DictionaryGet(dict = $dic, key = "rightEvent"),
            context = DictionaryGet(dict = $dic, key = "context")
        })
    }
    If(DictionaryGet(dict = $dicInfoTb, key = "leftInfo")){
        $dic = NewDictionary(DictionaryGet(dict = $dicInfoTb, key = "leftInfo"))
        ArrayAppend(array = $leftEvent, value = {
            event = DictionaryGet(dict = $dic, key = "leftEvent"),
            context = DictionaryGet(dict = $dic, key = "context")
        })
    }
}

SHOW_DEC_STORE_LIST{
    ShowGenericActorShowStore(entity = $obj1, infoTb = {})
    ShowTitleBarPage(entity = $obj1, closeWin = true)
    If(not $titleKey){
        $titleKey = "allDec"
    }
    If(not $nextCfgKey){
        $nextCfgKey = "kitchenStore"
    }
    $btnListTb = {}
    CallTrigger(object = $obj1, event = "UPDATE_EDIT_STORE_SELL_TAB", titleKey = $titleKey, nextCfgKey = $nextCfgKey, btnListTb = $btnListTb) 

    $listInfoTb = {}
    $closeEvent = {}
    $leftEvent = {}
    $rightEvent = {}
    CallTrigger(object = $obj1, event = "UPDATE_STORE_LIST", nextCfgKey = $nextCfgKey, childRegionKey = $childRegionKey,
        listInfoTb = $listInfoTb, closeEvent = $closeEvent, leftEvent = $leftEvent, rightEvent = $rightEvent) 
    $infoTb = {
        btnInfo = {
            btnType = 3,
            btnList = $btnListTb
        },
        listInfo = {
            uiType = 2,
            infoTb = $listInfoTb
        },
        eventInfo = {
            closeEventInfo = ArrayGet(array = $closeEvent, index = 1),
            leftEventInfo = ArrayGet(array = $leftEvent, index = 1),
            rightEventInfo = ArrayGet(array = $rightEvent, index = 1)
        }
    }
    StartTimer(object =$obj1, obj1 =$obj1, infoTb = $infoTb, time = 2, event = "UPDATE_ACTOR_SHOW_STORE")
}

BUY_INSIDE_DOOR{
    If(not $cfg){
        Return()
    }
    $buyMoney = GetEntityCfg(fullName = $cfg, key = "buyMoney")
    $coinId = GetEntityCfg(fullName = $cfg, key = "coinId")
    Foreach(array = @DECORATION_STORE, key = "decorationTb"){
        $decorationDic = NewDictionary($decorationTb)
        If(DictionaryGet(dict = $decorationDic, key = "fullName") == $cfg){
            $buyMoney = ToNumber(DictionaryGet(dict = $decorationDic, key = "buyMoney") or 0)
            $coinId = ToNumber(DictionaryGet(dict = $decorationDic, key = "coinId") or 3)
        }
    }
    If(3 ~= $coinId){
        BuyGoods(player = $obj1, uniqueId = 20201003,  coinId = $coinId, price = $buyMoney, cfg = $cfg, event = "BUY_DOOR_BY_APP" )
        Return()
    }
    If(not PayCurrency(entity = $obj1, coinName = "green_currency", count = $buyMoney)){
        ShowGoldShop(player = $obj1, show = true)
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_store_not_enough_money", keepTime = 40)
        Return()
    }
    CallTrigger(object = $obj1, event = "GIVE_DOOR", cfg = $cfg)
}

BUY_DOOR_BY_APP{
    $dictValue = NewDictionary($response)
    $cfg = DictionaryGet(dict = $dictValue, key = "cfg")
    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    If(not $isSucceed){
        ShowRecharge(player = $obj1)
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_store_not_enough_money", keepTime = 40)
        Return()
    }
    CallTrigger(object = $obj1, event = "GIVE_DOOR", cfg = $cfg)
}

GIVE_DOOR{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "houseInsideDoor", value = $cfg)
            ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $dict))
            Break()
        }
    }
    $house = GetObjectVar(obj = $obj1, key = "house")
    $insideMap = GetObjectVar(obj = $house, key = "houseInsideMap")

    $houseInsideDoor = GetObjectVar(obj = $house, key = "insideDoor")
    KillEntity(entity = $houseInsideDoor)
    CallTrigger(object = $house, event = "CREATE_INSIDE_DOOR", map = $insideMap, cfgName = $cfg)
}

BUY_HOUSE_REGION_COLOR{
    -- 如果换了墙纸或者地板，原有的不保留，当你没买     如果你原来买了A墙纸，你又换成了B，那么你要再花一遍钱去把A换回来
    $curInsideRegion = GetObjectVar(obj = $obj1, key = "curInsideRegion")
    If(not $curInsideRegion or GetRegionConfig(region = $curInsideRegion, key = "insideOutRegion")){
        ShowTip(entity = $obj1, tipType = 2, textKey = "buy_house_region_color_had_not_inside_region", keepTime = 40)
        Return()
    }
    $curInsideRegionKey = GetRegionConfig(region = $curInsideRegion, key = "regionkey")
    $curInsideRegionChildReionArr = GetRegionConfig(region = $curInsideRegion, key = "childRegionKey")
    ForLoop(from = 1, to = ArraySize(array = $curInsideRegionChildReionArr), key = "index"){
        If(ArrayGet(array = $curInsideRegionChildReionArr, index = $index) == $childRegionKey){
            $curInsideRegionChildReionIndex = $index
            Break()
        }
    }
    If(not $curInsideRegionChildReionIndex){
        Return()
    }
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHousedict = $dict
            Break()
        }
    }
    $curSelectHouseRegionColor = DictionaryGet(dict = $curHousedict, key = "houseInsideRegionColors") or {}
    Foreach(array = $curSelectHouseRegionColor, key = "childRegionColorArr"){
        If(ArrayGet(array = $childRegionColorArr, index = 1) == $curInsideRegionKey){
            If(ArrayGet(array = ArrayGet(array = $childRegionColorArr, index = 2), index = $curInsideRegionChildReionIndex) == $colorBlock){
                Return()
            }
        }
    }

    If(not $colorBlock)
    {
        Return()
    }

    $buyMoney = 0
    $coinId = 3

    If($colorBlock){
        $buyMoney = GetBlockConfigByName(block = $colorBlock, key = "buyMoney")
        $coinId = GetBlockConfigByName(block = $colorBlock, key = "coinId")
        Foreach(array = @DECORATION_STORE, key = "decorationTb"){
            $decorationDic = NewDictionary($decorationTb)
            If(DictionaryGet(dict = $decorationDic, key = "fullName") == $colorBlock){
                $buyMoney = ToNumber(DictionaryGet(dict = $decorationDic, key = "buyMoney") or 0)
                $coinId = ToNumber(DictionaryGet(dict = $decorationDic, key = "coinId") or 3)
                $storeId = $storeId or DictionaryGet(dict = $decorationDic, key = "storeId") or "other"
                Break()
            }
        }
    }

    $btnInfo = {
            leftCoinId = nil,
            leftContent = "ui_cancel",
            rightCoinId = $coinId,
            rightContent = $buyMoney
    }
    
    $content = "ui_sure_to_pay"

    $context = {
        colorBlock = $colorBlock,
        childRegionKey = $childRegionKey,
        storeId = $storeId
    }
    $tipType = 5
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "SURE_BUY_SET_REGION_COLOR", p1 = "ui_tip", p2 = $content, p3 = $btnInfo, context = $context)
}

SURE_BUY_SET_REGION_COLOR
{
    If($button == "right")
    {
        If(not $colorBlock)
        {
            Return()
        }

        $buyMoney = GetBlockConfigByName(block = $colorBlock, key = "buyMoney")
        $coinId = GetBlockConfigByName(block = $colorBlock, key = "coinId")
        Foreach(array = @DECORATION_STORE, key = "decorationTb"){
            $decorationDic = NewDictionary($decorationTb)
            If(DictionaryGet(dict = $decorationDic, key = "fullName") == $colorBlock){
                $buyMoney = ToNumber(DictionaryGet(dict = $decorationDic, key = "buyMoney") or 0)
                $coinId = ToNumber(DictionaryGet(dict = $decorationDic, key = "coinId") or 3)
                $storeId = $storeId or DictionaryGet(dict = $decorationDic, key = "storeId") or "other"
                Break()
            }
        }
        If(3 ~= $coinId){
            BuyGoods(player = $obj1, uniqueId = 20201004, coinId = $coinId, price = $buyMoney, storeId = $storeId,
                childRegionKey = $childRegionKey, colorBlock = $colorBlock, event = "BUY_REGION_COLOR_BY_APP" )
            Return()
        }

        If(not PayCurrency(entity = $obj1, coinName = "green_currency", count = $buyMoney)){
            ShowGoldShop(player = $obj1, show = true)
            ShowTip(entity = $obj1, tipType = 2,textKey = "buy_house_region_color_not_enough_money", keepTime = 40)
            Return()
        }

        CallTrigger(object = $obj1, event = "SET_REGION_COLOR", childRegionKey = $childRegionKey, storeId = $storeId, colorBlock = $colorBlock)    
    }
}

BUY_REGION_COLOR_BY_APP{
    $dictValue = NewDictionary($response)
    $childRegionKey = DictionaryGet(dict = $dictValue, key = "childRegionKey")
    $colorBlock = DictionaryGet(dict = $dictValue, key = "colorBlock")
    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    $storeId = DictionaryGet(dict = $dictValue, key = "storeId")
    If(not $isSucceed){
        ShowRecharge(player = $obj1)
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_house_region_color_not_enough_money", keepTime = 40)
        Return()
    }
    CallTrigger(object = $obj1, event = "SET_REGION_COLOR", childRegionKey = $childRegionKey, storeId = $storeId, colorBlock = $colorBlock)
}

SET_REGION_COLOR{
    $curInsideRegion = GetObjectVar(obj = $obj1, key = "curInsideRegion")
    If(not $curInsideRegion){
        Return()
    }
    $curInsideRegionKey = GetRegionConfig(region = $curInsideRegion, key = "regionkey")
    $curInsideRegionChildReionArr = GetRegionConfig(region = $curInsideRegion, key = "childRegionKey")
    ForLoop(from = 1, to = ArraySize(array = $curInsideRegionChildReionArr), key = "index"){
        If(ArrayGet(array = $curInsideRegionChildReionArr, index = $index) == $childRegionKey){
            $curInsideRegionChildReionIndex = $index
            Break()
        }
    }
    If(not $curInsideRegionChildReionIndex){
        Return()
    }
    $childRegionArr = GetRegionConfig(region = $curInsideRegion, key = $childRegionKey) or {}
    
    $house = GetObjectVar(obj = $obj1, key = "house")
    $insideMap = GetObjectVar(obj = $house, key = "houseInsideMap")
    $destBlock = $colorBlock or GetRegionConfig(region = $curInsideRegion, key = "defaultBlock")
    -- Foreach(array = $childRegionArr, key = "cRegion"){
        -- CallTrigger(object = $house, event = "CHANGE_HOUSE_REGION_COLOR", map = $insideMap, region = $cRegion, destBlock = $destBlock)
    -- }
    CallTrigger(object = $house, event = "CHANGE_HOUSE_REGION_COLOR_BY_ALL_REGION", map = $insideMap, 
        childRegionKey = $childRegionKey, childRegionArr = $childRegionArr, destBlock = $destBlock)

    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHousedict = $dict
            Break()
        }
    }
    $curSelectHouseRegionColor = DictionaryGet(dict = $curHousedict, key = "houseInsideRegionColors") or {}
    $hadRegion = false
    Foreach(array = $curSelectHouseRegionColor, key = "childRegionColorArr"){
        If(ArrayGet(array = $childRegionColorArr, index = 1) == $curInsideRegionKey){
            ArraySet(array = ArrayGet(array = $childRegionColorArr, index = 2), index = $curInsideRegionChildReionIndex, value = $colorBlock)
            $hadRegion = true
            Break()
        }
    }
    If(not $hadRegion){
        $defaultChildRegionBlock = Copy(value = GetRegionConfig(region = $curInsideRegion, key = "defaultChildRegionBlock"))
        ArraySet(array = $defaultChildRegionBlock, index = $curInsideRegionChildReionIndex, value = $colorBlock)
        $regionkey = GetRegionConfig(region = $curInsideRegion, key = "regionkey")
        ArrayAppend(array = $curSelectHouseRegionColor, value = [$regionkey,$defaultChildRegionBlock])
    }
    $index = DictionaryGet(dict = $curHousedict, key = "curHouseVarsIndex")
    DictionarySet(dict = $curHousedict, key = "curHouseVarsIndex", value = nil)
    ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHousedict))
    GameAnalyticsCustomEvent(player = $obj1, parts = ["buy:goods:decoration",$storeId,
        Concat(p1 = "myplugin_", p2 = FindStr(where_ = "/", back_ = true, str = $colorBlock))])
}

ROTATION_WHEN_RIDE_ON{
    SetEntityYaw(entity = $obj1, rotationYaw = GetEntityYaw(entity = $obj2))
    SetBodyYaw(entity = $obj1, yaw = GetEntityYaw(entity = $obj2))
    SetEntityPitch(entity = $obj1, rotationYaw = GetEntityPitch(entity = $obj2))
    SetEntityRoll(entity = $obj1, rotationYaw = GetEntityRoll(entity = $obj2))
}

UPDATE_POS_WHILE_IN_INSIDE_REGION{
    $rideOn = GetRideOn(entity = $obj1)
    $tp = GetEntityPosition(entity = $rideOn or $obj1)
    If($obj1.curInsideRegion or $obj1.lastInsideRegion){
        $regionCenter = GetRegionCenter(region = $obj1.curInsideRegion or $obj1.lastInsideRegion)
        $addV3 = {
            x = GetPosX(pos = $tp) - GetPosX(pos = $regionCenter) > 0 and -1.5 or 1.5,
            y = 0,
            z = GetPosZ(pos = $tp) - GetPosZ(pos = $regionCenter) > 0 and -1.5 or 1.5
        }
        $tp = ComputeV3(op = "add", p1 = $tp, p2 = $addV3)
    }
    SetEntityPosition(entity = $rideOn or $obj1, pos = $tp)
}

UPDATE_OBJ_HOUSE_INSIDE_REGION{
    SetObjectVar(obj = $obj1, key = "curInsideRegion", value = $region)
}
------------------------------------------------------------------------------------------------------------------------------ 分割线
RESET_PLAYER_INNER_INSIDE_DOOR_STATUS{
    $obj1.isInnerInsideDoor = nil
}

RIDEOFF_IN_DEC{
    -- If($target and not $obj1.kickOut and $target.lastSideNormal and IsPlayer(entity = $obj1)){
    --     If(GetPosY(pos = $target.lastSideNormal) == -1){
    --         $addPos = {
    --             x = 0,
    --             y = -1.5,
    --             z = 0
    --         }
    --     }
    --     $addPos = $addPos or $target.lastSideNormal
    --     $pos = ComputeV3(p1 = GetEntityPosition(entity = $target), op = "add", p2 = {
    --         x = GetPosX(pos = $addPos) * 1.1 + 0.1,
    --         y = GetPosY(pos = $addPos) * 1.1 + 0.1,
    --         z = GetPosZ(pos = $addPos) * 1.1 + 0.1,
    --     })
    --     $ride = GetRideOn(entity = $obj1)
    --     If(not $ride)
    --     {
    --         SetEntityPosition(entity = $obj1, pos = $pos)
    --     }
    -- }
    If($obj1.curInsideRegion or $obj1.lastInsideRegion){
        $tp = GetEntityPosition(entity = $obj1)
        $regionCenter = GetRegionCenter(region = $obj1.curInsideRegion or $obj1.lastInsideRegion)
        $addV3 = {
            x = GetPosX(pos = $tp) - GetPosX(pos = $regionCenter) > 0 and -1 or 1,
            y = GetPosY(pos = $tp) - GetPosY(pos = $regionCenter) > 0 and -1 or 1,
            z = GetPosZ(pos = $tp) - GetPosZ(pos = $regionCenter) > 0 and -1 or 1
        }
        $tp = ComputeV3(op = "add", p1 = $tp, p2 = $addV3)
        $ride = GetRideOn(entity = $obj1)
        If(not $ride)
        {
            SetEntityPosition(entity = $obj1, pos = $tp)
        }
    }
}

INTERACTION_WITH_MOVEMENT_EVENT{
    $dict = NewDictionary(@interactionWithMovementEventMap)
    $eventDict = NewDictionary(DictionaryGet(dict = $dict, key = $interactionType) or {})
    $event = DictionaryGet(dict = $eventDict, key = $interactionName)
    If(not $event){
        Return()
    }
    If($targetObjId){
        $target = GetObject(objID = $targetObjId)
    }
    CallTrigger(object = $target or $obj1, event = $event)
}

ADD_MONEY
{  
    $today = GetYearDayStr(time = GetTime())

    If($today ~= $obj1.rewardDay)
    {
        $obj1.rewardCounts = 1
        $obj1.rewardDay = $today
        $obj1.rewardCDTime = 0
        $obj1.rewardMoney = 0
    }

    $count = $obj1.rewardCounts
    $arraySize = ArraySize(array = @CDReward)
    If($count > $arraySize)
    {
        $count = $arraySize
    }
    $rewardArray = ArrayGet(array = @CDReward, index = $count)

    If(not $rewardArray)
    {
        Return()
    }

    $rewardArray = NewDictionary($rewardArray)
    $cdTime = DictionaryGet(dict = $rewardArray, key = "cdTime")
    $money = DictionaryGet(dict = $rewardArray, key = "money")

    $cdTime = ToInteger($cdTime)
    $money = ToInteger($money)

    If(ArrayFind(array = $obj1.privilege, value = "myplugin/vip_privilege"))
    {
        $money = $money * 2
    }

    $obj1.rewardCDTime = $cdTime
    $obj1.rewardMoney = $money

    If($obj1.isReadyReward)
    {
        $tipType = 0
        ShowRewardDialog(player = $obj1, event = "GET_REWARD_MONEY")
		Return()
    }

    StartTimer(rep = false, time = $cdTime, object = $obj1, event = "ADD_MONEY")
    ShowRewardCD(player = $obj1, time = $cdTime)
    $obj1.isReadyReward = true
}

GET_REWARD_MONEY
{
    AddCurrency(count = $obj1.rewardMoney, coinName = "green_currency", entity = $obj1)
    CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "getMoneyTipSoundBuff")
    ShowRewardItemEffect(type = "Coin", count = $obj1.rewardMoney, fullName = "green_currency", player = $obj1)
    $obj1.rewardCounts = $obj1.rewardCounts + 1
    StartTimer(rep = false, time = $obj1.rewardCDTime, object = $obj1, event = "ADD_MONEY")
    ShowRewardCD(player = $obj1, time = $obj1.rewardCDTime)
}

FUNC_STATE_GENERATE --params: stateBase, col, skill
{
    $state = $stateBase
    $subdivided = GetSkillVar(fullName = $skill, key = "subdivided")
    If(ArraySize(array = $subdivided or []) > 0)
    {
        $preState = GetObjectVar(obj = $obj1, key = Concat(p1 = "pre", p2 = $stateBase))
        If($preState)
        {
            CallTrigger(object = $obj1, event = "FUNC_STATESKILL_REMOVE", state = $preState, skill = Concat(p1 = @skillPath, p2 = $preState))
        }
        $state = ArrayGet(array = $subdivided, index = $col)
        $skill = Concat(p1 = @skillPath, p2 = $state)
        SetObjectVar(obj = $obj1, value = $state, key = Concat(p1 = "pre", p2 = $stateBase))
        SetObjectVar(obj = $obj1, value = $col, key = Concat(p1 = $stateBase, p2 = "Idx"))
    }
    ShowBubbleMsg(entity = $obj1, contents = GetSkillVar(fullName = $skill, key = "tipContents"))
    CallTrigger(object = $obj1, event = "FUNC_STATE_ADD", state = $state, stateBase = $stateBase, skill = $skill)
}

FUNC_STATE_ADD --params: state, stateBase, skill
{
    SetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "InteractList"), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = "had", p2 = $stateBase), value = true)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "got"), value = true)
    ArrayAppend(array = $obj1.curStates, value = $state)
    CallTrigger(object = $obj1, event = "FUNC_GET_ALREADY_INTERACTION_PLAYERS_TO_SYNC_STATE", isAdd = true, state = $state, addToInteractList = true)
    CallTrigger(object = $obj1, event = "FUNC_STATE_ACTION", state = $state, skill = $skill)
}

FUNC_SYNC_STATES_TO_OTHERS --params: isAdd, states, needSyncPlayers, excludeSelf
{
    If(not $excludeSelf) {
        SyncStatesData(player = $obj1, isAdd = $isAdd, states = $states, isWithoutCheck = true, target = $obj1)
    }
    Foreach(array = $needSyncPlayers, key = "player") {
        SyncStatesData(player = $player, isAdd = $isAdd, states = $states, isWithoutCheck = true, target = $obj1)
        SyncStatesData(player = $obj1, isAdd = $isAdd, states = $states, target = $player)
    }
}

FUNC_SYNC_STATE_DETAILS_TO_OTHERS --params: state, needSyncPlayers[, isRemoveTarget]
{
    $hadTarget = false
    Foreach(array = $needSyncPlayers, key = "target") {
        $hadTarget = true
        ShowDetails(player = $obj1, state = $state, target = $target, isRemoveTarget = $isRemoveTarget)
        ShowDetails(player = $target, state = $state, target = $obj1, isRemoveTarget = $isRemoveTarget)
    }
    If(not $hadTarget) { ShowDetails(player = $obj1, state = $state) }
}

FUNC_SYNC_STATE_PROGRESS_TO_TARGET --params: targetID
{
    Foreach(array = $obj1.stateProgress, key = "state") {
        $usedTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "UsedTime")) or 0
        $sTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "STime"))
        $duration = GetSkillVar(fullName = Concat(p1 = @skillPath, p2 = $state), key = "duration") or 0
        $pgText = Concat(p1 = "state_", p2 = $state, p3 = "_title")
        If($sTime && $usedTime) {
            $usedTime = GetTime() - $sTime + $usedTime
        }
        ShowProgressFollowObj( isOpen = true, pgName = $state, entity = $obj1, totalTime = $duration * 20, usedTime = $usedTime * 20, pgText = $pgText, type = "state", interactionList = [$targetID])
    }
}

FUNC_SYNC_STATE_PROGRESS_TO_OTHERS --params: target, isExecute
{
    If(not $isExecute) { Return() }
    CallTrigger(object = $obj1, event = "FUNC_SYNC_STATE_PROGRESS_TO_TARGET", targetID = GetObjectID(object = $target))
    CallTrigger(object = $target, event = "FUNC_SYNC_STATE_PROGRESS_TO_TARGET", targetID = GetObjectID(object = $obj1))
}

FUNC_GET_ALREADY_INTERACTION_PLAYERS_TO_SYNC_STATE --params: isAdd, state [, isOnlySyncDetails, addToInteractList]
{
    $needSyncPlayers = []
    $ride = GetRideOn(entity = $obj1)
    If(IsPlayer(entity = $ride)) { ArrayAppend(array = $needSyncPlayers, value = $ride)}
    $passengers = NewDictionary(GetPassengers(entity = $obj1))
    ForeachDictionary(dict = $passengers, keyName = "key", valueName = "val") {
        $player = GetObject(objID = $val)
        ArrayAppend(array = $needSyncPlayers, value = $player)
    }
    If($obj1.createdTrolley) {
        $trolleyPassengers = NewDictionary(GetPassengers(entity = $obj1.createdTrolley))
        ForeachDictionary(dict = $trolleyPassengers, keyName = "key", valueName = "val") {
            $player = GetObject(objID = $val)
            If($player ~= $obj1) {
                ArrayAppend(array = $needSyncPlayers, value = $player)
            }
        }
    } ElseIf($obj1.useTrolley) {
        $trolleyOwner = GetOwner(entity = $ride)
        ArrayAppend(array = $needSyncPlayers, value = $trolleyOwner)
    }
    If(not $isOnlySyncDetails) {
        CallTrigger(object = $obj1, event = "FUNC_SYNC_STATES_TO_OTHERS", isAdd = $isAdd, states = [$state], needSyncPlayers = $needSyncPlayers)
    }
    CallTrigger(object = $obj1, event = "FUNC_SYNC_STATE_DETAILS_TO_OTHERS", state = $state, needSyncPlayers = $needSyncPlayers)

    If($addToInteractList) {
        Foreach(array = $needSyncPlayers, key = "player") {
            CallTrigger(event = "FUNC_STATE_ADD_INTERACTLIST", entities = [$obj1, $player])
        }
    }
}

FUNC_STATE_START_AUTO_VANISH_TIME --parmas: state, skill
{
    $autoVanishT = GetSkillVar(fullName = $skill, key = "autoVanishT")
    If(not $autoVanishT || $autoVanishT <= 0)
    {
        Return()
    }
    $value = StartTimer(rep = false, object = $obj1, state = $state, skill = $skill, event = "FUNC_STATESKILL_REMOVE", time = ($autoVanishT * 20) // 1)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "AUTOVANISH_TIMER"), value = $value)
}

FUNC_STATE_ADD_EFFECT --params: state, skill
{
    $effect = GetSkillVar(fullName = $skill, key = "effect")
    If($effect)
    {
        SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "Effect"), value = AddEntityBuff(entity = $obj1, cfg = $effect))
    }
}

FUNC_STATE_START_AFFECT --params: state, skill
{
    $timeSpan = GetSkillVar(fullName = $skill, key = "affectTimeSpanSec")
    If(not $timeSpan || $timeSpan <= 0)
    {
        Return()
    }
    $value = StartTimer(rep = true, object = $obj1, state = $state, skill = $skill, event = "FUNC_STATE_AFFECT_OTHER", time = ($timeSpan * 20) // 1)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "AFFECT_TIMER"), value = $value)
}

FUNC_STATE_AFFECT_OTHER --params: state, skill
{
    $skill = $skill or Concat(p1 = @skillPath, p2 = $state)
    $stateBase = GetSkillVar(fullName = $skill, key = "stateBase") or $state
    $entities = GetNearbyEntities(entity = $obj1, distance = GetSkillVar(fullName = $skill, key = "affectDis"))
    $name = GetEntityName(entity = $obj1)
    Foreach(array = $entities or [], key = "entity")
    {
        If(not IsPlayer(entity = $entity) || $entity == $obj1 || GetObjectVar(obj = $entity, key = Concat(p1 = "had", p2 = $stateBase)))
        {
            Continue()
        }
        ShowBubbleMsg(entity = $entity, textKey = "infect_sb", textP1 = $name)
        CallTrigger(object = $entity, event = "FUNC_STATE_ADD", state = $state, stateBase = $stateBase, skill = $skill)
    }
}

FUNC_STATE_RIDE_OPERATION --params: ride, isRideOff
{
    If(not $ride)
    {
        Return()
    }
    $target = nil
    If(IsPlayer(entity = $ride)) {
        $target = $ride
        CallTrigger(object = $obj1, event = "FUNC_SYNC_STATES_TO_OTHERS", isAdd = not $isRideOff, needSyncPlayers = [$ride], excludeSelf = true)
        CallTrigger(object = $obj1, event = "FUNC_SYNC_STATE_DETAILS_TO_OTHERS", needSyncPlayers = [$ride], isRemoveTarget = $isRideOff)
        CallTrigger(object = $obj1, event = "FUNC_SYNC_STATE_PROGRESS_TO_OTHERS", target = $ride, isExecute = not $isRideOff)
    } ElseIf(IsPlayer(entity = GetOwner(entity = $ride))) {
        $target = GetOwner(entity = $ride)
    }
    If(not $isRideOff) {
        CallTrigger(event = "FUNC_STATE_ADD_INTERACTLIST", entities = [$obj1, $target])
    }
    $event = $isRideOff and "FUNC_STATE_RELEASE_SUSPEND" or "FUNC_STATE_RELEASE"
    If($ride.cfg.releaseState)
    {
        CallTrigger(object = $obj1, state = $ride.cfg.releaseState, event = $event)
    }
}

FUNC_STATE_MAP_OPERATION --params: map, isLeave
{
    If($map.cfg.releaseState)
    {
        CallTrigger(object = $obj1, state = $map.cfg.releaseState, event = $isLeave and "FUNC_STATE_RELEASE_SUSPEND" or "FUNC_STATE_RELEASE")
    }
}

FUNC_STATE_CHECK_REGION --params: state
{   
    -- 判断状态生成时是否就已经在区域里面了
    $reg = GetRegionByName(map = GetEntityMap(entity = $obj1), name = $state)

    If($reg && IfEntityInArea(
                    entity = $obj1,
                    region = {
                        min = GetRegionMin(region = $reg),
                        max = GetRegionMax(region = $reg) + V3(1, 1, 1)
                    }
                )
    )
    {
        CallTrigger(object = $obj1, state = $state, event = "FUNC_REGION_STATE_OPERATION")
    }
}

FUNC_REGION_STATE_OPERATION --parmas: isLeave, state
{
    If($obj1.guideStep == @PlayGoGround and $state == "playground" and not $isLeave) --如果是指引
    {
        $Context = {
            obj1 = $obj1,
            isLeave = $isLeave,
            state = $state
        }
        $obj1.guideCantMove = AddEntityBuff(entity = $obj1, cfg = "myplugin/freeze_buff", buffTime = 800)
        $ride = GetRideOn(entity = $obj1)
        If($ride and IsValidObject(object = $ride)){
            $ride.guideCantMove = AddEntityBuff(entity = $ride, cfg = "myplugin/freeze_buff", buffTime = 800)
        }
        ShowGuidePop(player = $obj1, event = "GUIDE_STATE_RELEASE",context = $Context, texts = [
            "guide.you.in.playground",
            "guide.you.reward.after.play"
        ], btnText = ["next_page", "ui_begin"])
    }Else{
        CallTrigger(object = $obj1, state = $state, event = $isLeave and "FUNC_STATE_RELEASE_SUSPEND" or "FUNC_STATE_RELEASE")
    }
}
GUIDE_STATE_RELEASE()
{
    RemoveEntityBuff(buff = $obj1.guideCantMove, entity = $obj1)
    $ride = GetRideOn(entity = $obj1)
    If($ride and IsValidObject(object = $ride)){
        RemoveEntityBuff(buff = $ride.guideCantMove, entity = $ride)
    }
    CallTrigger(object = $obj1, state = $state, event = $isLeave and "FUNC_STATE_RELEASE_SUSPEND" or "FUNC_STATE_RELEASE")
}

FUNC_STATE_SUSPEND_PROGRESS --params: state, stateBase, duration
{
    ShowProgressFollowObj(entity = $obj1, isOpen = false, pgName = $state, type = "state")
    CallTrigger(object = $obj1, event = "FUNC_STOP_TIMER", timerStr = Concat(p1 = $state, p2 = "_TIMER"))

    $sTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "STime"))
    $usedTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "UsedTime"))
    If($sTime && $usedTime)
    {
        SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "UsedTime"), value = GetTime() - $sTime + $usedTime)
    }
    SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "STime"), value = nil)
    $index = ArrayFind(array = $obj1.stateProgress, value = $state)
    If($index) { ArrayRemove(array = $obj1.stateProgress, index = $index) }
    CallTrigger(object = $obj1, event = "FUNC_GET_ALREADY_INTERACTION_PLAYERS_TO_SYNC_STATE", isAdd = true, state = $state, isOnlySyncDetails = true)
}

FUNC_STATE_START_PROGRESS --params: state, stateBase, duration
{
    --如果是引导，
    If($obj1.guideStep == @PlayGoGround and $state == "playground"){
        $duration = 3
    }
    $usedTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "UsedTime")) or 0
    SetObjectVar(obj = $obj1, value = GetTime(), key = Concat(p1 = $state, p2 = "STime"))
    SetObjectVar(obj = $obj1, value = $usedTime, key = Concat(p1 = $state, p2 = "UsedTime"))

    $pgText = Concat(p1 = "state_", p2 = $state, p3 = "_title")
    ShowProgressFollowObj( isOpen = true, pgName = $state, entity = $obj1, totalTime = $duration * 20, usedTime = $usedTime * 20, pgText = $pgText, type = "state")

    $value = StartTimer(rep = false, object =$obj1, state = $state, event = "FUNC_STATE_REWARD", time = (($duration - $usedTime) * 20) // 1)
    SetObjectVar( obj = $obj1, value = $value, key = Concat(p1 = $state, p2 = "_TIMER") )

    ArrayAppend(array = $obj1.stateProgress, value = $state)
    CallTrigger(object = $obj1, event = "FUNC_GET_ALREADY_INTERACTION_PLAYERS_TO_SYNC_STATE", isAdd = true, state = $state, isOnlySyncDetails = true)
}

FUNC_STATE_REWARD --state [, stateBase, skill]
{
    $skill = $skill or Concat(p1 = @skillPath, p2 = $state)
    $stateBase = $stateBase or GetSkillVar(fullName = $skill, key = "stateBase") or $state
    $hadState = Concat(p1 = "had", p2 = $stateBase)
    If(not GetObjectVar(obj = $obj1, key = $hadState))
    {
        Return()
    }
    --游乐场指引完成
    If($obj1.guideStep == @PlayGoGround){--存档3，完成
        $obj1.guideStep = @GuideGift
    }
    CallTrigger(event = "CONTINUE_GUIDESTEP", object = $obj1)

    $interactList = GetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "InteractList"))
    If(GetSkillVar(fullName = $skill, key = "hadReward"))
    {
        $rewardSelf = GetSkillVar(fullName = $skill, key = "rewardSelf")
        $rewardType = GetSkillVar(fullName = $skill, key = "rewardType")
        $rewardSelfTip = GetSkillVar(fullName = $skill, key = "rewardSelfTip")
        $rewardEffect = GetSkillVar(fullName = $skill, key = "rewardEffect")

        If(ArraySize(array = $interactList or []) > 0)
        {
            $rewardOther = GetSkillVar(fullName = $skill, key = "rewardOther")
            $rewardFamily = GetSkillVar(fullName = $skill, key = "rewardFamily")
            $rewardDis = GetSkillVar(fullName = $skill, key = "rewardDis")
            $rewardCount = GetSkillVar(fullName = $skill, key = "rewardCount")
            $rewardFamilyTip = GetSkillVar(fullName = $skill, key = "rewardFamilyTip")
            $rewardOtherTip = GetSkillVar(fullName = $skill, key = "rewardOtherTip")

            $teamId = GetEntityTeam(entity = $obj1)
            $rewardMap = GetEntityMap(entity = $obj1)
            $rewardSum = 0
            $textKey = ""
            $promoterName = GetEntityName(entity = $obj1)
            Foreach(array = $interactList or [], key = "objID")
            {
                $entity = GetObject(objID = $objID)
                If(not $entity || not IsPlayer(entity = $entity) || GetEntityMap(entity = $entity) ~= $rewardMap)
                {
                    Continue()
                }

                $countKey = Concat(p1 = $stateBase, p2 = "RewardCount")
                $count = GetObjectVar(obj = $entity, key = $countKey) or 0
                $dis = GetObjectDistance(obj1 = $obj1, obj2 = $entity)
                $myTeamId =  GetEntityTeam(entity = $entity)

                If($count < $rewardCount && $dis < $rewardDis && ($teamId == $myTeamId))
                {
                    SetObjectVar(obj = $entity, key = $countKey, value = $count + 1)
                    $isSameFamily = $teamId ~= 0
                    $rewardSum = $isSameFamily and $rewardFamily or $rewardOther
                    $textKey = $isSameFamily and $rewardFamilyTip or $rewardOtherTip
                    CallTrigger(
                        object = $entity,
                        event = "FUNC_STATE_REWARD_AND_TIP",
                        rewardSum = $rewardSum,
                        textKey = $textKey,
                        rewardType = $rewardType,
                        textP1 = $promoterName,
                        textP2 = $rewardSum
                    )
                }
            }
        }
        CallTrigger(
            object = $obj1,
            event = "FUNC_STATE_REWARD_AND_TIP",
            showMoneyEffect = $rewardEffect,
            rewardSum = $rewardSelf,
            textKey = $rewardSelfTip,
            rewardType = $rewardType,
            textP1 = $rewardSelf
        )
    }
    CallTrigger(object = $obj1, event = "FUNC_STATESKILL_REMOVE", state = $state, skill = $skill, stateBase = $stateBase)
    CallTrigger(object = $obj1, event = "USER_RELEASE_STATE_SUM")
}

FUNC_STATESKILL_REMOVE --params: state, skill
{
    $stateBase = $stateBase or GetSkillVar(fullName = $skill, key = "stateBase") or $state
    $hadState = Concat(p1 = "had", p2 = $stateBase)
    If(not GetObjectVar(obj = $obj1, key = $hadState)) {
        Return()
    }

    SetObjectVar(obj = $obj1, key = $hadState, value = false)
    CallTrigger(object = $obj1, event = "FUNC_STATEBASE_RESET_DATA", stateBase = $stateBase)
    CallTrigger(object = $obj1, event = "FUNC_STATE_RESET_DATA", state = $state)
    
    $index = ArrayFind(array = $obj1.curStates, value = $state)
    If($index){ ArrayRemove(array = $obj1.curStates, index = $index) }
    CallTrigger(object = $obj1, event = "FUNC_GET_ALREADY_INTERACTION_PLAYERS_TO_SYNC_STATE", isAdd = false, state = $state)
}

FUNC_STATE_RELEASE --params: state[, duration]
{
    If(not $state)
    {
        Return()
    }
    $skill = Concat(p1 = @skillPath, p2 = $state)
    $stateBase = GetSkillVar(fullName = $skill, key = "stateBase") or $state
    $hadState = Concat(p1 = "had", p2 = $stateBase)
    $releasingState = Concat(p1 = "releasing", p2 = $state)
    CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS", destination = $state)
    If(GetObjectVar(obj = $obj1, key = $hadState) && not GetObjectVar(obj = $obj1, key = $releasingState))
    {
        $subdivided = GetSkillVar(fullName = $skill, key = "subdivided")
        If(ArraySize(array = $subdivided or []) > 0)
        {
            $kind = ArrayGet(array = $subdivided, index = GetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "Idx")))
            If($kind ~= $state)
            {
                Return()
            }
        }
        SetObjectVar(obj = $obj1, key = $releasingState, value = true)
        CallTrigger(object = $obj1, event = "FUNC_STOP_TIMER", timerStr = Concat(p1 = $state, p2 = "AUTOVANISH_TIMER"))
        SetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "TriggerRelease"), value = true)
        $duration = $duration or GetSkillVar(fullName = $skill, key = "duration")
        If($duration && $duration > 0)
        {
            CallTrigger(object = $obj1, event = "FUNC_STATE_START_PROGRESS", state = $state, stateBase = $stateBase, duration = $duration)
        }
        Else
        {
            CallTrigger(object = $obj1, event = "FUNC_STATE_REWARD", state = $state, stateBase = $stateBase, skill = $skill)
        }
    }
}

FUNC_STATE_RELEASE_SUSPEND --params: state
{
    If($obj1.guideStep == @PlayGoGround and $state == "playground")
    {
        Return()
    }
    If(not $state)
    {
        Return()
    }

    $skill = Concat(p1 = @skillPath, p2 = $state)
    $stateBase = GetSkillVar(fullName = $skill, key = "stateBase") or $state
    $hadState = Concat(p1 = "had", p2 = $stateBase)
    $releasingState = Concat(p1 = "releasing", p2 = $state)
    If(GetObjectVar(obj = $obj1, key = $hadState) && GetObjectVar(obj = $obj1, key = $releasingState))
    {
        SetObjectVar(obj = $obj1, key = $releasingState, value = false)
        $duration = GetSkillVar(fullName = $skill, key = "duration")
        If($duration && $duration > 0)
        {
            CallTrigger(object = $obj1, event = "FUNC_STATE_SUSPEND_PROGRESS", state = $state, stateBase = $stateBase, duration = $duration)
        }   
    }
}

FUNC_STATE_REWARD_AND_TIP --params: rewardSum, textKey, rewardType [, textP1, textP2, textP3, showMoneyEffect]
{   
    AddCurrency(coinName = $rewardType or "green_currency", entity = $obj1, count = $rewardSum)
    CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "getMoneyTipSoundBuff")
    ShowRewardItemEffect(type = "Coin", count = $rewardSum, fullName = $rewardType or "green_currency", player = $obj1)
    ShowTip(entity = $obj1, tipType = 3, textKey = $textKey, textP1 = $textP1, textP2 = $textP2, textP3 = $textP3)
    If($showMoneyEffect)
    {
        AddEntityBuff(entity = $obj1, cfg = $showMoneyEffect, buffTime = 100)
    }
}

FUNC_STATE_SHOW_DETAILS_UI -- params: skill(fullName) [, partner]
{
    $state = GetSkillVar(fullName = $skill, key = "state")
    $obj1.detailsUI = $state
    CallTrigger(object = $obj1, event = "FUNC_SYNC_STATE_DETAILS_TO_OTHERS", state = $state, needSyncPlayers = [$partner])
}

FUNC_STATE_OPEN_GPS --params: rtVal
{
    If(not $rtVal)
    {
        Return()
    }
    CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
    $reg = Concat(p1 = "myplugin/region_state_", p2 = $rtVal)
    $gpsDict = NewDictionary(GetConfigValue(type = "region", fullName = $reg, key = "gpsDict")) 
    CallTrigger(object = $obj1, gpsDict = $gpsDict, event = "FUNC_GPS_SET_OR_SYNC")
}

FUNC_GPS_SET_OR_SYNC --params: gpsDict
{
    If(not $gpsDict || DictionarySize(dict = $gpsDict) == 0)
    {
        Return()
    }
    $type = DictionaryGet(dict = $gpsDict, key = "type")
    If(not $type)
    {
        Return()
    }
    $belongMap = DictionaryGet(dict = $gpsDict, key = "belongMap")
    $pos = DictionaryGet(dict = $gpsDict, key = "pos")
    $conA = (($type == "map" || $type == "selfHouse" || $type == "region") && not $belongMap)
    $conB = $type == "entity" && (not $belongMap || not $pos)
    If($conA || $conB)
    {
        Return()
    }

    $curMapEntity = GetEntityMap(entity = $obj1)
    $curMap = GetEntityName(entity = $curMapEntity)
    $gps = { x = 0, y = 0, z = 0 }
    $owner = GetMapVar(map = $curMapEntity, key = "owner")
    $belongMap = $type == "selfHouse" and GetEntityName(entity = GetEntityMap(entity = $obj1.house)) or $belongMap
    If($owner)
    {
        If($type == "selfHouse" && $owner == $obj1.house)
        {
            ShowTip(entity = $obj1, tipType = 3, textKey = "you_came")
            CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
            Return()
        }
        $door = $owner.insideDoor
        $gps = GetEntityPosition(entity = $door)
    }
    ElseIf($curMap == $belongMap)
    {
        If($type == "map")
        {
            ShowTip(entity = $obj1, tipType = 3, textKey = "you_came")
            CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
            Return()
        }
        ElseIf($type == "region")
        {
            $region = GetRegionByName(map = $curMapEntity, name = DictionaryGet(dict = $gpsDict, key = "regionName"))
            If($region)
            {
                $min = GetRegionMin(region = $region)
                $max = GetRegionMax(region = $region)
                $tmpReg = {min = $min, max = $max + V3(1, 1, 1)}
                If(IfEntityInArea(entity = $obj1, region = $tmpReg))
                {
                    ShowTip(entity = $obj1, tipType = 3, textKey = "you_came")
                    CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
                    Return()
                }
                $center = GetRegionCenter(region = $region)
                $gps = V3(GetPosX(pos = $center), GetPosY(pos = $min), GetPosZ(pos = $center))
            }
        }
        ElseIf($type == "entity")
        {
            $destination = DictionaryGet(dict = $gpsDict, key = "destination")
            $ride = GetRideOn(entity = $obj1)
            If($ride and $ride.cfg.releaseState == $destination)
            {
                ShowTip(entity = $obj1, tipType = 3, textKey = "you_came")
                CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
                Return()
            }
            $gps = DictionaryGet(dict = $gpsDict, key = "pos")
        }
        ElseIf($type == "selfHouse")
        {
            $gps = ComputeV3(p1 = GetEntityPosition(entity = $obj1.house), p2 = V3RotationYaw(vector = GetConfigVar(obj = $obj1.house, key = "doorPos") or {x = 0,y = 0, z = 0}, yaw = GetEntityYaw(entity = $obj1.house)), op = "add")
        }
    }
    Else
    {
        $road = []
        $maps = []
        $roadIdx = 1
        $ngt = DictionaryGet(dict = $gpsDict, key = "navigateDict")
        If(not $ngt)
        {
            CallTrigger(object = $obj1, event = "FUNC_GPS_RECALCULATE", mapStart = $curMap, mapEnd = $belongMap, gpsDict = $gpsDict)
            Return()
        }
        Else
        {
            $roadIdx = DictionaryGet(dict = $ngt, key = "roadIdx") + 1
            $maps = DictionaryGet(dict = $ngt, key = "maps")
            $road = DictionaryGet(dict = $ngt, key = "road")
            $correctMap = ArrayGet(array = @allMaps, index = ArrayGet(array = $maps, index = $roadIdx))
            If($correctMap ~= $mapName)
            {
                CallTrigger(object = $obj1, event = "FUNC_GPS_RECALCULATE", mapStart = $curMap, mapEnd = $belongMap, gpsDict = $gpsDict)
                Return()
            }
            $gps = GetConfigValue(type = "entity", key = "pos", fullName = ArrayGet(array = $road, index = $roadIdx))
            $navigateDict = NewDictionary({road = $road, roadIdx = $roadIdx, maps = $maps})
            DictionarySet(dict = $gpsDict, key = "navigateDict", value = $navigateDict)
        }
    }
    CallTrigger(object = $obj1, event = "FUNC_OPEN_GPS", gps = $gps, gpsDict = $gpsDict)
}

FUNC_GPS_RECALCULATE --params: mapStart, mapEnd, gpsDict
{
    $road = []
    $maps = []
    $roadIdx = 1

    $mapAToBKey = Concat(p1 = $mapStart, p2 = "To", p3 = $mapEnd)
    $dwKey = Concat(p1 = $mapAToBKey, p2 = "DWs") --doorwayKey
    $maps = GetGlobalVar(key = $mapAToBKey) --maps
    $road = GetGlobalVar(key = $dwKey) --doorways
    If(not $road || not $maps)
    {
        ShowTip(entity = $obj1, tipType = 3, textKey = "unable_to_navigate", textP1 = $mapEnd)
        Return()
    }
    $navigateDict = NewDictionary({road = $road, roadIdx = $roadIdx, maps = $maps})
    DictionarySet(dict = $gpsDict, key = "navigateDict", value = $navigateDict)
    $gps = GetConfigValue(type = "entity", key = "pos", fullName = ArrayGet(array = $road, index = $roadIdx))
    CallTrigger(object = $obj1, event = "FUNC_OPEN_GPS", gps = $gps, gpsDict = $gpsDict)
}

FUNC_UPDATE_STATE_SKILL_JACK_AREA --params: up
{
    If($up == nil)
    {
        $map = GetEntityMap(entity = $obj1)
        $up = $map.owner ~= $obj1.house and true or false
    }
    UpdateSkillJackArea(entity = $obj1, info = {pos = 1, yOff = $up and @skillJackUp or @skillJackDown})
}

FUNC_STATE_RESET_DATA --params: state[, hideTip]
{
    $index = ArrayFind(array = $obj1.stateProgress, value = $state)
    If($index) { ArrayRemove(array = $obj1.stateProgress, index = $index) }
    ShowProgressFollowObj(entity = $obj1, isOpen = false, pgName = $state)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "got"), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "STime"), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $state, p2 = "UsedTime"), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = "releasing", p2 = $state), value = nil)
    CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS", destination = $state, hideTip = $hideTip)
    CallTrigger(object = $obj1, event = "FUNC_REMOVE_BUFF", buffStr = Concat(p1 = $state, p2 = "Effect"))
    CallTrigger(object = $obj1, event = "FUNC_STOP_TIMER", timerStr = Concat(p1 = $state, p2 = "AFFECT_TIMER"))
}

FUNC_STATEBASE_RESET_DATA -- params: stateBase
{
    SetObjectVar(obj = $obj1, key = Concat(p1 = "pre", p2 = $stateBase), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "TriggerRelease"), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "InteractList"), value = nil)
}

FUNC_STATE_ACTION --params: state, skill
{
    CallTrigger(object = $obj1, event = "FUNC_STATE_ADD_EFFECT", state = $state, skill = $skill)
    CallTrigger(object = $obj1, event = "FUNC_STATE_START_AFFECT", state = $state, skill = $skill)
    CallTrigger(object = $obj1, event = "FUNC_STATE_START_AUTO_VANISH_TIME", state = $state, skill = $skill)
    CallTrigger(object = $obj1, event = "FUNC_STATE_CHECK_REGION", state = $state)
    CallTrigger(object = $obj1, event = "FUNC_STATE_MAP_OPERATION", map = GetEntityMap(entity = $obj1))
    CallTrigger(object = $obj1, event = "FUNC_STATE_RIDE_OPERATION", ride = GetRideOn(entity = $obj1))
}

SHOW_BUY_PRIVILEGE_TIP
{
    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_sure",
        rightCoinId = nil,
        rightContent = "ui_cancel"
    }
    $tipType = 5
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "OPEN_PRIVILEGE_SHOP", p1 = "ui_tip", p2= "action_not_have_privilege", p3 = $btnInfo)
}

OPEN_PRIVILEGE_SHOP
{
    If($result && $button == "left")
    {
        OperationWindows(player = $obj1, isOpen = true, win = "priShop")
    }
}

INTERACTION_CLAP
{ --拍手 小孩和小孩

    If($obj2.role == @child && $obj1.role == @child)
    {
        CallTrigger(obj1 = $obj1, to = $obj1, from = $obj2, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_clap")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_child")
    }
}

INTERACTION_HUG
{ --拥抱 小孩和小孩 or 大人和大人

    If($obj2.role == @child && $obj1.role == @child)
    {
        CallTrigger(obj1 = $obj1, to = $obj1, from = $obj2, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_hug")
    }
    ElseIf($obj2.role == @adult && $obj1.role == @adult)
    {
        CallTrigger(obj1 = $obj1, to = $obj1, from = $obj2, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_hug")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_child_or_adult")
    }
}

INTERACTION_HANDSHAKE
{ --握手 大人和大人
    If($obj2.role == @adult && $obj1.role == @adult)
    {
        CallTrigger(obj1 = $obj1, to = $obj1, from = $obj2, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_handshake")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_adult")
    }
}

INTERACTION_RIDE
{ --骑乘 小孩和大人
    If($obj2.role == @child && $obj1.role == @adult)
    {
        CallTrigger(obj1 = $obj1, to = $obj1, from = $obj2, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_ride")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_child_and_adult")
    }
}

INTERACTION_HAND_IN_HAND
{ --手拉手 小孩和小孩
    If($obj2.role == @child && $obj1.role == @child)
    {
        CallTrigger(obj1 = $obj1, to = $obj2, from = $obj1, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_handinhand")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_child")
    }
}

INTERACTION_FOLLOW
{ --跟随
    CallTrigger(obj1 = $obj1, to = $obj1, from = $obj2, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_follow")
}

INTERACTION_PICK
{ --大人向小孩发起
    If($obj2.role == @adult && $obj1.role == @child)
    {
        CallTrigger(obj1 = $obj1, to = $obj2, from = $obj1, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_pickup")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_adult_child_and")
    }
}

INTERACTION_BABY_TROLLEY { --大人向小孩发起
    If($obj2.role == @adult && $obj1.role == @child) {
        If(not $obj2.createdTrolley || DictionarySize(dict = NewDictionary( GetPassengers(entity = $obj2.createdTrolley))) >= 2) {
            Return()
        }
        CallTrigger(obj1 = $obj1, to = $obj2, from = $obj1, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_trolley")
    } Else {
        $tipType = 2
	    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_adult_child_and")
    }
}

INTERACTION_RAISE_HEIGHT
{
    --举高高：大人向小孩发起
    If($obj2.role == @adult && $obj1.role == @child)
    {
        CallTrigger(obj1 = $obj1, to = $obj2, from = $obj1, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_raise_height")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_adult_child_and")
    }
}

INTERACTION_COAX
{   --摸头杀；大人向小孩发起
    If($obj2.role == @adult && $obj1.role == @child)
    {
        CallTrigger(obj1 = $obj1, to = $obj2, from = $obj1, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_coax")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_adult_child_and")
    }
}

INTERACTION_PIGGYBACK
{   --背；小孩向大人发起
    If($obj2.role == @child && $obj1.role == @adult)
    {
        CallTrigger(obj1 = $obj1, to = $obj1, from = $obj2, event = "USER_INTERACTION_ACTION", skillName = "myplugin/action_piggyback")
    }
    Else
    {
        	$tipType = 2
	ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), tipType = $tipType, entity = $obj2, p1 = "action_role_not_matching_child")
    }
}

USER_INTERACTION_ACTION
{
    $toTeamId = GetEntityTeam(entity = $to) or 0
    $fromTeamId = GetEntityTeam(entity = $from) or 0
    If($toTeamId ~= $fromTeamId)
    {
        --双人交互仅允许双方共同家庭 或者 双方都没有家庭。
        Return()
    }
    If(GetSkillVar(fullName = $skillName, key = "needPrivilege"))
    {
        $privilegeName = GetSkillVar(fullName = $skillName, key = "privilegeName")
        If(not ArrayFind(array = $obj1.privilege, value = $privilegeName))
        {
            $shopIndex = GetSkillVar(fullName = $skillName, key = "shopIndex")
            $index = GetShopItemIndex(itemName = "myplugin/action_privilege") or $shopIndex
            CallTrigger(obj1 = $obj1, event = "POP_UP_BUY_PRIVILEGE", shopIndex = $shopIndex)
            Return()
        }
    }
    $receiver = $obj1   --接收方。被发起人
    $promoter = $obj1 == $from and $to or $from --发起方

    $conA = $receiver.role == @child && $skillName == "myplugin/action_pickup" && not $receiver.useTrolley
    If($receiver.interactionObjId || (not $conA && GetRideOn(entity = $receiver)))
    {
        ShowTip(entity = $promoter, tipType = 2, textKey = "target_is_intercting", keepTime = 40)
        Return()
    }

    CallTrigger(obj1 = $receiver, event = "PLAYER_CLEAR_RIDE")
    If($promoter.interactionObjId) {
        CallTrigger(obj1 = $promoter, event = "ENTITY_REMOVE_INTERACTION")
    } ElseIf($skillName ~= "myplugin/action_trolley") { --如果是手推车的话就不解除发起方的原有交互(即：不解除发起方推着手推车)
        Dismount(entity = $promoter)
    }

    CastSkill(skill = $skillName, from = $from, packet = {targetID = GetObjectID(object = $to)})
}

ENTITY_JUMP {
    $ride = GetRideOn(entity = $obj1)
    If ($ride && not IsCameraMode(player = $obj1)){
        If(GetOwner(entity = $ride) == $obj1 && GetConfigVar(obj = $ride, key = "driverJumpShiled"))
        {
            Return()
        }
        CallTrigger(obj1 = $obj1, event = "ENTITY_REMOVE_INTERACTION")
        Dismount(entity = $obj1)
    }
}

ENTITY_REMOVE_INTERACTION {
    If($obj1.interactionObjId){
        $target = GetObject(objID = $obj1.interactionObjId)
        If($target && $target.interactionBuff) {
            $target.notToClearRide = $target.createdTrolley and true or false --如果obj1的交互对象是推着手推车的，则取消target解除与手推车的交互
            RemoveEntityBuff(buff = $target.interactionBuff, entity = $target)
            $target.notToClearRide = nil
        }
    }

    If($obj1.interactionBuff){
        RemoveEntityBuff(buff = $obj1.interactionBuff, entity = $obj1)
    }
}

ENTITY_ADD_DINGDONG_BUFF{
    $dingDongBuff = GetConfigVar(obj = $obj1, key = $buffKey)
    If($dingDongBuff){
        AddEntityBuff(entity = $obj1, cfg = $dingDongBuff, buffTime = 200)
    }
}

UPDATE_FAMILY_IDENTITY()
{
    $x = GetConfigVar(obj = $obj1, key = "familyIdentityX")
    $y = GetConfigVar(obj = $obj1, key = "familyIdentityY")
    SetHeadText(entity = $obj1, x = $x, y = $y, headText = "")
}

CREATE_FAMILY
{
    If(IsPlayer(entity = $obj1))
    {
        $familyId = GetEntityTeam(entity = $obj1)
        If($familyId and $familyId ~= 0)
        {
            Return()
        }
        $teamId = @familyIndex
        SetEntityTeam(entity = $obj1, teamId = $teamId)
        @familyIndex = @familyIndex + 1
        
        CallTrigger(event = "INIT_TEAM_UI", object = $obj1, memberNum = 1, show = true) 
        CallTrigger(event = "ADD_CREATE_FAMILY_REPORT_NUM", object = $obj1)
        DictionarySet(dict = @FamilyCreateDuration, key = $teamId, value = GetGameTime())    --记录家庭生成时间

        CallTrigger(event = "UPDATE_FAMILY_IDENTITY", object = $obj1)
    }
}

ADD_CREATE_FAMILY_REPORT_NUM
{
    If(not $obj1.singleGameCreateFamilyNum)
    {
        $obj1.singleGameCreateFamilyNum = 0
    }

    $obj1.singleGameCreateFamilyNum = $obj1.singleGameCreateFamilyNum + 1
    $obj1.createFamilyNum = $obj1.createFamilyNum + 1
}

ADD_JOIN_FAMILY_REPORT_NUM
{
    If(not $obj1.singleGameJoinFamilyNum)
    {
        $obj1.singleGameJoinFamilyNum = 0
    }
    $obj1.singleGameJoinFamilyNum = $obj1.singleGameJoinFamilyNum + 1
    $obj1.joinFamilyNum = $obj1.joinFamilyNum + 1
}

SHOW_QUIT_FAMILY_UI
{
    $tipType = 2
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "QUIT_FAMILY",p1 = "gui_want_to_quit_family")
}

QUIT_FAMILY
{
    If(not $result)
    {
        Return()
    }
    
    If(IsPlayer(entity = $obj1))
    {
        $teamId = GetEntityTeam(entity = $obj1)
        SetEntityTeam(entity = $obj1, teamId = 0)
        RecheckAllInteractionUIs(player = $obj1)
        ShowTip(entity = $obj1, tipType = 2,textKey = "gui_quit_family_success", keepTime = 40)
        CallTrigger(event = "INIT_TEAM_UI", obj1 = $obj1, show = false)     --  关闭家庭UI
        CallTrigger(event = "UPDATE_TEAM_MEMBER_LIST", teamId = $teamId, object = $obj1)
        CallTrigger(event = "SHOW_TEAM_UI", obj1 = $obj1)                   -- 打开创建队伍的UI

        CallTrigger(event = "UPDATE_FAMILY_IDENTITY", object = $obj1) 
    }
}

LEAVE_TEAM
{
    If(IsPlayer(entity = $obj1))
    {
        If($teamId and $teamId ~= 0)
        {
            $teamEntityList = GetTeamEntityList(teamId = $teamId)
            $dict = NewDictionary($teamEntityList)
            $size = DictionarySize(dict = $dict)
            If($size <= 0)
            {
                CallTrigger(event = "DATA_REPORT_FAMILY_DURACTION", object = $obj1, teamId = $teamId)
                DictionaryRemove(dict = @FamilyCreateDuration, key = $teamId)   -- 移除队伍的存活时间
                DictionaryRemove(dict = @FamilyName, key = $teamId)             -- 移除队伍的名字
            }
        }
    }
}

UPDATE_TEAM_MEMBER_LIST
{
    $entityList = GetTeamEntityList(teamId = $teamId)
    $dict = NewDictionary($entityList)
    $size = DictionarySize(dict = $dict)

    $teamName = DictionaryGet(dict = @FamilyName, key = $teamId) or nil

    ForeachDictionary(keyName = "objID", valueName = "entity", dict = NewDictionary($entityList))
    {
        If(IsPlayer(entity = $entity))
        {
            CallTrigger(event = "UPDATE_FAMILY_IDENTITY", object = $entity)

            RecheckAllInteractionUIs(player = $entity)

            If($disableUpdate and $obj1 == $entity)
            {
                Continue()
            }
            
            -- 单人的家庭UI 和 多人的家庭UI 的相互切换
            If($size <= 1)
            {
                UpdateUIData(player = $entity, ui = "win_team", data = {close = true})
                -- UpdateUIData(player = $entity, ui = "win_single_team")
            }
            Else
            {
                UpdateUIData(player = $entity, ui = "win_single_team", data = {close = true, title = $teamName})
                UpdateUIData(player = $entity, ui = "win_team")
            }
        }
    }
}

INTERACTION_INVITE_FAMILY  -- 邀请加入家庭
{
    -- obj2 邀请 obj1 加入家庭
    -- obj2是点击UI的那个人
    -- obj1是被点击的那个人

    $selfFamilyID = GetEntityTeam(entity = $obj2)
    
    If($selfFamilyID and $selfFamilyID ~= 0)
    {
        $playerCount = GetTeamInfo(teamId = $selfFamilyID, key = "playerCount")
        If($playerCount >= 4)
        {
            ShowTip(entity = $obj2, tipType = 2,textKey = "ui_family_full_member", keepTime = 40)
            Return()
        }
    }

    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_cancel",
        rightCoinId = nil,
        rightContent = "ui_sure"
    }
    
    $content = {
        msg = "ui_family_invite",
        args = NewArray(GetEntityName(entity = $obj2))
    }
    $context = {
        targetID = GetObjectID(object = $obj2)
    }
    ShowBubbleMsg(entity = $obj2, textKey = "ui_family_ask_for_family", textP1 = GetEntityName(entity = $obj1))
    CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "inviteJoinFamilyBuff")
    $tipType = 5
    ShowDialogTip(context = $context, entity = $obj1, tipType = $tipType, event = "INVITE_JOIN_FAMILY", p1 = "ui_tip", p2 = $content, p3 = $btnInfo, 
        dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
}

INVITE_JOIN_FAMILY
{
    $targetPlayer = GetObject(objID = $targetID)
    If($button == "left")
    {
        If(IsPlayer(entity = $targetPlayer))
        {
            ShowTip(entity = $targetPlayer, tipType = 2,textKey = "ui_family_reject", keepTime = 40)
        }
        Return()
    }
    ElseIf($button == "right")
    {
        If(not IsPlayer(entity = $targetPlayer))
        {
            ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_offline", keepTime = 40)
            Return()
        }

        $targetFamilyID = GetEntityTeam(entity = $targetPlayer)

        
        If($targetFamilyID and $targetFamilyID ~= 0)
        {
            -- 如果 target 有家庭
            $playerCount = GetTeamInfo(teamId = $targetFamilyID, key = "playerCount")
            If(not $playerCount or $playerCount >= 4)
            {
                ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_full_member", keepTime = 40)
                Return()
            }

            SetEntityTeam(entity = $obj1, teamId = $targetFamilyID)

            -- 打开家庭UI
            CallTrigger(event = "SHOW_TEAM_UI", obj1 = $obj1) -- 打开家庭UI
            CallTrigger(event = "UPDATE_TEAM_MEMBER_LIST", teamId = $targetFamilyID, object = $obj1, disableUpdate = true)
            ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_join_in", keepTime = 40)
            
            -- 上报统计
            CallTrigger(event = "ADD_JOIN_FAMILY_REPORT_NUM", object = $obj1)
        }
        Else
        {
            -- 如果 target 没有家庭
            $teamId = @familyIndex
            @familyIndex = @familyIndex + 1

            SetEntityTeam(entity = $targetPlayer, teamId = $teamId)
            SetEntityTeam(entity = $obj1, teamId = $teamId)
           
            -- 打开家庭UI
            CallTrigger(event = "SHOW_TEAM_UI", obj1 = $obj1) -- 打开家庭UI
            CallTrigger(event = "SHOW_TEAM_UI", obj1 = $targetPlayer) -- 打开家庭UI
            ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_join_in", keepTime = 40)

            -- 上报统计
            DictionarySet(dict = @FamilyCreateDuration, key = $teamId, value = GetGameTime())    --记录家庭生成时间
            CallTrigger(event = "ADD_CREATE_FAMILY_REPORT_NUM", object = $targetPlayer)
            CallTrigger(event = "ADD_JOIN_FAMILY_REPORT_NUM", object = $obj1)

            CallTrigger(event = "UPDATE_FAMILY_IDENTITY", object = $obj1)
            CallTrigger(event = "UPDATE_FAMILY_IDENTITY", object = $targetPlayer)
        }
    }
}

INTERACTION_APPLY_FAMILY   --申请加入家庭
{
    -- obj2 申请加入 obj1 的家庭
    -- obj2是点击UI的那个人
    -- obj1是被点击的那个人

    $targetFamilyID = GetEntityTeam(entity = $obj1)
    If(not $targetFamilyID or $targetFamilyID == 0)
    {
        -- 对方家庭不存在
        Return()
    }

    $playerCount = GetTeamInfo(teamId = $targetFamilyID, key = "playerCount")
    If($playerCount >= 4)
    {
        ShowTip(entity = $obj2, tipType = 2,textKey = "ui_family_full_member", keepTime = 40)
        Return()
    }

    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_cancel",
        rightCoinId = nil,
        rightContent = "ui_sure"
    }
    
    $content = {
        msg = "ui_family_invite",
        args = NewArray(GetEntityName(entity = $obj2))
    }
    $context = {
        targetID = GetObjectID(object = $obj2)
    }

    ShowBubbleMsg(entity = $obj2, textKey = "ui_family_ask_for_family", textP1 = GetEntityName(entity = $obj1))
    CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "applyJoinFamilyBuff")
    $tipType = 5
    ShowDialogTip(context = $context, dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "APPLY_JOIN_FAMILY", p1 = "ui_tip", p2 = $content, p3 = $btnInfo)
}

APPLY_JOIN_FAMILY
{
    $targetPlayer = GetObject(objID = $targetID)
    If($button == "left")
    {
        If(IsPlayer(entity = $targetPlayer))
        {
            ShowTip(entity = $targetPlayer, tipType = 2,textKey = "ui_family_reject", keepTime = 40)
        }
        Return()
    }
    ElseIf($button == "right")
    {
        If(not IsPlayer(entity = $targetPlayer))
        {
            ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_offline", keepTime = 40)
            Return()
        }

        $teamId = GetEntityTeam(entity = $obj1)
        If(not $teamId or $teamId == 0)
        {
            Return()
        }

        $playerCount = GetTeamInfo(teamId = $teamId, key = "playerCount")
        If($playerCount >= 4)
        {
            ShowTip(entity = $targetPlayer, tipType = 2,textKey = "ui_family_full_member", keepTime = 40)
            Return()
        }

        SetEntityTeam(entity = $targetPlayer, teamId = $teamId)

        -- 打开家庭UI
        CallTrigger(event = "SHOW_TEAM_UI", obj1 = $targetPlayer) -- 打开家庭UI
        CallTrigger(event = "UPDATE_TEAM_MEMBER_LIST", teamId = $teamId, object = $targetPlayer, disableUpdate = true)
        ShowTip(entity = $targetPlayer, tipType = 2,textKey = "ui_family_join_in", keepTime = 40)
       
        -- 上报统计
        CallTrigger(event = "ADD_JOIN_FAMILY_REPORT_NUM", object = $targetPlayer)
    }
}

SHOW_TEAM_UI
{
    $teamId = GetEntityTeam(entity = $obj1)
    If($teamId and $teamId ~= 0)
    {
        $teamEntityList = GetTeamEntityList(teamId = $teamId)
        $dict = NewDictionary($teamEntityList)
        $memberNum = DictionarySize(dict = $dict)
        $teamName = DictionaryGet(dict = @FamilyName, key = $teamId) or nil
        CallTrigger(event = "INIT_TEAM_UI", object = $obj1, teamName = $teamName, memberNum = $memberNum, show = true) 
    }
    Else
    {
        CallTrigger(event = "SHOW_TEAM_CREATE_UI", object = $obj1) 
    }
}

SHOW_TEAM_CREATE_UI
{

    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_family_create",
        rightCoinId = nil,
        rightContent = "ui_family_album"
    }
    $tipType = 5
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "TEAM_CREATE_RESULT", p1 = "ui_tip", p2= "ui_not_in_family", p3 = $btnInfo)
}

TEAM_CREATE_RESULT
{
    If($result)
    {
        If($button == "left")
        {
            CallTrigger(event = "CREATE_FAMILY", object = $obj1) 
        }
        ElseIf($button == "right")
        {
            OperationWindows(win = "familyAlbum", isOpen = true, player = $obj1)
        }
    }
}


INIT_TEAM_UI
{
    If(not $show)
    {
        ShowTeamUI(entity = $obj1, show = false)
        ShowSingleTeamUI(entity = $obj1, show = false)
        Return()
    }

    $buttons = [
        {
            event = "SHOW_FAMILY_ALBUM",
            normalImage = "set:team.json image:blue_btn",
            pushedImage = "set:team.json image:blue_btn",
            name = "ui_family_album"
        },
        {
            event = "SHOW_QUIT_FAMILY_UI",
            normalImage = "set:team.json image:green_btn",
            pushedImage = "set:team.json image:green_btn",
            name = "ui_family_quit"
        }
    ]

    $closeBtn = {
        disableClose = false
    }

    If($memberNum > 1)
    {
         $title = {
            name = $teamName or "gui_my_family"
        }

        $info = {
            title = $title,
            buttons = $buttons,
            closeBtn = $closeBtn
        }

        ShowTeamUI(entity = $obj1, show = true, info = $info)
    }
    Else
    {
        $text = "ui_family_find_member"
        $image = "set:single_family.json image:icon"

        $buttons = [
            {
                event = "SHOW_FAMILY_ALBUM",
                normalImage = "set:single_family.json image:greenBtn",
                pushedImage = "set:single_family.json image:greenBtn",
                name = "ui_family_album"
            },
            {
                event = "SHOW_QUIT_FAMILY_UI",
                normalImage = "set:single_family.json image:blueBtn",
                pushedImage = "set:single_family.json image:blueBtn",
                name = "ui_family_quit"
            }
        ]


        $info = {
            text = $text,
            image = $image,
            buttons = $buttons,
            closeBtn = $closeBtn
        }

        ShowSingleTeamUI(entity = $obj1, show = true, info = $info)
    }
}

SHOW_FAMILY_ALBUM
{
    OperationWindows(win = "familyAlbum", isOpen = true, player = $obj1)
}

STORE_ITEM_STATUS_CHANGE
{
    $dictItem = NewDictionary($item)
    $storeId = DictionaryGet(dict = $dictItem, key = "storeId")
    $itemIndex = DictionaryGet(dict = $dictItem, key = "index")
    $danceStoreId = GetWorldVar(key = "danceStoreId")
    If($storeId == $danceStoreId && $targetIndex > 0)
    {
        $newDance = {}
        $danceIndex = 1
        $oldUseIndex = 0
        $oldItemIndex = 0
        Foreach(array = $obj1.danceUseItem, key = "value")
        {
            If($value == $itemIndex)
            {
                $oldUseIndex = $danceIndex
            }

            If ($danceIndex == $targetIndex)
            {
                $oldItemIndex = $value
                ArraySet(array = $newDance, index = $danceIndex , value = $itemIndex)
            }
            Else
            {
                ArraySet(array = $newDance, index = $danceIndex , value = $value)
            }

            $danceIndex = $danceIndex + 1
        }

        If ($oldUseIndex > 0)
        {
            ArraySet(array = $newDance, index = $oldUseIndex , value = $oldItemIndex)
        }

        $newData = {}
        $dataIndex = 1
        $hasOldItemIndex = false
        Foreach(array = $data, key = "value")
        {
            $dictValue = NewDictionary($value)
            $dictStoreId = DictionaryGet(dict = $dictValue, key = "storeId")
            $dictStoreItemIndex = DictionaryGet(dict = $dictValue, key = "itemIndex")
            If ($dictStoreId == $danceStoreId)
            {
                DictionarySet(dict = $dictValue, key = "status", value = 1)
            }

            If($dictStoreItemIndex == $oldItemIndex)
            {
                $hasOldItemIndex = true
            }

            ArraySet(array = $newData, index = $dataIndex , value = $dictValue)
            $dataIndex = $dataIndex + 1
        }

        If($hasOldItemIndex == false)
        {
            $dictValue = NewDictionary({})
            DictionarySet(dict = $dictValue, key = "status", value = 1)
            DictionarySet(dict = $dictValue, key = "itemIndex", value = $oldItemIndex)
            DictionarySet(dict = $dictValue, key = "storeId", value = $danceStoreId)
            ArrayAppend(array = $newData, value = $dictValue)
        }
        
        Foreach(array = $newDance, key = "value")
        {
            $isChange = false
            Foreach(array = $newData, key = "dictValue")
            {
                $dictStoreId = DictionaryGet(dict = $dictValue, key = "storeId")
                $dictItemIndex = DictionaryGet(dict = $dictValue, key = "itemIndex")
                If($dictItemIndex == $value && $dictStoreId == $danceStoreId)
                {
                    $isChange = true
                    DictionarySet(dict = $dictValue, key = "status", value = 2)
                    Break()
                }
            }
            If ($isChange == false)
            {
                $dictValue = NewDictionary({})
                DictionarySet(dict = $dictValue, key = "status", value = 2)
                DictionarySet(dict = $dictValue, key = "itemIndex", value = $value)
                DictionarySet(dict = $dictValue, key = "storeId", value = $danceStoreId)
                ArrayAppend(array = $newData, value = $dictValue)
            }
        }

        $dataIndex = 1
        $dataRestore = {}
        Foreach(array = $newData, key = "dictValue")
        {
            ArraySet(array = $dataRestore, index = $dataIndex , value = DictionaryToTable(dict = $dictValue))
            $dataIndex = $dataIndex + 1
        }

        CallTrigger(event = "CHANGE_DANCE_SKILL", obj1 = $obj1, oldSkill = $obj1.danceUseItem , newSkill = $newDance)
        $obj1.danceUseItem = $newDance
        $data = $dataRestore
        $def = false
    }
}

ADD_DANCE_EXPIRY_DATE
{
    --TODO money obj1 index time
    $danceStoreId = GetWorldVar(key = "danceStoreId")
    $status = GetStoreItemStatus(player = $obj1, storeId = $danceStoreId, index = $index)
    If($status == 1 || $status == 2 )
    {
        AddCurrency(entity = $obj1, coinName = "green_currency", count = $money)
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "getMoneyTipSoundBuff")
        Return()
    }

    $isNeedChange = true
    Foreach(array = $obj1.danceExpiryDate, key = "value")
    {
        $dictValue = NewDictionary($value)
        $dictIndex = DictionaryGet(dict = $dictValue, key = "index")
        $dictTime = DictionaryGet(dict = $dictValue, key = "time")
        If($index == $dictIndex)
        {
            $dictTime = $dictTime + $time
            DictionarySet(dict = $dictValue, key = "time", value = $dictTime)
            $value = DictionaryToTable(dict = $dictValue)
            $isNeedChange = false
            Break()
        }
    }

    If($isNeedChange)
    {
        $expiryDate = GetTime() + $time
        $dictValue = NewDictionary({})
        DictionarySet(dict = $dictValue, key = "index", value = $index)
        DictionarySet(dict = $dictValue, key = "time", value = $expiryDate)
        ArrayAppend(array = $obj1.danceExpiryDate, value = DictionaryToTable(dict = $dictValue))
    }

    CallTrigger(event = "CHANGE_DANCE_EXPIRY_DATE", obj1 = $obj1)
}

CHANGE_DANCE_EXPIRY_DATE
{
    $newDances = {}
    $minRemainTime = -1
    $dances = $obj1.danceExpiryDate
    $danceStoreId = GetWorldVar(key = "danceStoreId")
    Foreach(array = $dances, key = "value")
    {
        $dictValue = NewDictionary($value)
        $dictIndex = DictionaryGet(dict = $dictValue, key = "index")
        $dictTime = DictionaryGet(dict = $dictValue, key = "time")
        $remainTime = GetTime() - $dictTime

        If($remainTime <= 0)
        {
            $remainTime = 0
        }
        Else
        {
            ArrayAppend(array = $newDances, value = DictionaryToTable(dict = $dictValue))
        }

        If($minRemainTime == -1 || $remainTime < $minRemainTime )
        {
            $minRemainTime = $remainTime
        }

        ChangeStoreItemRemainTime(player = $obj1, storeId = $danceStoreId, index = $dictIndex, remainTime = $remainTime)
    }

    $obj1.danceExpiryDate = $newDances

    If($minRemainTime > 0)
    {
        StartTimer(rep = false, time = $minRemainTime * 20, object = $obj1, event = "CHANGE_DANCE_EXPIRY_DATE")
    }
}

CHANGE_DANCE_SKILL
{
    $danceStoreId = GetWorldVar(key = "danceStoreId")
    If($oldSkill)
    {
        Foreach(array = $oldSkill, key = "value")
        {
            $skillName = GetStoreItemName(storeId= $danceStoreId , index = $value)
            ForgetSkill(entity = $obj1, name = $skillName)
        }
    }

    If($newSkill)
    {
        UpdateUIData(player = $obj1, ui = "win_dance", data = $newSkill)

        Foreach(array = $newSkill, key = "value")
        {
            $skillName = GetStoreItemName(storeId= $danceStoreId , index = $value)
            LearnSkill(entity = $obj1, name = $skillName)
            EquipSkill(entity = $obj1, name = $skillName)
        }
    }
}

SET_DRESS_ARCHIVE
{
    If(not $obj1.dressArchive)
    {
        Return()
    }

    $bmDressData = {
        vars = {
            custom_face = GetSkin(entity = $obj1, skinName = "custom_face"),
            custom_hair = GetSkin(entity = $obj1, skinName = "custom_hair"),
            clothes_tops = GetSkin(entity = $obj1, skinName = "clothes_tops"),
            clothes_pants = GetSkin(entity = $obj1, skinName = "clothes_pants"),
            custom_shoes = GetSkin(entity = $obj1, skinName = "custom_shoes"),
            custom_glasses = GetSkin(entity = $obj1, skinName = "custom_glasses"),
            custom_scarf = GetSkin(entity = $obj1, skinName = "custom_scarf"),
            custom_wing = GetSkin(entity = $obj1, skinName = "custom_wing"),
            custom_hat = GetSkin(entity = $obj1, skinName = "custom_hat"),
            custom_tail = GetSkin(entity = $obj1, skinName = "custom_tail"),
            custom_crown = GetSkin(entity = $obj1, skinName = "custom_crown")
        }
    }

    $bmDressInfo = {
        vars = {
            name = "ui_dress_archive_app_dress",
            data = $bmDressData
        }
    }

    ArrayAppend(array = $obj1.dressArchive, value = $bmDressInfo)

    UpdateUIData(player = $obj1, ui = "win_dressArchive", data = $obj1.dressArchive)

}


SHOW_OPERATE_DRESS_ARCHIVE_INPUT_DIALOG
{
    $title = {
        name = "ui_dress_archive_change_name"
    }

    $inputTitle = {
        name = "ui_dress_archive_input_name"
    }

    $buttons = [
        {
            event = "cancel",
            normalImage = "set:tip_dialog.json image:btn_big_blue",
            pushedImage = "set:tip_dialog.json image:btn_big_blue",
            name = "ui_cancel"
        },
        {
            event = "SHOW_DELETE_DRESS_ARCHIVE_DIALOG",
            normalImage = "set:tip_dialog.json image:btn_big_yellow",
            pushedImage = "set:tip_dialog.json image:btn_big_yellow",
            name = "ui_delete",
            clickAndShow = true
        },
        {
            event = "RENAME_DRESS_ARCHIVE",
            normalImage = "set:tip_dialog.json image:btn_big_green",
            pushedImage = "set:tip_dialog.json image:btn_big_green",
            name = "ui_sure"
        }
    ]

    $options = {
        index = $index
    }

    $contents = {
        title = $title,
        inputTitle = $inputTitle,
        buttons = $buttons,
        text = $name,
        isLangText = true
    }

    ShowInputDialog(entity = $obj1, contents = $contents, options = $options)
}

ADD_DRESS_ARCHIVE_DIALOG
{
    $title = {
        name = "ui_dress_archive_save_name"
    }

    $inputTitle = {
        name = "ui_dress_archive_input_name"
    }

    $buttons = [
        {
            event = "cancel",
            normalImage = "set:tip_dialog.json image:btn_big_blue",
            pushedImage = "set:tip_dialog.json image:btn_big_blue",
            name = "ui_cancel"
        },
        {
            event = "ADD_DRESS_ARCHIVE",
            normalImage = "set:tip_dialog.json image:btn_big_green",
            pushedImage = "set:tip_dialog.json image:btn_big_green",
            name = "ui_sure"
        }
    ]

    $contents = {
        title = $title,
        inputTitle = $inputTitle,
        buttons = $buttons,
        text = "dress_default_name",
        isLangText = true
    }

    ShowInputDialog(entity = $obj1, contents = $contents)
}

ADD_DRESS_ARCHIVE
{
    If(not $obj1.dressArchive)
    {
        Return()
    }

    If((ArraySize(array = $obj1.dressArchive) - 1) < GetWorldVar(key = "dressArchiveNum"))
    {
        $addDressData = {
            vars = {
                custom_face = GetSkin(entity = $obj1, skinName = "custom_face"),
                custom_hair = GetSkin(entity = $obj1, skinName = "custom_hair"),
                clothes_tops = GetSkin(entity = $obj1, skinName = "clothes_tops"),
                clothes_pants = GetSkin(entity = $obj1, skinName = "clothes_pants"),
                custom_shoes = GetSkin(entity = $obj1, skinName = "custom_shoes"),
                custom_glasses = GetSkin(entity = $obj1, skinName = "custom_glasses"),
                custom_scarf = GetSkin(entity = $obj1, skinName = "custom_scarf"),
                custom_wing = GetSkin(entity = $obj1, skinName = "custom_wing"),
                custom_hat = GetSkin(entity = $obj1, skinName = "custom_hat"),
                custom_tail = GetSkin(entity = $obj1, skinName = "custom_tail"),
                custom_crown = GetSkin(entity = $obj1, skinName = "custom_crown")
            }
        }

        $addDressInfo = {
            vars = {
                name = $name or "dress_default_name",
                data = $addDressData,
                isSelect = false
            }
        }

        ArrayInsert(array = $obj1.dressArchive, index = 1, value = $addDressInfo)

        UpdateUIData(player = $obj1, ui = "win_dressArchive", data = $obj1.dressArchive)
    }
}

SHOW_DELETE_DRESS_ARCHIVE_DIALOG
{
    $tipType = 2
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, 
        p1 = "ui_dress_archive_delete_dialog_context",
        event = "DELETE_DRESS_ARCHIVE",
        tipType = $tipType,
        context = { index = $index })
}

DELETE_DRESS_ARCHIVE
{
    If(not $result)
    {
        Return()
    }
    
    ShowInputDialog(entity = $obj1, contents = { isClose = true })

    If(not $obj1.dressArchive)
    {
        Return()
    }

    If(not $index)
    {
        Return()
    }

    If($index <= ArraySize(array = $obj1.dressArchive) and $index > 0)
    {
        ArrayRemove(array = $obj1.dressArchive, index = $index)
    }
    
    UpdateUIData(player = $obj1, ui = "win_dressArchive", data = $obj1.dressArchive)
}

RENAME_DRESS_ARCHIVE
{
    If(not $obj1.dressArchive)
    {
        Return()
    }

    If(not $index)
    {
        Return()
    }

    If($index <= ArraySize(array = $obj1.dressArchive) and $index > 0)
    {
        $archive = ArrayGet(array = $obj1.dressArchive, index = $index)
        If($archive)
        {
            SetObjectVar(obj = $archive, key = "name", value = $name)
            $uiData = {
                index = $index,
                name = $name
            }
            UpdateUIData(player = $obj1, ui = "win_dressArchiveRename", data = $uiData) 
        }
    }
}

USE_OPERATE_DRESS_ARCHIVE_DIALOG
{
    $context = {
        index = $index
    }

    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_cancel",
        rightCoinId = nil,
        rightContent = "ui_sure"
    }

    $content = {
        msg = "gui_use_dress_archive_confirm",
        args = [$name]
    }

    ShowDialogTip(entity = $obj1, tipType = 5, event = "USE_OPERATE_DRESS_ARCHIVE", p1 = "ui_tip", p2 = $content, p3 = $btnInfo, context = $context)
}

USE_OPERATE_DRESS_ARCHIVE
{
    If(not $result)
    {
        Return()
    }

    If($button == "right")
    {
        UseDressArchive(player = $obj1, index = $index)
    }
}

REMOVE_BM_DRESS
{
    If(not $obj1.dressArchive)
    {
        Return()
    }

    ArrayRemove(array = $obj1.dressArchive, index = ArraySize(array = $obj1.dressArchive))
}

INIT_PLAYER_DRESS
{
    If(not $obj1.gameDress)
    {
        Return()
    }

    If($obj1.gameDress ~= "")
    {
        $dressDict = NewDictionary($obj1.gameDress)
        ForeachDictionary(dict = $dressDict, keyName = "skinName", valueName = "skinValue")
        {
            SetSkin(entity = $obj1, skinName = $skinName, skinValue = $skinValue)
        }
    }
}

SAVE_PLAYER_DRESS
{
    If(not $obj1.gameDress)
    {
        Return()
    }

    $obj1.gameDress = {
        custom_face = GetSkin(entity = $obj1, skinName = "custom_face"),
        custom_hair = GetSkin(entity = $obj1, skinName = "custom_hair"),
        clothes_tops = GetSkin(entity = $obj1, skinName = "clothes_tops"),
        clothes_pants = GetSkin(entity = $obj1, skinName = "clothes_pants"),
        custom_shoes = GetSkin(entity = $obj1, skinName = "custom_shoes"),
        custom_glasses = GetSkin(entity = $obj1, skinName = "custom_glasses"),
        custom_scarf = GetSkin(entity = $obj1, skinName = "custom_scarf"),
        custom_wing = GetSkin(entity = $obj1, skinName = "custom_wing"),
        custom_hat = GetSkin(entity = $obj1, skinName = "custom_hat"),
        custom_tail = GetSkin(entity = $obj1, skinName = "custom_tail"),
        custom_crown = GetSkin(entity = $obj1, skinName = "custom_crown")
    }
}

SHOW_CHANGE_NAME_INPUT_DIALOG
{
    $showType = 0
    $buttons = {}
    $freeChangeNameTimes = GetWorldVar(key = "freeChangeNameTimes")
    If($obj1.changeNameTimes < $freeChangeNameTimes)
    {
        $buttons = [
            {
                event = "cancel",
                normalImage = "set:tip_dialog.json image:btn_big_blue",
                pushedImage = "set:tip_dialog.json image:btn_big_blue",
                name = "ui_cancel"
            },
            {
                event = "CHANGE_PLAYER_NAME",
                normalImage = "set:tip_dialog.json image:btn_big_green",
                pushedImage = "set:tip_dialog.json image:btn_big_green",
                name = "ui_sure"
            }
        ]
    }
    Else
    {
        $buttons = [
            {
                event = "cancel",
                normalImage = "set:tip_dialog.json image:btn_big_blue",
                pushedImage = "set:tip_dialog.json image:btn_big_blue",
                coinId = nil,
                content = "ui_cancel"
            },
            {
                event = "CHANGE_PLAYER_NAME",
                normalImage = "set:tip_dialog.json image:btn_big_green",
                pushedImage = "set:tip_dialog.json image:btn_big_green",
                coinId = GetWorldVar(key = "changeNameCoinId"),
                content = GetWorldVar(key = "changeNamePrice")
            }
        ]
        $showType = 1
    }

    $title = {
        name = "ui_dress_change_name"
    }

    $inputTitle = {
        name = $inputTitleName or "ui_dress_input_name",
        color = $inputTitleColor
    }

    $contents = {
        title = $title,
        inputTitle = $inputTitle,
        buttons = $buttons,
        text = $name or $obj1.nickName,
        showType = $showType,
        isHintMaxTextLength = true
    }

    ShowInputDialog(entity = $obj1, contents = $contents)
}

CHANGE_PLAYER_NAME
{
    If(IsContainSensitiveWord(msg = $name))
    {
        CallTrigger(event = "SHOW_CHANGE_NAME_INPUT_DIALOG", obj1 = $obj1, name = $name, inputTitleName = "ui_lang_have_banned_words", inputTitleColor = [255, 0, 0])
        Return()
    }

    If($name == $obj1.nickName)
    {
        CallTrigger(event = "SHOW_CHANGE_NAME_INPUT_DIALOG", obj1 = $obj1, inputTitleName = "ui_lang_with_the_same_name", inputTitleColor = [255, 0, 0])
        Return()
    }

    $freeChangeNameTimes = GetWorldVar(key = "freeChangeNameTimes")
    If($obj1.changeNameTimes >= $freeChangeNameTimes)
    {
        $coinName = "green_currency"
        $coinId = GetWorldVar(key = "changeNameCoinId") or 3
        $price = GetWorldVar(key = "changeNamePrice")
        If($coinId == 0)
        {
            $coinName = "gDiamonds"
        }

        If(CheckBalance(entity = $obj1, coinName = $coinName, price = $price))
        {
            If(3 ~= $coinId)
            {
                BuyGoods(player = $obj1, uniqueId = 20202001,  coinId = $coinId, price = $price, name = $name, event = "BUY_CHANGE_PLAYER_NAME" )
                Return()
            }
            If(not PayCurrency(entity = $obj1, coinName = "green_currency", count = $price))
            {
                ShowGoldShop(player = $obj1, show = true)
                Return()
            }
        }
        Else
        {
            If($coinId == 0)
            {
                ShowRecharge(player = $obj1)
            }
            Else
            {
                OperationWindows(player = $obj1, isOpen = true, win = "goldShop")
            }
            Return()
        }
    }
    SetEntityName(entity = $obj1, name = $name)
    $obj1.nickName = $name
    $obj1.changeNameTimes = $obj1.changeNameTimes + 1
    UpdateUIData(player = $obj1, ui = "win_dressArchivePlayerName", data = $name)
}

BUY_CHANGE_PLAYER_NAME
{
    If($isSucceed)
    {
        $dictValue = NewDictionary($response)
        $name = DictionaryGet(dict = $dictValue, key = "name")
        $obj1 = DictionaryGet(dict = $dictValue, key = "player")
        SetEntityName(entity = $obj1, name = $name)
        $obj1.nickName = $name
        $obj1.changeNameTimes = $obj1.changeNameTimes + 1
        UpdateUIData(player = $obj1, ui = "win_dressArchivePlayerName", data = $name)
    }Else{
        ShowRecharge(player = $obj1)
    }
}

SHOW_OPERATE_DRESS_STORE_ITEM
{   
    If(not $storeId or not $itemIndex or not $targetIndex)
    {
        Return()
    }

    $item = GetStoreItem(storeId = $storeId, index = $itemIndex)
    If(not $item)
    {
        Return()
    }


    $itemDic = NewDictionary($item)

    $coinId = DictionaryGet(dict = $itemDic, key = "coinId")
    $price = DictionaryGet(dict = $itemDic, key = "price")

    If(not $coinId or not $price)
    {
        Return()
    }

    $coinName = "green_currency"
    If($coinId == 0)
    {
        $coinName = "gDiamonds"
    }

    If(CheckBalance(entity = $obj1, coinName = $coinName, price = $price))
    {
        $btnInfo = {
            leftCoinId = nil,
            leftContent = "ui_cancel",
            rightCoinId = $coinId,
            rightContent = $price
        }
        $context = {
            storeId = $storeId,
            itemIndex = $itemIndex,
            targetIndex = $targetIndex
        }
        $tipType = 5
        ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1,tipType = 5, event = "DRESS_STORE_ITEM_BUY", p1 = "ui_tip", p2 = "ui_sure_to_pay", p3 = $btnInfo, context = $context)
    }
    Else
    {
        If($coinId == 0)
        {
            ShowRecharge(player = $obj1)
        }
        Else
        {
            OperationWindows(player = $obj1, isOpen = true, win = "goldShop")
        }
    }
}

DRESS_STORE_ITEM_BUY
{
    If($result and $button == "right")
    {
        StoreOperation(entity = $obj1, storeId = $storeId, itemIndex = $itemIndex, targetIndex = $targetIndex)
    }
}

SHOW_SAVE_WORKS_TIP -- 作品保存提示框
{
    $price = GetWorldVar(key = "publishWorksPrice")
    $btnInfo = { rightCoinId = 3, rightContent = $price, leftCoinId = nil, leftContent = "works_save" }
    $context = { url = $url, isEdit = $isEdit, worksId = $worksId}
    $tipType = 5
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "SAVE_WORKS_TIP_CLICK_EVENT", p1 = "ui_tip", p2= "publish_works_tip", p3 = $btnInfo, context = $context)
}

SAVE_WORKS_TIP_CLICK_EVENT
{
    If(not $result) {
        Return()
    }

    $isPublish = false
    If($button == "right")
    {
        $price = GetWorldVar(key = "publishWorksPrice")
        If(CheckBalance(entity = $obj1, coinName = "green_currency", price = $price))
        {
            $isPublish = true
        }
        Else
        {
            --ShowDialogTip(entity = $obj1, p2 = "publish_works_not_enough_money", tipType = 0, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")

            CallTrigger(event = "SHOW_GOTO_APP_SHOP_UI", obj1 = $obj1)
            Return()
        }
    }

    If($isEdit && $worksId ~= nil) -- 编辑模式
    {
        CallTrigger(event = "UPDATE_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish, worksId = $worksId, isEdit = $isEdit)
    }
    Else -- 创建模式
    {
        CallTrigger(event = "CHECK_WORKS_ARCHIVE", obj1 = $obj1, url = $url, isPublish = $isPublish)
    }
}


CHECK_WORKS_ARCHIVE -- 检查作品存档数据
{
    GetWorksCount(player = $obj1, event = "CHECK_WORKS_ARCHIVE_RESPONSE", url = $url, isPublish = $isPublish)
}

CHECK_WORKS_ARCHIVE_RESPONSE
{
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")

    If($code == 1)
    {
        $unlockNum = $obj1.worksArchiveNum
        $maxArchiveNum = GetWorldVar(key = "maxWorksArchiveNum")
        $count = DictionaryGet(dict = $dictValue, key = "data")

        If($count >= $maxArchiveNum)
        {
            $tipType = 0
            ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "works_save_failure_archive_full", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
            Return()
        }

        If($count < $unlockNum)
        {
            CallTrigger(event = "CREATE_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish)
        }
        Else
        {
            CallTrigger(event = "SHOW_BYU_WORKS_ARCHIVE_UI", obj1 = $obj1, url = $url, isPublish = $isPublish)
        }
    }
    Else
    {
        $tipType = 0
        If($isPublish)
        {
            ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "publish_works_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
        }
        Else
        {
            ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "works_save_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
        }
    }
}

SHOW_BYU_WORKS_ARCHIVE_UI_2--购买存档
{
    $price = GetWorldVar(key = "worksArchivePrice")
    $btnInfo = { leftCoinId = nil, leftContent = "gui.text.cancel", rightCoinId = 0, rightContent = $price }
    $tipType = 5
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "BUY_WORKS_ARCHIVE_2", p1 = "composition.tip.title", p2= "buy_works_archive", p3 = $btnInfo)
}

BUY_WORKS_ARCHIVE_2
{
    If($button == "right")
    {
        $price = GetWorldVar(key = "worksArchivePrice")
        If(not CheckBalance(entity = $obj1, coinName = "gDiamonds", price = $price))
        {
            CallTrigger(event = "SHOW_GOTO_RECHARGE_UI", obj1 = $obj1)
            Return()
        }
        BuyGoods(player = $obj1, uniqueId = 1000003,  coinId = 0, price = $price, event = "BUY_WORKS_ARCHIVE_RESPONSE_2" )
    }
}

BUY_WORKS_ARCHIVE_RESPONSE_2
{
    $dictValue = NewDictionary($response)
    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    $tipType = 0
    If($isSucceed)
    {
        $obj1.worksArchiveNum = $obj1.worksArchiveNum + 1
        SetWorksArchiveNum(player = $obj1, num = $obj1.worksArchiveNum)
        UpdateUIData(player =$obj1, ui = "works_person", data = true)
        ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "buy_works_archive_succeed", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
    }
    Else
    {
        ShowRecharge(player = $obj1)
        ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "buy_works_archive_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
    }
}


SHOW_BYU_WORKS_ARCHIVE_UI--购买存档
{
    $price = GetWorldVar(key = "worksArchivePrice")
    $btnInfo = { rightCoinId = 0, rightContent = $price, leftCoinId = nil, leftContent = "works_save_coverage_new" }
    $context = { url = $url, isPublish = $isPublish }
    $tipType = 5
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "BUY_WORKS_ARCHIVE", p1 = "publish_works_buy_archive_title", p2= "publish_works_buy_archive", p3 = $btnInfo, context = $context)
}

BUY_WORKS_ARCHIVE
{
    If($button == "close" || not $result)
    {
        Return()
    }

    If($button == "right")
    {
        $price = GetWorldVar(key = "worksArchivePrice")
        If(not CheckBalance(entity = $obj1, coinName = "gDiamonds", price = $price))
        {
            --ShowDialogTip(entity = $obj1, p2 = "publish_works_buy_archive_not_enough_money", tipType = 0, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
            CallTrigger(event = "SHOW_GOTO_RECHARGE_UI", obj1 = $obj1)
            Return()
        }
        BuyGoods(player = $obj1, uniqueId = 1000001,  coinId = 0, price = $price, url = $url, isPublish = $isPublish, event = "BUY_WORKS_ARCHIVE_RESPONSE" )
    }

    If($button == "left")
    {
        CallTrigger(event = "GET_NEW_UN_PUBLISH_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish)
    }
}

BUY_WORKS_ARCHIVE_RESPONSE
{
    $dictValue = NewDictionary($response)

    $url = DictionaryGet(dict = $dictValue, key = "url")
    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    $isPublish = DictionaryGet(dict = $dictValue, key = "isPublish")
    If($isSucceed)
    {
        $obj1.worksArchiveNum = $obj1.worksArchiveNum + 1
        CallTrigger(event = "CREATE_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish)
    }
    Else
    {
        ShowRecharge(player = $obj1)
        $tipType = 0
        ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "publish_works_buy_archive_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
    }
}

GET_NEW_UN_PUBLISH_WORKS --获取没有发布的作品
{
    GetNewUnPublishWorks(event = "GET_NEW_UN_PUBLISH_RESPONSE", player = $obj1, url = $url, isPublish = $isPublish)
}

GET_NEW_UN_PUBLISH_RESPONSE
{
     $dictValue = NewDictionary($response)
     $code = DictionaryGet(dict = $dictValue, key = "code")
     $tipType = 0
     If($code == 1)
     {
        $worksId = DictionaryGet(dict = $dictValue, key = "data")
        CallTrigger(event = "UPDATE_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish, worksId = $worksId)
     }
     ElseIf($code == 2047)
     {
        ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "works_save_coverage_new_works_failure_not_un_publish", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
     }
     Else
     {
        ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "works_save_coverage_new_works_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
     }
}

UPDATE_WORKS
{
    UpdateWorks(player = $obj1, url = $url, isPublish = $isPublish, worksId = $worksId, isEdit = $isEdit, event = "UPDATE_WORKS_RESPONSE")
}

UPDATE_WORKS_RESPONSE
{
     $dictValue = NewDictionary($response)
     $code = DictionaryGet(dict = $dictValue, key = "code")

     If($code == 1)
     {
        If($isPublish)
        {
            $price = GetWorldVar(key = "publishWorksPrice")
            PayCurrency(entity = $obj1, coinName = "green_currency", count = $price)
            If($isEdit)
            {
                ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_edit_and_publish_new_works_succeed", keepTime = 20)
            }
            Else
            {
                ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_coverage_and_publish_new_works_succeed", keepTime = 20)
            }
            CallTrigger(event = "PLAYER_PUBLISH_WORKS", worksId = $worksId, player = $obj1)
        }
        Else
        {
            If($isEdit)
            {
                ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_edit_new_works_succeed", keepTime = 20)
            }
            Else
            {
                ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_coverage_new_works_succeed", keepTime = 20)
            }
        }
        SetWorksArchiveNum(player = $obj1, num = $obj1.worksArchiveNum)
        UpdateUIData(player =$obj1, ui = "works_person", data = true)
        OperationWindows(player = $obj1, isOpen = false, win = "palette")
     }
     Else
     {
        $tipType = 0
        If($isEdit)
        {
            ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "works_save_edit_new_works_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
        }
        Else
        {
            ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "works_save_coverage_new_works_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
        }
     }
}

CREATE_WORKS
{
    CreateWorks(player = $obj1, picUrl = $url, isPublish = $isPublish, event = "CREATE_WORKS_RESPONSE")
}

CREATE_WORKS_RESPONSE
{
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    $data = DictionaryGet(dict = $dictValue, key = "data")

    If($code == 1)
    {
        If($isPublish)
        {
            $price = GetWorldVar(key = "publishWorksPrice")
            PayCurrency(entity = $obj1, coinName = "green_currency", count = $price)
            ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_succeed", keepTime = 20)
            CallTrigger(event = "PLAYER_PUBLISH_WORKS", worksId = $data, player = $obj1)
        }
        Else
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_succeed", keepTime = 20)
        }
        SetWorksArchiveNum(player = $obj1, num = $obj1.worksArchiveNum)
        UpdateUIData(player =$obj1, ui = "works_person", data = true)
        OperationWindows(player = $obj1, isOpen = false, win = "palette")
    }
    Else
    {
        $tipType = 0
        If($isPublish)
        {
            ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "publish_works_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
        }
        Else
        {
            ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "works_save_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
        }
    }
}

SHOW_PUBLISH_WORKS_UI
{
    $price = GetWorldVar(key = "publishWorksPrice")
    $cubePrice = GetWorldVar(key = "publishWorksCubePrice")
    $btnInfo = { leftCoinId = 3, leftContent = $price, rightCoinId = 0, rightContent = $cubePrice }
    $context = { worksId = $worksId, isEdit = false }
    $tipType = 5
    ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, tipType = $tipType, event = "PUBLISH_WORKS", p1 = "ui_tip", p2= "publish_works_tip", p3 = $btnInfo, context = $context)
}

PUBLISH_WORKS
{
    If($button == "left")
    {
        $price = GetWorldVar(key = "publishWorksPrice")
        If(not CheckBalance(entity = $obj1, coinName = "green_currency", price = $price))
        {
            --ShowDialogTip(entity = $obj1, p2 = "publish_works_not_enough_money", tipType = 0, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
            CallTrigger(event = "SHOW_GOTO_APP_SHOP_UI", obj1 = $obj1)
            Return()
        }
        PublishWorks(player = $obj1, id = $worksId, event = "PUBLISH_WORKS_RESPONSE")
    }

    If($button == "right")
    {
        $price = GetWorldVar(key = "publishWorksCubePrice")
        If(not CheckBalance(entity = $obj1, coinName = "gDiamonds", price = $price))
        {
            --ShowDialogTip(entity = $obj1, p2 = "publish_works_not_enough_money", tipType = 0, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
            CallTrigger(event = "SHOW_GOTO_RECHARGE_UI", obj1 = $obj1)
            Return()
        }
        BuyGoods(player = $obj1, uniqueId = 1000002,  coinId = 0, price = $price, worksId = $worksId, event = "PAY_PUBLISH_WORKS_BY_CUBE_RESPONSE" )
    }
}

PUBLISH_WORKS_RESPONSE
{
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    $tipType = 0
    If($code == 1)
    {
        $price = GetWorldVar(key = "publishWorksPrice")
        PayCurrency(entity = $obj1, coinName = "green_currency", count = $price)
        ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "publish_works_succeed", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
        SetWorksArchiveNum(player = $obj1, num = $obj1.worksArchiveNum)
        UpdateUIData(player =$obj1, ui = "works_person", data = true)
        CallTrigger(event = "PLAYER_PUBLISH_WORKS", worksId = $worksId, player = $obj1)
    }
    Else
    {
        $tipType = 0
        ShowDialogTip(_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1), entity = $obj1, p2 = "publish_works_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip")
    }
}

PAY_PUBLISH_WORKS_BY_CUBE_RESPONSE
{
    $dictValue = NewDictionary($response)

    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    $worksId = DictionaryGet(dict = $dictValue, key = "worksId")

    If($isSucceed)
    {
        PublishWorks(player = $obj1, id = $worksId, event = "PUBLISH_WORKS_BY_CUBE_RESPONSE")
    }
    Else
    {
        ShowRecharge(player = $obj1)
        $tipType = 0
        ShowDialogTip(entity = $obj1, p2 = "publish_works_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip"
            ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
}

PUBLISH_WORKS_BY_CUBE_RESPONSE
{
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    If($code == 1)
    {
        ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_succeed", keepTime = 20)
        CallTrigger(event = "PLAYER_PUBLISH_WORKS", worksId = $worksId, player = $obj1)
        UpdateUIData(player = $obj1, ui = "works_person", data = true)
    }
    Else
    {
        $tipType = 0
        ShowDialogTip(entity = $obj1, p2 = "publish_works_failure", tipType = $tipType, p3 = "gui.text.sure", p1 = "gui_dialog_tip_title_tip"
            ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
}

COMMENT_WORKS
{
    CommentWorks(player = $obj1, id = $id, msg = $msg, event = "HTTP_TEST")
}

HTTP_TEST
{

}

HTTP_PURCHASED_DRESS_CALL_BACK
{
    $responseDict = NewDictionary($response)
    $dressStoreIds = GetWorldVar(key = "dressStoreIds")
    Foreach(array = $dressStoreIds, key = "storeId")
    {
        $storeItems = GetStoreById(storeId = $storeId)
        Foreach(array = $storeItems, key = "item")
        {
            $itemDict = NewDictionary($item)
            $itemType = DictionaryGet(dict = $itemDict, key = "itemType")
            $itemName = DictionaryGet(dict = $itemDict, key = "itemName")
            $itemId = GetConfigValue(type = "dress", fullName = $itemName, key = "itemId")
            $itemIndex = DictionaryGet(dict = $itemDict, key = "index")
            ForeachDictionary(dict = $responseDict, keyName = "type", valueName = "responseItems")
            {
                If($itemType == $type)
                {
                    Foreach(array = $responseItems, key = "responseItem")
                    {
                        If($itemId == $responseItem)
                        {
                            ChangeStoreItemStatus(storeId = $storeId, index = $itemIndex, status = 1, player = $obj1)
                        }
                    }
                }
            }
        }
    }
    SyncStore(player = $obj1)
}

--打工
GET_TASK_KEY  --随机任务key
{
    If(not $obj1){
        Return()
    }
    $idx = 1
    $count = 0
    Foreach(array = @TASK_WEIGHT, key = "weight"){
        $count = $count + $weight
    }
    $sum = Random(min = 1, max = $count)
    Foreach(array = @TASK_WEIGHT, key = "weight"){
        $sum = $sum - $weight
        If($sum <= 0){
           $index = $idx
           Break()
        }
        $idx = $idx + 1
    }
    $taskIndex = $index
    $taskDict = ArrayGet(array = @TASK_TABLE, index = $index)
    $taskKey = DictionaryGet(dict = $taskDict, key = "taskKey") -- 随机到的任务
    $taskPos = DictionaryGet(dict = $taskDict, key = "pos") -- 随机到的任务NPC ,GPS位置
    $taskNpc = DictionaryGet(dict = $taskDict, key = "npcName") --npc的 fullName
    $npcMap = DictionaryGet(dict = $taskDict, key = "npcMap") --npc的Map
    $succeedMsg = DictionaryGet(dict = $taskDict, key = "succeedMsg")
    $failedMsg = DictionaryGet(dict = $taskDict, key = "failedMsg")
    $taskMap = {
        index = $index,
        taskKey = $taskKey,
        taskPos = $taskPos,
        taskNpc = $taskNpc,
        npcMap = $npcMap,
        succeedMsg = $succeedMsg,
        failedMsg = $failedMsg
    }
    $obj1.dicttaskMap = $taskMap
}
GET_TASK  --接单
{
    CallTrigger(event = "GET_TASK_KEY", object = $obj1)
    $taskMap = $obj1.dicttaskMap
    If(not $taskMap){
        $taskDict = ArrayGet(array = @TASK_TABLE, index = 1)
        $taskMap = {
            taskKey = DictionaryGet(dict = $taskDict, key = "taskKey"),
            taskPos = DictionaryGet(dict = $taskDict, key = "pos"),
            taskNpc = DictionaryGet(dict = $taskDict, key = "npcName"), 
            npcMap = DictionaryGet(dict = $taskDict, key = "npcMap"),
            succeedMsg = DictionaryGet(dict = $taskDict, key = "succeedMsg"),
            failedMsg = DictionaryGet(dict = $taskDict, key = "failedMsg")
        }
    }
    $dictTaskMap = NewDictionary($taskMap)
    $obj1.taskIndex = DictionaryGet(dict = $dictTaskMap, key = "index")
    $obj1.taskKey = DictionaryGet(dict = $dictTaskMap, key = "taskKey")
    $obj1.taskPos = DictionaryGet(dict = $dictTaskMap, key = "taskPos")
    $obj1.taskNpc = DictionaryGet(dict = $dictTaskMap, key = "taskNpc")
    $obj1.npcMap = DictionaryGet(dict = $dictTaskMap, key = "npcMap")
    $obj1.succeedMsg = DictionaryGet(dict = $dictTaskMap, key = "succeedMsg")
    $obj1.failedMsg = DictionaryGet(dict = $dictTaskMap, key = "failedMsg")
    --接受任务，开始任务。
    StartTask(player = $obj1 ,fullName = $obj1.taskKey)
    --得到任务道具，手持
    AddItem(entity = $obj1, cfg = "myplugin/taskItem", count = 1)

    --显示接单GPS
    $obj1.taskShowGps = true
    --更新数据
    CallTrigger(event = "TASK_UPDATE_DATA", object = $obj1)
}
GUIDE_POSITION_CHANGE { --客户端关闭GPS
    If($key == "taskWork"){
        $obj1.taskShowGps = $show
        If($show){
           CallTrigger(event = "TASK_UPDATE_DATA", object = $obj1)
        }
    }ElseIf($show == false){
        $obj1.taskShowGps = false
        CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
    }
}
GET_TASK_UI_DATA(){ --更新打工UI数据。
    $isTasking = false
    If($obj1.taskKey){
        $isTasking = true
    }
    $text = Concat(p1 = $obj1.worktaskCount, p2 = "/", p3 = @NumCycle)
    $rateArray = [0.02, 0.11, 0.35, 0.485, 0.5, 0.52, 0.61, 0.9485, 0.98, 1]
    $rate = 1 - (ArrayGet(array = $rateArray, index = $obj1.worktaskCount) or 0)
    $btnImg = "set:indentImg.json image:BtnGreen.png"
    $taskData = Table(
        Progress =  $rate,
        BtnText = $text,
        gpsPos = $obj1.gpsPos,
        isTasking = $isTasking,
        animation = $animation,
        btnImg = $btnImg,
        resetImg = $resetImg
    )
    If($obj1.taskShowGps){
        CallTrigger(object = $obj1, event = "FUNC_SET_GUIDE_TARGET", pos = $obj1.gpsPos)
    }
    UpdateUIData(player = $obj1, ui = "circleProgress", data = $taskData)
}
GET_TASK_GPS  --得到打工的GPS位置
{
    $map = GetPlayerMap(player = $obj1)
    $owner = GetMapVar(map = $map, key = "owner")
    If($owner){
        $door = GetObjectVar(obj = $owner , key = "insideDoor")
        If($door){
            $obj1.gpsPos = GetEntityPosition(entity = $door)
        }
    }Else{
        $mapName = GetEntityMapName(entity = $obj1)
        If($mapName ~= "map001"){
            $mapEntry = NewDictionary(GetMapConfig(name = $mapName, key = "mapEntry"))
            $cfg = DictionaryGet(dict = $mapEntry, key = "map001")
            $mapEntity = GetMapConfig(name = $mapName, key = "entity")
            $minDis = GetPosDistance()
            Foreach(array = $cfg, key = "cfgName"){
                Foreach(array = $mapEntity, key = "entityDict"){
                    $dict = NewDictionary($entityDict)
                    $name = DictionaryGet(dict = $dict, key = "cfg")
                    If($name == $cfgName){
                        $newPos = DictionaryGet(dict = $dict, key = "pos")
                        $dis = GetPosDistance(pos1 = $okPos, pos2 = $newPos)
                        If(not $okPos || $dis < $minDis){
                            $okPos = $newPos
                            $minDis = $dis
                        }
                    }
                }
            }
            $obj1.gpsPos = $okPos or @INDENT_POS
        }Else{
            $obj1.gpsPos = $obj1.taskPos or  @INDENT_POS
        }
    }
}
TASK_NPC_ADD_BUFF  --给任务npc还动作加buff, 订单NPC加buff动作
{
    --订单NPC
    $checkMax = @workmaxCount <= ($obj1.maxtaskCount or 0)
    --订单NPC新的计算buff方法：
    If(not $obj1.taskKey &&  not $checkMax && not $obj1.punishmentCD && $obj1.lastTaskStatus ~= 1)--未接单
    {   
        $npctaskKey = "myplugin/orderNpc/key_1"
        $obj1.lastTaskStatus = 1
        If($obj1.lastOrderTask){
            CancelTask(player = $obj1, name = $obj1.lastOrderTask)
        }
        StartTask(player = $obj1, fullName = $npctaskKey)
        $obj1.lastOrderTask = $npctaskKey 
    }ElseIf($obj1.taskKey && $obj1.lastTaskStatus ~= 2)--接单后
    { 
        $npctaskKey = "myplugin/orderNpc/key_2"
        $obj1.lastTaskStatus = 2
        If($obj1.lastOrderTask){
            CancelTask(player = $obj1, name = $obj1.lastOrderTask)
        }
        StartTask(player = $obj1, fullName = $npctaskKey)
        $obj1.lastOrderTask = $npctaskKey
    }ElseIf($obj1.punishmentCD && $obj1.lastTaskStatus ~= 3)--放弃惩罚中
    {
        $npctaskKey = "myplugin/orderNpc/key_3"
        $obj1.lastTaskStatus = 3
        If($obj1.lastOrderTask){
            CancelTask(player = $obj1, name = $obj1.lastOrderTask)
        }
        StartTask(player = $obj1, fullName = $npctaskKey)
        $obj1.lastOrderTask = $npctaskKey
    }ElseIf($checkMax && $obj1.lastTaskStatus ~= 4) -- 上限后
    {
        $npctaskKey = "myplugin/orderNpc/key_4"
        $obj1.lastTaskStatus = 4
        If($obj1.lastOrderTask){
            CancelTask(player = $obj1, name = $obj1.lastOrderTask)
        }
        StartTask(player = $obj1, fullName = $npctaskKey)
        $obj1.lastOrderTask = $npctaskKey
    }
}
TASK_UPDATE_DATA(){ --更新打工数据
    CallTrigger(event = "TASK_NPC_ADD_BUFF", object = $obj1) --给对应npc加buff或者换动作
	CallTrigger(event = "GET_TASK_GPS", object = $obj1) --得到GPS位置
    CallTrigger(event = "GET_TASK_UI_DATA", object = $obj1) --更新客户端
}
PUNISH_END(){--惩罚结束
    If($obj1){
        $obj1.punishmentCD = false
        CallTrigger(event = "TASK_UPDATE_DATA", object = $obj1)
    }
}
DELETE_ITEM(){--267.0,19.0,371.0
    --放弃任务
    If($fullName == "myplugin/taskItem" and $obj1.taskKey){
        $obj1.punishmentCD = true
        $obj1.punishTime = GetTime()
        If(@INDENT_MODEL){
            ShowEntityHeadCountDown(show = true, entity = @INDENT_MODEL, player = $obj1, time = @punishmentTime)
            StartTimer(object = $obj1, event = "PUNISH_END", obj2 = @INDENT_MODEL, time = @punishmentTime * 20)
        }
        CancelTask(player = $obj1, name = $obj1.taskKey)
        $obj1.lastTaskKey = $obj1.taskKey
        $obj1.taskNpc = nil
        $obj1.taskKey = nil
        $obj1.taskPos = nil
        $obj1.npcMap = nil
        $obj1.taskIndex = nil
        If($obj1.taskShowGps){
            CallTrigger(object = $obj1, event = "FUNC_SET_GUIDE_TARGET")
        }
        $obj1.taskShowGps = false
        CallTrigger(event = "GET_TASK_GPS", object = $obj1)
        StartTimer(time = 1, event = "TASK_NPC_ADD_BUFF", object = $obj1)
        CallTrigger(event = "GET_TASK_UI_DATA", object = $obj1)
    }
}
MAC_TASK_COUNT_RESET(){--第二天，刷新最大累计
    If($obj1 and IsValidObject(object = $obj1)){
        $obj1.maxtaskCount = 0
        CallTrigger(event = "TASK_UPDATE_DATA", object = $obj1)
    }
}
INIT_WORK_TASK(){ --初始打工
    $tempDay = GetDayOfYear(time = GetTime())
    If($tempDay ~= $obj1.taskLastDay){
        $obj1.worktaskCount = 0
        $obj1.taskLastDay = $tempDay
        $obj1.maxtaskCount = 0
    }
    $taskKey = [
        "myplugin/orderNpc/key_4",
        "myplugin/orderNpc/key_3",
        "myplugin/orderNpc/key_2",
        "myplugin/orderNpc/key_1",
    ]
    Foreach(array = $taskKey, key = "nameKey"){
        CancelTask(player = $obj1, name = $nameKey)
    }
    $nowTime = GetTime()
    If($obj1.punishTime > 0 and $nowTime - $obj1.punishTime < @punishmentTime){
        $remainTime =  @punishmentTime - ($nowTime - $obj1.punishTime)
        $obj1.punishmentCD = true
        If(@INDENT_MODEL){
            ShowEntityHeadCountDown(show = true, entity = @INDENT_MODEL, player = $obj1, time = $remainTime)
            StartTimer(object = $obj1, event = "PUNISH_END", obj2 = @INDENT_MODEL, time = $remainTime * 20)
        }
    }
    $today = GetYearDayStr(time = GetTime())
    $dayEnd = GetDayEndTime(time = GetTime()) - GetTime()
    StartTimer(event = "MAC_TASK_COUNT_RESET", object = $obj1, rep = false, time = $dayEnd * 20)
    $obj1.workday = $today
    $index =  $obj1.taskIndex
    If($index && $index > 0){
        $taskDict = ArrayGet(array = @TASK_TABLE, index = $index)
        $obj1.taskKey = DictionaryGet(dict = $taskDict, key = "taskKey") -- 随机到的任务
        $obj1.taskPos = DictionaryGet(dict = $taskDict, key = "pos") -- 随机到的任务NPC ,GPS位置
        $obj1.taskNpc = DictionaryGet(dict = $taskDict, key = "npcName") --npc的 fullName
        $obj1.npcMap = DictionaryGet(dict = $taskDict, key = "npcMap")
        $obj1.succeedMsg = DictionaryGet(dict = $taskDict, key = "succeedMsg")
        $obj1.failedMsg = DictionaryGet(dict = $taskDict, key = "failedMsg")
    }
    StartTimer(rep = false, time = 1, object = $obj1, event = "TASK_UPDATE_DATA")
    $obj1.isinintTask = true
}
DO_SUBMIT_ORDER(){ --对话
    $obj1.nowSubmitTask = true
    $obj1.taskobjID = GetObjectID(object = $obj2)
    OpenConversation(
        entity = $obj1,
        optionList = [
            {
                triggerName = "SUBMIT_ORDER"
            }
        ],
        optionNpc = "myplugin/player1",
        talkList = [
            {
                msg =  $obj1.succeedMsg or "tr.37965",
                npc = $obj1.taskNpc
            }
        ]
    )
}
SUBMIT_ORDER(){ --对话提交
    If(not $obj1.nowSubmitTask or not $obj1.taskobjID){
        Return()
    }
    $obj2 = GetObject(objID = $obj1.taskobjID)
    $obj1.nowSubmitTask = false
    AddTarget(entity = $obj1, target = $obj2, type = "Interaction")
    DoFinishTask(player = $obj1, name = $obj1.taskKey)
    $obj1.taskobjID = nil
}
FINISH_TASK(debug = false){ --完成打工的对话
    If($obj1.taskKey ~= $name){
       Return()
    }
    If($obj1.taskShowGps){
        CallTrigger(object = $obj1, event = "FUNC_SET_GUIDE_TARGET")
    }
    $obj1.taskShowGps = false
    $obj1.finishworkTime =  StartTimer(object = $obj1, event = "FINISH_AWARD", time = 20)
}
FINISH_AWARD(){ --完成打工的奖励
    $obj1.maxtaskCount = ($obj1.maxtaskCount or 0 ) + 1
    $obj1.worktaskCount = ($obj1.worktaskCount or 0) + 1
    $obj1.workTaskfinish = $obj1.workTaskfinish + 1
    If($obj1.finishworkTime){
        StopTimer(timer = $obj1.finishworkTime)
    }
    $rewDict = DictionaryGet(dict = @worlkMoeny, key =  $obj1.worktaskCount)
    If($rewDict){
        $money = DictionaryGet(dict = $rewDict, key = "money")
        $recfg = DictionaryGet(dict = $rewDict, key = "item")
    }
    If(ArrayFind(array = $obj1.privilege, value = "myplugin/svip_privilege")){ --svip
        $money = DictionaryGet(dict = $rewDict, key = "mvpmoney")
    }
    If($recfg){
        AddItem(entity = $obj1, cfg = $recfg, count = 1)
        ShowRewardItemEffect(type = "Item", count = 1, fullName = $recfg, player = $obj1) -- todo 改变弹窗
    }
    If($money){
        AddCurrency(entity = $obj1, coinName = "green_currency", count = $money)
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "getMoneyTipSoundBuff")
        ShowRewardItemEffect(type = "Coin", count = $money, fullName = "green_currency", player = $obj1)
    }
    $taskItem = searchEquipItem(entity = $obj1, key = "newTaskitem", val = true)
    If(not $taskItem){
        $taskItem = SearchBagItem(entity = $obj1, key = "newTaskitem", val = true)
    }
    $obj1.taskConsumeItem = true
    If($taskItem){
        ConsumeItem(item = $taskItem, num = 1)
    }
    $obj1.taskConsumeItem = false
    $obj1.lastTaskKey = $obj1.taskKey
    $obj1.taskNpc = nil
    $obj1.taskKey = nil
    $obj1.taskPos = nil
    $obj1.npcMap = nil
    $obj1.taskIndex = nil
    $animation = true
    CallTrigger(event = "GET_TASK_GPS", object = $obj1)
    StartTimer(time = 1, event = "TASK_NPC_ADD_BUFF", object = $obj1)
    CallTrigger(event = "GET_TASK_UI_DATA", object = $obj1, closeGps = true, animation = $animation)
}
--公共区域购买，场景商店的购买逻辑
SURE_BUY {
   If($button == "left" or $button == "close"){
      Return()
   }    
   $obj2 = GetObject(objID = $objID)
   If($checkId ~= $obj1.buySessionSS or not $obj2 or not IsValidObject(object = $obj2))
   {
      Return()
   }
   $sellItem = GetConfigVar(obj = $obj2, key = "sellItem")
   $price = GetConfigVar(obj = $obj2, key = "sellPrice")
   $coinId = GetConfigVar(obj = $obj2, key = "coinId")
   $coinName = "green_currency"
   If(not $coinId){
       $coinId = 3
   }
   If($coinId and $coinId == 0){
       $coinName = "gDiamonds"
   }
   $itemName = GetItemCfg(fullName = $sellItem, key = "itemname")
   If(not $price){
       $price = 0
   }
   $enoughMoney = CheckBalance(entity = $obj1, coinName = $coinName, price = $price)
   If($enoughMoney){ --够钱
         $checkBag = AddItem(entity = $obj1, cfg = $sellItem, count = 1)
         If($checkBag ~= false){
			GameAnalyticsCustomEvent(player = $obj1, parts = ["shop:buy:common",
				Concat(p1 = "myplugin_", p2 = FindStr(where_ = "/", back_ = true, str = $sellItem))])
				
            If($coinId == 0){
                BuyGoods(player = $obj1, uniqueId = 20201999,  coinId = $coinId, price = $price, event = "SHOP_BUY_COIN", objID = GetObjectID(object = $obj1), sellItem = $sellItem)
            }Else{
                If(GetItemCfg(fullName = $sellItem, key = "base") == "car_base"){
                    $tipType = 0
                    ShowDialogTip(entity = $obj1, tipType = $tipType,p1="gui.hint",p2="item.pick.bag",p3="sure", event = "OPEN_HINT_BUY",context = {sellItem = $sellItem}
                        ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
                }Else{
                    ShowRewardItemEffect(fullName = $sellItem, count = 1, type = "Item", player = $obj1)
                }
                PayCurrency(entity = $obj1, coinName = $coinName, count = $price)
            }
         }Else{ --背包满了
            ShowTip(textKey = "gui_str_app_shop_inventory_is_full", tipType = 2, entity = $obj1, keepTime = 20)
         }
   }Else{ --不够钱
        CallTrigger(object = $obj1, event = "GO_TO_BUY_UI", coinName = $coinName)
   }
}
OPEN_HINT_BUY()
{
    ShowRewardItemEffect(fullName = $sellItem, count = 1, type = "Item", player = $obj1)
}
SHOP_BUY_COIN {
    $dict = NewDictionary($response)
    $objID = DictionaryGet(dict = $dict, key = "objID")
    $obj1 = GetObject(objID = $objID)
    $sellItem = DictionaryGet(dict = $dict, key = "sellItem")
    If($isSucceed and $obj1){
        If(GetItemCfg(fullName = $sellItem, key = "base") == "car_base"){
            $tipType = 0
            ShowDialogTip(entity = $obj1, tipType = $tipType,p1="gui.hint",p3="gui.hint.btn",p2="item.pick.bag", event = "OPEN_HINT_BUY",context = {sellItem = $sellItem}
                ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
        }Else{
            ShowRewardItemEffect(fullName = $sellItem, count = 1, type = "Item", player = $obj1)
        }
    }ElseIf($obj1){
        ShowRecharge(player = $obj1)
        ShowTip(textKey = "app_shop_lack_of_money", tipType = 2, entity = $obj1, keepTime = 20)
    }
}
--区域购买逻辑： 领主家里买厨具，食物，
SURE_FURNITURE_BUY {
   If($button == "left" or $button == "close"){
      Return()
   }
   If(not $owner and $obj2){
       $owner = GetOwner(entity = $obj2)
   }
   If(not $price){
       $price = 0
   }
   $coinName = "green_currency"
   $itemName = GetItemCfg(fullName = $sellItem, key = "itemname")
   $enoughMoney = CheckBalance(entity = $obj1, coinName = $coinName, price = $price)
   If($enoughMoney){ --够钱
         $checkBag = AddItem(entity = $obj1, cfg = $sellItem, count = 1)
         If($checkBag ~= false){
            PayCurrency(entity = $obj1, coinName = $coinName, count = $price)
            If(not $isTeam and $owner){ --不是一个家庭给领主加钱
               --ShowTip(textKey = "ui_buy_success", tipType = 2, entity = $obj1, keepTime = 20)
                ShowRewardItemEffect(fullName = $sellItem, count = 1, type = "Item", player = $obj1)
               $name = GetEntityName(entity = $obj1)
               If(IsPlayer(entity = $owner)){
                    ShowTip(textKey = "gui_buys_your_stuff",textP1 = $name, textP2 = $itemName, tipType = 2, entity = $owner, keepTime = 20)
                    AddCurrency(entity = $owner, coinName = $coinName, count = $price)
                    CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $owner, buffKey = "getMoneyTipSoundBuff")
                    ShowRewardItemEffect(type = "Coin", count = $price, fullName = "green_currency", player = $owner)
               }
            }Else{
               ShowRewardItemEffect(fullName = $sellItem, count = 1, type = "Item", player = $obj1)
               --ShowTip(textKey = "gui_gain_item_success",textP1 = $itemName, tipType = 2, entity = $obj1, keepTime = 20)
            }
         }Else{ --背包满了
            ShowTip(textKey = "gui_str_app_shop_inventory_is_full", tipType = 2, entity = $obj1, keepTime = 20)
         }
   }Else{ --不够钱
      CallTrigger(object = $obj1, event = "GO_TO_BUY_UI", coinName = $coinName)
   }
}
--不询问,直接打开金币/魔方商店
GO_TO_BUY_UI{
    If($coinName == "gDiamonds"){
        ShowRecharge(player = $obj1)
    }Else{
        ShowGoldShop(player = $obj1, show = true)
    }
}
--询问打开购买金币/魔方商店
CHOICE_OPEN_BUY(debug = true){
    $msg = $coinName == "gDiamonds" and "pay_failure_gDiamonds_insufficient" or "pay_failure_game_money_insufficient"
    $tipType = 2
    ShowDialogTip(entity = $obj1, tipType = $tipType, event = "OPEN_BUY_COIN",p1 = $msg, context = {coinName = $coinName}
        ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
}
OPEN_BUY_COIN()
{
    If($result == false){
        Return()
    }
    If($coinName == "gDiamonds"){
        ShowRecharge(player = $obj1)
    }Else{
        ShowGoldShop(player = $obj1, show = true)
    }
}
--特权购买成功
ENTITY_BUY_APPSTOP {
    If($shopType == 2){
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "inviteJoinFamilyBuff")
    }
    If($itemName == "myplugin/broadcast_party_invite"){
        $addItem = false
    }
    $dict = NewDictionary(Copy(value = $shop))
    $shopType = DictionaryGet(dict = $dict, key = "type")
    $itemIndex = DictionaryGet(dict = $dict, key = "index")
    $index = ArrayFind(array = $obj1.privilege, value = $itemName)
    GameAnalyticsCustomEvent(player = $obj1, parts = ["shop:buy", $shopType, $itemIndex])
    If($shopType == "1" && not $index and $limit ~= -1){
        $addItem = false
        $goodsDict = NewDictionary($obj1.goodsInfo)
        $limit = $limit - DictionaryGet(dict = $goodsDict, key = $itemIndex)
        
        ArrayAppend(array = $obj1.privilege, value = $itemName)
        CallTrigger(obj1 = $obj1, event = "BUY_PRIVILEGE_SUCCEED", shopIndex = $itemIndex, privilegeName = $itemName)
        If($itemName == "myplugin/svip_privilege"){
            ShowToolBarButton(name = "svip", show = true, player = $obj1)
            CallTrigger(obj1 = $obj1, event = "ADD_SVIP_BUFF", object = $obj1)
        }
        If($itemName == "myplugin/home_privilege"){ --购买租地特权，把房子移到公共区域
            UploadPrivilege(player = $obj1) --上报租地特权
        }
    }
    If($shopType ~= "1"){
        Return()
    }
    If(GetItemCfg(fullName = $itemName, key = "base") == "car_base"){
        $tipType = 0
        ShowDialogTip(entity = $obj1, tipType = $tipType,p1="gui.hint",p2="item.pick.bag",p3="sure", event = "OPEN_HINT_BUY",context = {sellItem = $itemName}
            ,dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }Else{
        ShowRewardItemEffect(fullName = $itemName, count = 1, type = "Item", player = $obj1)
    }
}
UPLOAD_PRIVILEGE_SUCCEED(){-- 购买租地特权成功，重新分配服务器
    $obj1.hasRelease = true
    Test("BUY_SUCCEED :", GetPlayerUserID(player = $obj1))
    ReleaseManor(player = $obj1)
    $player.jumpSeverToSpecial = true
    ReenterGame(player = $obj1)
}
--弹窗购买特权
POP_UP_BUY_PRIVILEGE 
{
    If(not $shopIndex || not GetShopItem(shopIndex = $shopIndex, key = "price"))
    {
        Return()
    }
    $obj1.checkprid = ($obj1.checkprid or 0 ) + 1
    $price = GetShopItem(shopIndex = $shopIndex, key = "price")
    $itemdesc = GetShopItem(shopIndex = $shopIndex, key = "desc")
    $itemName = GetShopItem(shopIndex = $shopIndex, key = "itemName")
    $descName = GetShopItem(shopIndex = $shopIndex, key = "name")
    $hintImage = GetItemCfg(fullName = $itemName, key = "hintImage")
    $Context = {
        seccionid = $obj1.checkprid,
        shopIndex = $shopIndex,
        buyResultEvent = $buyResultEvent
    }
    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_cancel",
        rightCoinId = 0,
        rightContent = $price
    }
    $content = {
        msg = "gui_sure_buy_this",
        args = [$itemdesc]
    }
    ShowShopItemDetail(player = $obj1, event = "SURE_BUY_PRI", eventNo = "POP_PRI_NO", context = $Context, hintImage = $hintImage, price = $price, desc = $itemdesc, tip = $descName)
    --ShowDialogTip(entity = $obj1, tipType = 5, event = "SURE_BUY_PRI", p1 = "ui_tip", p2 = $content, p3 = $btnInfo, context = $Context)
}
POP_PRI_NO()
{
    CallTrigger(object = $obj1, event = $buyResultEvent, succeed = false, shopIndex = $shopIndex)
}
SURE_BUY_PRI 
{
    If($button == "left" or $button == "close"){
        CallTrigger(object = $obj1, event = $buyResultEvent, succeed = false, shopIndex = $shopIndex)
        Return()
    }
 
    If($seccionid ~= $obj1.checkprid or not $shopIndex)
    {
        Return()
    }

    $obj1.checkbuyData = [
        $shopIndex,
        $buyResultEvent
    ]
    RequestCanBuy(shopIndex = $shopIndex, player = $obj1, count = 1)
}

ENTITY_BUY_RESULT()
{
    If($obj1.checkbuyData){
        $nowBuyIndex = ArrayGet(array = $obj1.checkbuyData, index = 1)
        $event = ArrayGet(array = $obj1.checkbuyData, index = 2)
        If($nowBuyIndex == $itemIndex){
            $obj1.checkbuyData = nil
            CallTrigger(object = $obj1, event = $event, succeed = $succeed, shopIndex = $itemIndex)
            --ShowTip(textKey = $msg, tipType = 2, entity = $obj1, keepTime = 20)
            If(not $succeed and $msg ~= "gui_str_app_shop_insufficient_inventory"){
                CallTrigger(object = $obj1, event = "GO_TO_BUY_UI", coinName = "gDiamonds")
            }ElseIf($succeed){
                $itemName = GetShopItem(shopIndex = $itemIndex, key = "itemName")
                --ShowRewardItemEffect(type = "Item", count = 1, fullName = $itemName, player = $obj1)
            }
        }
    }
}

GIVE_AWAY{
    If($targetBagNotFree){
        ShowWarmPrompt(player = $obj1, text = "giveaway.self.bag.full", btnText = "ui_sure")
        ShowWarmPrompt(player = $obj2, text = "giveaway.target.bag.full", btnText = "ui_sure")
        Return()
    }
    If(GetItemCfg(fullName = $cfg, key = "base") == "car_base"){
        $tipType = 0
        ShowDialogTip(entity = $obj1, tipType = $tipType,p1="gui.hint",p2="item.pick.bag",p3="sure"
            ,dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
    AddItem(entity = $obj1, cfg = $cfg, count = $count or 1)
}

CLEAR_EQUIP_CAR_CD{
    $obj1.equipCarCd = nil
}

EQUIP_CAR {
    $obj1.equipCarCd = true
    StartTimer(time = 8,object = $obj1, event = "CLEAR_EQUIP_CAR_CD")
    $mapName = GetEntityName(entity = GetEntityMap(entity = $obj1))
    If($mapName ~= "map001" && $mapName ~= "map002")
    {
        Return()
    }
	-- 栋哥哥说去掉，怕以后加回去就先注释了
    -- If(not GetEntityOnGround(entity = $obj1))
    -- {
    --     ShowTip(entity = $obj1, tipType = 2, textKey = "create_car_in_the_air", keepTime = 40)
    --     Return()
    -- }

    If($obj1.createdCar)
    {
        CallTrigger(object = $obj1, event = "TAKEOFF_EQUIP_CAR")
    }
    CallTrigger(obj1 = $obj1, event = "PLAYER_CLEAR_RIDE")
    $pos = GetEntityPosition(entity = $obj1)
    $newPos = ComputeV3(op = "add", p1= $pos, p2 = {x = 0, y = 2, z = 0})
    $yaw = GetEntityYaw(entity = $obj1)
    $car = CreateNpc(cfgName = $carName, pos = $newPos, map = GetEntityMap(entity = $obj1), owner = $obj1, ry = $yaw)
    If(not $car)
    {
        Test( $carName ,  "   Bts Function [ EQUIP_CAR ] :  Car not found by name ")
        Return()
    }

    $obj1.createdCar = $car
    RideOn(entity = $obj1, target = $car)
}

DEBARK {
	Dismount(entity = $obj1)
}

TAKEOFF_EQUIP_CAR
{
    $car = $obj1.createdCar
    $obj1.createdCar = nil

    If(not $car)
    {
        Return()
    }

    $passengers = NewDictionary(GetPassengers(entity = $car))
    ForeachDictionary(dict = $passengers, keyName = "key", valueName = "val")
    {
        If(GetObject(objID = $val) ~= $obj1)
    {
        ShowTip(entity = GetObject(objID = $val), tipType = 2, textKey = "car_owner_already_remove_car", keepTime = 40)
    }
    }
    ClearRide(entity = $car)
    KillEntity(entity = $car)
}

EQUIP_ITEM_IMMEDIATELY --params: item
{
	If(GetItemVar(item = $item, key = "equipFlag"))
	{
		Return()
	}

	$typeIndex = GetConfigVar(obj = $item, key = "typeIndex")
	If($typeIndex ~= 1 )
	{
		$disableHand = GetConfigVar(obj = $item, key = "disableHand")
		If($disableHand)
		{
			Return()
		}
		SetItemUse(entity = $obj1, item = $item, isUse = true)
		Return()
	}
	$immediately = $item and GetConfigVar(obj = $item, key = "equipImmediately")
    If(not $immediately )
    {
        Return()
    }
    SetItemUse(entity = $obj1, item =$item, isUse = true)
	--EquipItem(entity = $obj1, item = $item)
}

EQUIP_BABY_TROLLEY --params: cfgPath
{
    If(not $cfgPath)
    {
        Return()
    }
	-- 栋哥哥说去掉，怕以后加回去就先注释了
    -- If(not GetEntityOnGround(entity = $obj1))
    -- {
    --     ShowTip(entity = $obj1, tipType = 2, textKey = "create_car_in_the_air", keepTime = 40)
    --     Return()
    -- }

    If($obj1.createdTrolley)
    {
        CallTrigger(object = $obj1, event = "DEMOUNT_BABY_TROLLEY")
    }
    $trolley = CreateNpc(cfgName = $cfgPath, pos = GetEntityPosition(entity = $obj1), map = GetEntityMap(entity = $obj1), owner = $obj1)
    If($trolley)
    {
        $trolley.role = nil
        CallTrigger(obj1 = $obj1, event = "PLAYER_CLEAR_RIDE")
        $obj1.trolleyBuff = AddEntityBuff(entity = $obj1, cfg = GetConfigVar(obj = $trolley, key = "attachBuff"))
        SetObjectVar(obj = $obj1, key = "createdTrolley", value = $trolley)
        CallTrigger(object = $obj1, event = "CHANGE_BABY_TROLLEY_SCALE")
    }
}

DEMOUNT_BABY_TROLLEY
{
    If($obj1.createdTrolley && not $obj1.demounttingTrolley && not $obj1.keepCreatedTrolley)
    {
        $obj1.demounttingTrolley = true
        $passengers = NewDictionary(GetPassengers(entity = $obj1.createdTrolley))
        ForeachDictionary(dict = $passengers, keyName = "key", valueName = "val")
        {
            If(GetObject(objID = $val) ~= $obj1)
            {
            ShowTip(entity = GetObject(objID = $val), tipType = 2, textKey = "car_owner_already_remove_car", keepTime = 40)
        }
        }
        ClearRide(entity = $obj1.createdTrolley)
        RemoveEntityBuff(entity = $obj1.createdTrolley, buff = GetObjectVar(obj = $obj1.createdTrolley, key = "scaleBuff"))
        RemoveEntityBuff(entity = $obj1, buff = $obj1.trolleyBuff)
        KillEntity(entity = $obj1.createdTrolley)
        $obj1.trolleyBuff = nil
        $obj1.createdTrolley = nil
        $obj1.demounttingTrolley = nil
    }
}

CHANGE_BABY_TROLLEY_SCALE
{
    $trolley = $obj1.createdTrolley
    $useTrolley = $obj1.useTrolley
    If($trolley && (not $trolley.role || ($trolley.role && $trolley.role ~= $obj1.role)))
    {
		$obj1.keepCreatedTrolley = true
		$obj1.dontClearItem = true
		ClearRide(entity = $trolley)
		$obj1.dontClearItem = false
        If($trolley.scaleBuff)
        {
            RemoveEntityBuff(entity = $trolley, buff = $trolley.scaleBuff)
        }
        SetObjectVar(obj = $obj1.createdTrolley, key = "scaleBuff", value = AddEntityBuff(
            entity = $obj1.createdTrolley, 
            cfg = $obj1.role == @adult and GetConfigVar(obj = $trolley, key = "trolleyAdult") or GetConfigVar(obj = $trolley, key = "trolleyChild")
        ))
        SetObjectVar(obj = $obj1.createdTrolley, key = "role", value = $obj1.role)
        RideOn(entity = $obj1, ctrl = true, target = $obj1.createdTrolley, targetIndex = $obj1.role == @adult and 2 or 1) --推车人
        $obj1.keepCreatedTrolley = nil
    }
    ElseIf(not $trolley && $useTrolley && $obj1.role == @adult) --乘客变成大人，应该让其下手推车
    {
        ClearRide(entity = $obj1)
    }
}

START_CAMERA_MODE
{
    --和状态查看界面互斥，只要 $obj1.showFuncId 有值就不执行下面的逻辑
    If($obj1.showFuncId)
    {
        Return()
    }
    
    If(not IsCameraMode(player = $obj1))
    {
        If($obj1.boundingBuff){
            RemoveEntityBuff(entity = $obj1, buff = $obj1.boundingBuff)
        }

        -- 保留的窗口
        -- actionControl -> jump and move, skills -> just skill
        $obj1.showFuncId = HideOpenedWnd(player = $obj1, excluded = {
                    a = "actionControl",b = "skills", c = "title1", 
                    d = "title3", e = "title4", f = "title5"
        })

        ForLoop(from = 1, to = ArraySize(array = $obj1.outOfCameraModeState), key = "idx")
        {
            $state = ArrayGet(array = $obj1.outOfCameraModeState, index = $idx)
            $keyStr = Concat(p1 = "myplugin/skill_state_", p2 = $state)
            RemoveSkill(entity = $obj1, name = $keyStr)
        }
        CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
        SetCameraMode(player = $obj1, isOpen = true)
        HideInteractionWindow(player = $obj1)
        $obj1.cameraModeCloseBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/camera_mode_close")
        $obj1.cameraModeTakePhotosBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/camera_mode_take_photos")
        OperationWindows(player = $obj1, isOpen = false, win = "main_tray_g2020")
    }
}

STORE_ITEM_OPERATION_PRIVILEGE
{
    $index = GetShopItemIndex(itemName = "myplugin/dance_privilege") or $shopIndex or 4
    CallTrigger(obj1 = $obj1, event = "POP_UP_BUY_PRIVILEGE", shopIndex = $index)
}

BUY_PRIVILEGE_SUCCEED
{
    If($privilegeName == "myplugin/dance_privilege")
    {
        $danceStoreId = GetWorldVar(key = "danceStoreId")
        $storeItems = GetStoreById(storeId = $danceStoreId)
        Foreach(array = $storeItems, key = "value")
        {
            $dictValue = NewDictionary($value)
            $dictStoreId = DictionaryGet(dict = $dictValue, key = "storeId")
            $dictItemIndex = DictionaryGet(dict = $dictValue, key = "index")
            $dictShopIndex = DictionaryGet(dict = $dictValue, key = "shopIndex")

            If($dictShopIndex == $shopIndex)
            {
                SyncStoreItemStatus(player = $obj1, storeId = $dictStoreId, index = $dictItemIndex, status = 1)
            }
        }
    }
}


SHOW_CASH_BOX_INPUT_DIALOG
{
    $title = {
        name = "ui_cash_box_title_name"
    }

    $inputTitle = {
        name = "ui_cash_box_input_name"
    }

    $buttons = [
        {
            event = "cancel",
            normalImage = "set:tip_dialog.json image:btn_big_blue",
            pushedImage = "set:tip_dialog.json image:btn_big_blue",
            name = "ui_cancel"
        },
        {
            event = "CASH_BOX_BUTTON_SURE",
            normalImage = "set:tip_dialog.json image:btn_big_green",
            pushedImage = "set:tip_dialog.json image:btn_big_green",
            name = "ui_sure"
        }
    ]

    $options = {
        ownerId = $ownerId
    }

    $contents = {
        title = $title,
        inputTitle = $inputTitle,
        buttons = $buttons,
        text = $name,
        inputMode = 2
    }

    ShowInputDialog(entity = $obj1, contents = $contents, options = $options)
}

CASH_BOX_BUTTON_SURE
{
    $money = ToNumber($name)
    If(not IsNumber($money))
    {
        ShowTip(entity = $obj1, tipType = 2, textKey = "gui_cashbox_only_number", keepTime = 40)
        Return()
    }

    If($money // 1 ~= $money)
    {
        ShowTip(entity = $obj1, tipType = 2, textKey = "gui_cashbox_only_number", keepTime = 40)
        Return()
    }
    Else
    {

        If($money <= 0 or $money > 100)
        {
            ShowTip(entity = $obj1, tipType = 2, textKey = "gui_cashbox_only_number", keepTime = 40)
            Return()
        }

        $owner = GetObject(objID = $ownerId)
        If(not $owner or not IsPlayer(entity = $owner))
        {
            Return()
        }

        If(not PayCurrency(entity = $obj1, coinName = "green_currency", count = $money))
        {
            ShowTip(entity = $obj1, tipType = 2, textKey = "gui_cashbox_not_enough_number", keepTime = 40)
            Return()
        }

        AddCurrency(entity = $owner, coinName = "green_currency", count = $money)
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $owner, buffKey = "getMoneyTipSoundBuff")
        ShowRewardItemEffect(type = "Coin", count = $money, fullName = "green_currency", player = $owner)
        ShowTip(entity = $owner, tipType = 2, textKey = "gui_cashbox_get_money", textP1 = GetEntityName(entity = $obj1), textP2 = $money, keepTime = 40)
    }
}

PICK_HAND_ITEM {
    $canHandMap = GetConfigVar(obj = GetEntityHandItem(entity = $obj1), key = "canHandMap")
    $playerCurMap = GetEntityMapName(entity = $obj1)
    If ($canHandMap and $playerCurMap ~= $canHandMap)
    {
		-- SetHandItem(player = $obj1)
		--这里要改
    }
}

TRAY_PICK_ITEM {
	CallTrigger(event = "TAKEOFF_ITEM", obj1 = $obj1, item = $item)
    $typeIndex = GetConfigVar(obj = $item, key = "typeIndex")
	If($typeIndex ~= 3)
	{
		--SetHandItem(player = $obj1)
		--RemoveEntityTypeBuff(entity = $obj1, key = "type", value = "HandBuff")
	}
}

ENTER_EQUIPMEN {
    $canHandMap = GetConfigVar(obj = $item, key = "canHandMap")
    $playerCurMap = GetEntityMapName(entity = $obj1)
    If ($canHandMap and $playerCurMap ~= $canHandMap)
    {
        Return()
	}
    If(IsDrive(entity = $obj1))
    {
        Return()
    }
	--EquipItem(entity = $obj1, item = $item)
    CallTrigger(object = $obj1, event = "EQUIP_ITEM_IMMEDIATELY", item = $item)
}

ENTER_MAP
{
    CallTrigger(object = $obj1, event = "FUNC_UPDATE_STATE_SKILL_JACK_AREA")
    $obj1Map = GetEntityMap(entity = $obj1)
    $obj1MapOwner = GetMapVar(map = $obj1Map, key = "owner")
    If(not $obj1MapOwner or ($obj1MapOwner ~= GetObjectVar(obj = $obj1, key = "house"))){
        ShowTitleBarPage(entity = $obj1, closeWin = true)
        ShowGenericActorShowStore(entity = $obj1, closeWin =true)
    }ElseIf($obj1MapOwner or ($obj1MapOwner == GetObjectVar(obj = $obj1, key = "house"))){
        CallTrigger(object = $obj1, event = "SHOW_TITLE_BAR")
    }
    If(not $obj1MapOwner){
        SetObjectVar(obj = $obj1, key = "lastInsideRegion", value = nil)
    }
    CallTrigger(object = $obj1, event = "PICK_HAND_ITEM", obj1 = $obj1)
    If(GetEntityMapName(entity = $obj1) == "map001") 
    {
        WorksWallsOperation(player = $obj1, isOpen = true)
        CallTrigger(player = $obj1, event = "SYNC_CUR_WALL_WORKS")
    }
    CallTrigger(object = $obj1, event = "FUNC_STATE_MAP_OPERATION", map = $map, isLeave = false)
    CallTrigger(event = "FUNC_GPS_SET_OR_SYNC", object = $obj1, gpsDict = GetObjectVar(obj = $obj1, key = "gpsDict"))
    CallTrigger(object = $obj1, event = "TASK_UPDATE_DATA") --打工导航/不止是导航
    CallTrigger(event = "ENTER_HOUSE_MAP", object = $obj1)
    CallTrigger(event = "UPDATE_PLAYER_ALL_NUMBER_BOARD_ENTITY", object = $obj1, show = true)
    --指引导航
    CallTrigger(event = "SHOW_GO_GIFT_GPS", object = $obj1)
    ShowWhiteScreen(player = $obj1)
    AddEntityBuff(entity = $obj1, cfg = "myplugin/freeze_buff", buffTime = 80)
}

LEAVE_MAP
{
    CallTrigger(object = $obj1, event = "FUNC_UPDATE_STATE_SKILL_JACK_AREA")
    If(GetEntityMapName(entity = $obj1) == "map001") 
    {
        WorksWallsOperation(player = $obj1, isOpen = false)
    }
    CallTrigger(object = $obj1, event = "FUNC_STATE_MAP_OPERATION", map = $map, isLeave = true)
    CallTrigger(event = "UPDATE_PLAYER_ALL_NUMBER_BOARD_ENTITY", object = $obj1, show = false)

    If($map.owner == $obj1.house)
    {
        CallTrigger(object = $obj1, event = "SAVE_FURNITURE")
        ShowGenericActorShowStore(entity = $obj1, closeWin =true)

        $lastInteractionUiObjId = GetObjectVar(obj = $obj1, key = "lastInteractionUiObjId")
        If($lastInteractionUiObjId){
            UpdateEntityEditContainer2(player = $obj1, entityId = $lastInteractionUiObjId, show = false)
            SetObjectVar(obj = $obj1, key = "lastInteractionUiObjId", value = nil)
        }
    }
}

CREATE_PLAYER_SINGLE_NUMBER_BOARD_ENTITY
{
    If(not $npc)
    {
        Return()
    }
    $typeOf3DUI = GetConfigVar(obj = $npc, key = "typeOf3DUI")
    If($typeOf3DUI and $typeOf3DUI == "numberBoard")
    {
        $map = GetEntityMap(entity = $npc)
        $players = GetMapPlayer(map = $map)
        $playerCount = ArraySize(array = $players)

        $width = 0
        $height = 0
        $title = ""
        $textColor = [255, 255, 255]
        $titleColor = [255, 255, 255]
        $position = {
            x = 0,
            y = 0,
            z = 0,
        }

        $rotate = {
            x = 0,
            y = 0,
            z = 0,
        }

        $objID = GetObjectID(object = $npc)
        $position = GetConfigVar(obj = $npc, key = "position") or $position
        $width = GetConfigVar(obj = $npc, key = "width") or $width
        $height = GetConfigVar(obj = $npc, key = "height") or $height
        $textColor = GetConfigVar(obj = $npc, key = "textColor") or $textColor
        $title = GetConfigVar(obj = $npc, key = "title") or $title
        $titleColor = GetConfigVar(obj = $npc, key = "titleColor") or $titleColor
        $rotate = GetConfigVar(obj = $npc, key = "rotate") or $rotate

        $data = {
            key = ToString($objID),
            name = "numberBoard",
            width = $width,
            height = $height,
            position = $position,
            rotate = $rotate,
            args = {
                text = $playerCount,
                textColor = $textColor,
                title = $title,
                titleColor = $titleColor,
            }
        }

        AddEntitySceneUI(entity = $npc, data = $data)
    }
}

UPDATE_PLAYER_ALL_NUMBER_BOARD_ENTITY
{
    $map = GetEntityMap(entity = $obj1)
    $house = GetMapVar(map = $map, key = "owner")
    If(not $house)
    {
        Return()
    }

    $owner = $house.owner
    If(not $owner)
    {
        Return()
    }

    $entityOf3DUI = $owner.entityOf3DUI
    $entityOf3DUIDict = NewDictionary($entityOf3DUI)
    $showNumEntitys = DictionaryGet(dict = $entityOf3DUIDict, key = "numberBoard") or {}
    Foreach(array = $showNumEntitys, key = "objID")
    {
        $players = GetMapPlayer(map = $map)
        $playerCount = ArraySize(array = $players)
        If($show == false)
        {
            $playerCount = $playerCount - 1
        }

        $width = 0
        $height = 0
        $title = ""
        $textColor = [255, 255, 255]
        $titleColor = [255, 255, 255]
        $position = {
            x = 0,
            y = 0,
            z = 0,
        }

        $rotate = {
            x = 0,
            y = 0,
            z = 0,
        }

        $npc = GetObject(objID = $objID)
        If($npc)
        {
            $position = GetConfigVar(obj = $npc, key = "position") or $position
            $width = GetConfigVar(obj = $npc, key = "width") or $width
            $height = GetConfigVar(obj = $npc, key = "height") or $height
            $textColor = GetConfigVar(obj = $npc, key = "textColor") or $textColor
            $title = GetConfigVar(obj = $npc, key = "title") or $title
            $titleColor = GetConfigVar(obj = $npc, key = "titleColor") or $titleColor
        }

        $data = {
            key = ToString($objID),
            name = "numberBoard",
            width = $width,
            height = $height,
            position = $position,
            rotate = $rotate,
            args = {
                text = $playerCount,
                textColor = $textColor,
                title = $title,
                titleColor = $titleColor,
            }
        }

        RefreshEntitySceneUI(entity = $npc, data = $data)
    }
}

CREATE_PLAYER_SINGLE_BLACK_BOARD_ENTITY
{
    If(not $npc)
    {
        Return()
    }

    $typeOf3DUI = GetConfigVar(obj = $npc, key = "typeOf3DUI")
    If($typeOf3DUI and $typeOf3DUI == "blackBoard")
    {
        $width = 0
        $height = 0
        $text = ""
        $position = {
            x = 0,
            y = 0,
            z = 0,
        }

        $rotate = {
            x = 0,
            y = 0,
            z = 0,
        }

        $objID = 0
        If($npc)
        {
            $position = GetConfigVar(obj = $npc, key = "position") or $position
            $width = GetConfigVar(obj = $npc, key = "width") or $width
            $height = GetConfigVar(obj = $npc, key = "height") or $height
            $rotate = GetConfigVar(obj = $npc, key = "rotate") or $rotate
            $text = $npc.blackboardStr or $text
            $objID = GetObjectID(object = $npc)
        }

        $data = {
            key = ToString($objID),
            name = "blackBoard",
            width = $width,
            height = $height,
            position = $position,
            rotate = $rotate,
            args = {
                text = $text
            }
        }

        AddEntitySceneUI(entity = $npc, data = $data)
    }
}

UPDATE_SINGLE_BLACK_BOARD_ENTITY
{
    $width = 0
    $height = 0
    $text = ""
    $position = {
        x = 0,
        y = 0,
        z = 0,
    }

    $rotate = {
        x = 0,
        y = 0,
        z = 0,
    }

    $objID = 0
    If($npc)
    {
        $position = GetConfigVar(obj = $npc, key = "position") or $position
        $width = GetConfigVar(obj = $npc, key = "width") or $width
        $height = GetConfigVar(obj = $npc, key = "height") or $height
        $text = $npc.blackboardStr or $text
        $objID = GetObjectID(object = $npc)
    }
    
    $data = {
        key = ToString($objID),
        name = "blackBoard",
        width = $width,
        height = $height,
        position = $position,
        rotate = $rotate,
        args = {
            text = $text
        }
    }

    RefreshEntitySceneUI(entity = $npc, data = $data)
}
DATA_REPORT_ADD_FRIEND{
    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.addFriendCount, array = [0, 9, 19, 49, 99, 199,  499, 999, 1999, 4999, 9999, 10000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:friend:request:sum", @rangeBoundary])
    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.addFriendCountPerGame, array = [0, 2, 5, 10, 11])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:friend:request:single_game", @rangeBoundary])
}
ON_ADD_FRIEND{
    $obj1.addFriendCount = $obj1.addFriendCount + 1
    $obj1.addFriendCountPerGame = $obj1.addFriendCountPerGame + 1
}
--↓↓↓↓↓↓ party
CHECK_LEAVE_PARTY_FROM_DOOR {
    $tipType = 2
    If($obj1.inSelfParty == 1){
        ShowDialogTip(entity = $obj1, p1 = "gui.party.ask.close", event = "CHECK_CLOSE_PARTY", tipType = $tipType
            ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
    Else{
        ShowDialogTip(entity = $obj1, p1 = "gui.party.ask.exit", event = "ASK_LEAVE_PARTY", tipType = $tipType
            ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
}
PLAYER_BE_INVITE {
    --player guide undone
    If($obj1.guideStep ~= @GuideEnd){
        Return()
    }
    --party invite will call PLAYER_BE_INVITE_OTHER_SERVER
    $userId = GetPlayerUserID(player = $obj1)
    $inPartyOwnerId = $obj1.inPartyOwnerId
    If($inPartyOwnerId ~= 0){
        Return()--in party
    }
    -- $obj1.visitTarget = $obj2
    $context = {visitTargetObjectId = GetObjectID(object = $obj2)}

    CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "inviteFriendBuff")
    $contentDict = NewDictionary($content)
    $nickName = DictionaryGet(dict = $contentDict, key = "nickName")
    $showTime = DictionaryGet(dict = $contentDict, key = "showTime")
    $picUrl = DictionaryGet(dict = $contentDict, key = "picUrl")
    
    $buttonInfo = [
        {
            normalImage = "set:invite_tip.json image:green_btn",
            pushedImage = "set:invite_tip.json image:green_btn",
            pushInTextTimer = true,
            text = "ui_sure"
        },
        {
            normalImage = "set:invite_tip.json image:blue_btn",
            pushedImage = "set:invite_tip.json image:blue_btn",
            text = "ui_cancel"
        }
    ]

    $content = {
        msg = "gui_friend_invite_notice",
        args = [
            $nickName
        ]
    }

    $fullName = "myplugin/friendInviteView"
    $eventMap = {
        button1 = "PLAYER_ON_VISIT",
        button2 = "PLAYER_BE_INVITE_REFUSE",
        autoClose = "FRIEND_INVITE_AUTO_CLOSE",
    }
    ShowInviteTipByScript(context = $context, player = $obj1, buttonInfo = $buttonInfo, pic = $picUrl, content = $content, fullName = $fullName, showTime = $showTime, eventMap = $eventMap)

}

---party invite ↓↓
DATA_REPORT_PARTY_INVITE{
    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.partyInviteAutoClose, array = [0, 2, 5, 10, 15, 20, 21])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:party:no_response", @rangeBoundary])

    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.partyInviteReceiveCount, array = [0, 2, 5, 10, 15, 20, 21])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:party:receive", @rangeBoundary])

    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.partyInviteRefuse, array = [0, 2, 5, 10, 15, 20, 21])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:party:deny", @rangeBoundary])
}
PARTY_INVITE_AUTO_CLOSE(debug1 = true){
    $obj1.partyInviteAutoClose = $obj1.partyInviteAutoClose + 1
}

JOIN_PARTY_REFUSE(debug1 = true){
    $obj1.partyInviteRefuse = $obj1.partyInviteRefuse + 1
    $obj1.partyInfo = nil
}

JOIN_PARTY_ARGEE(debug1 = true){
    $obj1.partyInviteAgree = $obj1.partyInviteAgree + 1
    $obj1.partyInfo = $partyInfo
    CallTrigger(event = "PLAYER_ON_VISIT_OTHER_SERVER", object = $obj1, visitTargetUserId = $visitTargetUserId)
}
---party invite ↑↑

------cross server invite ↓↓
-- PLAYER_BE_INVITE_OTHER_SERVER_REFUSE
-- FRIEND_INVITE_OTHER_SERVER_AUTO_CLOSE
------cross server invite ↑↑
----- same server invite ↓↓
-- PLAYER_BE_INVITE_REFUSE(debug = true){}
-- FRIEND_INVITE_AUTO_CLOSE(debug = true){}
----- same server invite ↑↑
    
PLAYER_BE_INVITE_OTHER_SERVER(debug = false){
    If($obj1.guideStep ~= @GuideEnd){
        Return()
    }
    $userId = GetPlayerUserID(player = $obj1)
    $inPartyOwnerId = $obj1.inPartyOwnerId
    If($inPartyOwnerId ~= 0){
        Return()--in party
    }
    $contentDict = NewDictionary($content)
    $nickName = DictionaryGet(dict = $contentDict, key = "nickName")
    $showTime = DictionaryGet(dict = $contentDict, key = "showTime")
    $picUrl = DictionaryGet(dict = $contentDict, key = "picUrl")
    $partyInfo = DictionaryGet(dict = $contentDict, key = "partyInfo")
    -- $obj1.visitTargetUserId = DictionaryGet(dict = $contentDict, key = "userId")
    $visitTargetUserId = DictionaryGet(dict = $contentDict, key = "userId")
    $context = {visitTargetUserId = $visitTargetUserId}

    If($partyInfo){--[party] friend invite
        $obj1.partyInviteReceiveCount = $obj1.partyInviteReceiveCount + 1
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "invitePartyBuff")
        $obj1.partyInfo = $partyInfo
        $partyInfoDict = NewDictionary($partyInfo)
        $targetPartyId = DictionaryGet(dict = $partyInfoDict, key = "partyId")
        $ownerId = DictionaryGet(dict = $partyInfoDict, key = "userId")
        $likeNum = DictionaryGet(dict = $partyInfoDict, key = "likeNum")
        If($targetPartyId == $obj1.excludedPartyId and $ownerId == $visitTargetUserId){--party owner invited me
            $obj1.excludedPartyId = "0"
        }
        -- $obj1.visitTargetUserId = $ownerId
        $context = {
            visitTargetUserId = $ownerId,
            partyInfo = $partyInfo,
        }
        -- party invite ui style
        $content = {
            msg = "gui_party_invite_notice",
            args = [
                $nickName
            ]
        }

        $fullName = "myplugin/partyInviteView"
        $buttonInfo = [
            {
                normalImage = "set:invite_tip.json image:green_btn",
                pushedImage = "set:invite_tip.json image:green_btn",
                text = "ui_sure"
            },
            {
                normalImage = "set:invite_tip.json image:blue_btn",
                pushedImage = "set:invite_tip.json image:blue_btn",
                text = "ui_cancel"
            }
        ]
        $eventMap = {
            button1 = "JOIN_PARTY_ARGEE",
            button2 = "JOIN_PARTY_REFUSE",
            autoClose = "PARTY_INVITE_AUTO_CLOSE",
        }
    }
    Else{--[common] friend invite
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "inviteFriendBuff")
        $buttonInfo = [
            {
                normalImage = "set:invite_tip.json image:green_btn",
                pushedImage = "set:invite_tip.json image:green_btn",
                pushInTextTimer = true,
                text = "ui_sure"
            },  
            {
                normalImage = "set:invite_tip.json image:blue_btn",
                pushedImage = "set:invite_tip.json image:blue_btn",
                text = "ui_cancel"
            }
        ]
        $content = {
            msg = "gui_friend_invite_notice",
            args = [
                $nickName
            ]
        }
        $eventMap = {
            button1 = "PLAYER_ON_VISIT_OTHER_SERVER",
            button2 = "PLAYER_BE_INVITE_OTHER_SERVER_REFUSE",
            autoClose = "FRIEND_INVITE_OTHER_SERVER_AUTO_CLOSE",
        }
        $fullName = "myplugin/friendInviteView"
    }

    ShowInviteTipByScript(context = $context, player = $obj1, buttonInfo = $buttonInfo, pic = $picUrl, titleText = $likeNum, content = $content, fullName = $fullName, showTime = $showTime, eventMap = $eventMap)
}
JOIN_OTHERS_PARTY(debug = false){
    $partyDict = NewDictionary($obj1.partyInfo)
    $partyId = DictionaryGet(dict = $partyDict, key = "partyId")
    TryJoinParty(player = $obj1, targetUserId = $obj1.targetUserId, partyId = $partyId)
}
CROSS_SERVER_VISIT(debug = false){
    $obj1.jumpSeverToNormal = true
    CrossServerVisitPlayerByUserId(targetUserId = $obj1.targetUserId, player = $obj1)
}
PLAYER_ON_VISIT_OTHER_SERVER(debug = false){
    If($obj1.guideStep ~= @GuideEnd){
        CallTrigger(event = "TIP_GUIDE_UNDONE", object = $obj1)
        Return()
    }
    $targetUserId = $visitTargetUserId or $targetUserId or $obj1.visitTargetUserId
    $obj1.targetUserId = $targetUserId
    $contentDict = NewDictionary($content)
    $partyInfo = DictionaryGet(dict = $contentDict, key = "partyInfo")
    If($partyInfo){--can be set by PLAYER_BE_INVITE_OTHER_SERVER
        $obj1.partyInfo = $partyInfo
    }
    If($obj1.partyInfo){--target is in party
        $partyDict = NewDictionary($obj1.partyInfo)
        If($obj1.inSelfParty){--me in party
            $obj1.needReenterGameWhenJoinPartyFailed = true
            If($obj1.inSelfParty == 1){--my party
                $obj1.dontReenterGameWhenCloseParty = true
                $obj1.closePartyEvent = "JOIN_OTHERS_PARTY"
                CloseParty(player = $obj1)
            }
            If($obj1.inSelfParty == 0){--not my party
                $obj1.dontAskShowPartyList = true
                $obj1.dontReenterGameWhenLeaveParty = true
                $obj1.leavePartyEvent = "JOIN_OTHERS_PARTY"
                LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
            }
        }
        Else{--me not in party
            $obj1.targetUserId = DictionaryGet(dict = $partyDict, key = "userId")
            CallTrigger(object = $obj1, event = "JOIN_OTHERS_PARTY")
        }
    }
    Else{--target not in party
        If($obj1.inSelfParty){--me in party
            If($obj1.inSelfParty == 1){--my party
                $obj1.dontReenterGameWhenCloseParty = true
                $obj1.reenterGameWhenCrossVisitFailed = true
                $obj1.closePartyEvent = "CROSS_SERVER_VISIT"
                CloseParty(player = $obj1)
            }
            If($obj1.inSelfParty == 0){--not my party
                $obj1.dontAskShowPartyList = true
                $obj1.dontReenterGameWhenLeaveParty = true
                $obj1.reenterGameWhenCrossVisitFailed = true
                $obj1.leavePartyEvent = "CROSS_SERVER_VISIT"
                LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
            }
        }
        Else{--me not in party
            CallTrigger(object = $obj1, event = "CROSS_SERVER_VISIT")
        }
    }
    StartTimer(time = 1, object = $obj1, obj1 = $obj1, event = "SHOW_TITLE_BAR")
}
PLAYER_ON_VISIT {--same server
    If($obj1.guideStep ~= @GuideEnd){
        CallTrigger(event = "TIP_GUIDE_UNDONE", object = $obj1)
        Return()
    }
    If(not $target){
        $target = $visitTargetObjectId and GetObject(objID = $visitTargetObjectId) or $obj2 or $obj1.visitTarget
    }
    If(not $target or $target.interactionObjId == GetObjectID(object = $obj1)){
        Return()
    }
    CallTrigger(object = $target, event = "GET_VISIT_TELE_POS", from = $obj1, fromInParty = $fromInParty)
    If($obj1.telePos and $obj1.teleMap){
        $isInHouse = ($obj1.house == GetMapVar(map = GetEntityMap(entity = $obj1), key = "owner"))
        If($isInHouse and $obj1.teleMap ~= GetEntityMap(entity = $obj1)){
            ShowTitleBarPage(entity = $obj1, closeWin = true)
        }
        CallTrigger(obj1 = $obj1, event = "PLAYER_CLEAR_RIDE")
        SetEntityPosition(map = $obj1.teleMap, entity = $obj1, pos = $obj1.telePos)
        $obj1.teleMap = nil
        $obj1.telePos = nil
    }
    StartTimer(time = 1, object = $obj1, obj1 = $obj1, event = "SHOW_TITLE_BAR")
}
GET_VISIT_TELE_POS {
    $house = $obj1.house
    $isLock =$house.isLock
    $inHouse = ($house == GetMapVar(map = GetEntityMap(entity = $obj1), key = "owner"))
    If($fromInParty or not $inHouse or not $isLock){
        $toInside = true
    }
    Else{
        $id1 = GetEntityTeam(entity = $obj1)
        $id2 = GetEntityTeam(entity = $from)
        If($id1 ~= 0 and $id1 == $id2){
            $toInside = true
        }
    }
    If($toInside){
        --transfer to the targets pos
        ShowTip(entity = $from, tipType = 2, textKey = "gui.self.tele.to.target.success", keepTime = 100, textP1 = GetEntityName(entity = $obj1))
        ShowTip(entity = $obj1, tipType = 2, textKey = "gui.target.tele.to.self.success", keepTime = 100, textP1 = GetEntityName(entity = $from))
        $tp = GetEntityPosition(entity = $obj1)
        $targetRideOn = GetRideOn(entity = $obj1)
        If($targetRideOn and GetConfigVar(obj = $targetRideOn, key = "base") == "fur_base" and $targetRideOn.lastSideNormal){
            $tp = ComputeV3(op = "add", p1 = $tp, p2 = $targetRideOn.lastSideNormal)
            If(GetPosY(pos = $targetRideOn.lastSideNormal) == -1){
                $tp = ComputeV3(op = "add", p1 = $tp, p2 = {x = 0, y = -2, z = 0})
            }
        }Else{
            If($obj1.curInsideRegion or $obj1.lastInsideRegion){
                $regionCenter = GetRegionCenter(region = $obj1.curInsideRegion or $obj1.lastInsideRegion)
                $addV3 = {
                    x = GetPosX(pos = $tp) - GetPosX(pos = $regionCenter) > 0 and -1.5 or 1.5,
                    y = 0,
                    z = GetPosZ(pos = $tp) - GetPosZ(pos = $regionCenter) > 0 and -1.5 or 1.5
                }
                $tp = ComputeV3(op = "add", p1 = $tp, p2 = $addV3)
            }
        }
        $from.telePos = $tp
        $from.teleMap = GetEntityMap(entity = $obj1)
    }
    Else{
        ShowTip(entity = $from, tipType = 2, textKey = "house_lock")
        $door = $house.door
        $from.telePos = ComputeV3(p1 = GetEntityPosition(entity = $door), p2 = V3RotationYaw(vector = Table(x = 0, y = 0.5, z = 3), yaw = GetEntityYaw(entity = $door)), op = "add")
        $from.teleMap = GetEntityMap(entity = $door)
    }
}
TRY_JOIN_PARTY(debug = false){
    If($obj1.guideStep ~= @GuideEnd){
        CallTrigger(event = "TIP_GUIDE_UNDONE", object = $obj1)
        Return()
    }
    If($obj1.excludedPartyId == $partyId){
        $tip = "gui.party.be.excluded"
        $canJoin = false
    }
}
TRY_CREATE_PARTY {
    If($obj1.guideStep ~= @GuideEnd){
        CallTrigger(event = "TIP_GUIDE_UNDONE", object = $obj1)
        Return()
    }
    If(ArrayFind(array = $obj1.privilege, value = "myplugin/vip_privilege")){
        $canCreate = true
    }Else{
        $canCreate = false
        $tip = ""
        $shopIndex = GetShopItemIndex(itemName = "myplugin/vip_privilege") or 1
        CallTrigger(obj1 = $obj1, event = "POP_UP_BUY_PRIVILEGE", shopIndex = $shopIndex, buyResultEvent = "BUY_CREATE_PARTY_PRIVILEGE_RESULT")
    }
}
BUY_CREATE_PARTY_PRIVILEGE_RESULT {
    If($succeed){
        TryCreateParty(player = $obj1)
    }
}
CHECK_LEAVE_PARTY(debug = false){
    If($obj1.inSelfParty == 1){--in my party
        CloseParty(player = $obj1)
        CallTrigger(obj1 = $obj1, event = "CLOSE_PARTY_SUCCESS")
        Return()
    }
    If($obj1.inSelfParty == 0){--not in my party
        $obj1.dontAskShowPartyList = true
        LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
        $obj1.inPartyOwnerId = 0
    }
}
ASK_LEAVE_PARTY{
    If($result == false) {
        Return()
    }
    --need ask show party list
    LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
}
ASK_SHOW_PARTY_LIST {
    If($result == false) {
        ShowTip(entity = $obj1, tipType = 2, textKey = "gui.party.leave.success", keepTime =  100)
        $obj1.jumpSeverToNormal = true
        ReenterGame(player = $obj1)
        Return()
    }
    ShowPartyList(player = $obj1, closeEvent = "REENTER_GAME")
}
CHECK_CLOSE_PARTY {
    If($result == false) {Return()}
    CloseParty(player = $obj1)
}
REENTER_GAME(debug = false){
    ShowTip(entity = $obj1, tipType = 2, textKey = "gui.party.leave.success", keepTime =  100)
    $obj1.jumpSeverToNormal = true
    ReenterGame(player = $obj1)
}
LEAVE_PARTY_SUCCESS(debug = false){
    $obj1.inPartyOwnerId = 0
    $obj1.inSelfParty = nil--can join other party
    --cases need ask: from door/ from the client exit button
    If(not $obj1.dontAskShowPartyList){
        $tipType = 2
        ShowDialogTip(entity = $obj1, p1 = "gui.party.ask.show.party", event = "ASK_SHOW_PARTY_LIST", tipType = $tipType
            ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
    ElseIf($obj1.dontReenterGameWhenLeaveParty){
        $obj1.dontReenterGameWhenLeaveParty = false
        If($obj1.leavePartyEvent){
            CallTrigger(object = $obj1, event = $obj1.leavePartyEvent)
        }
    }
    Else{
        $obj1.jumpSeverToNormal = true
        ReenterGame(player = $obj1)
    }
}
DATA_REPORT_PARTY_ALL_GAME{
    -- Test(msg = "DATA_REPORT_PARTY_ALL_GAME", createPartyCount = $obj1.createPartyCount, joinPartyCount = $obj1.joinPartyCount)

    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.createPartyCount, array = [0, 9, 19, 49, 99, 199,  499, 999, 1999, 4999, 9999, 10000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["party:create:sum", @rangeBoundary])

    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.joinPartyCount, array = [0, 9, 19, 49, 99, 199,  499, 999, 1999, 4999, 9999, 10000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["party:join:sum", @rangeBoundary])
}
DATA_REPORT_NORMAL_LOGOUT(){
    If($obj1.jumpSeverToSpecial or $obj1.jumpSeverToNormal){
        Return()
    }

    --no jump server action
    -- Test(msg = "DATA_REPORT_NORMAL_LOGOUT", createPartyCountPerGame = $obj1.createPartyCountPerGame, joinPartyCountPerGame = $obj1.joinPartyCountPerGame, partyInviteAgree = $obj1.partyInviteAgree)

    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.partyInviteAgree, array = [0, 2, 5, 10, 15, 20, 21])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:party:agree", @rangeBoundary])


    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.createPartyCountPerGame, array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["party:create:single_game", @rangeBoundary])

    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.joinPartyCountPerGame, array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["party:join:single_game", @rangeBoundary])

    $obj1.createPartyCountPerGame = 0
    $obj1.joinPartyCountPerGame = 0
    $obj1.partyInviteAgree = 0
}
DATA_REPORT_JUMP_SERVER_SUCCESS{
    If($obj1.jumpSeverToSpecial or $obj1.jumpSeverToNormal){
        GameAnalyticsCustomEvent(player = $obj1, parts = ["player:delivery:success"])
    }
}
REALLY_AT_PARTY(debug = false){
    --in party now!
    $userId = GetPlayerUserID(player = $obj1)
    $inPartyOwnerId = $obj1.inPartyOwnerId
    $partyOwner = GetPlayerByUserId(userId = $inPartyOwnerId)
    UpdatePartyInnerSettingUI(player = $obj1, inPartyOwnerId = $inPartyOwnerId, isShow = true)
    CallTrigger(object = $obj1, event = "OPEN_DANCE")
    If($userId == $inPartyOwnerId){
        $obj1.createPartyCount = $obj1.createPartyCount + 1
        $obj1.createPartyCountPerGame = $obj1.createPartyCountPerGame + 1
        $obj1.inSelfParty = 1
        BroadcastPartyInvite(player = $obj1)
        ShowWarmPrompt(player = $obj1, text = "gui.party.broadcast.success", btnText = "ui_sure")
    }
    Else{
        $obj1.joinPartyCount = $obj1.joinPartyCount + 1
        $obj1.joinPartyCountPerGame = $obj1.joinPartyCountPerGame + 1
        $obj1.inSelfParty = 0
        CallTrigger(object = $obj1, event = "JOIN_PARTY_GIVE_OWNER_MONEY", targetUserId = $inPartyOwnerId)
        CallTrigger(fromInParty = true, target = $partyOwner, event = "PLAYER_ON_VISIT", object = $obj1)
    }
}
RESET_NOT_IN_PARTY(debug = false){
    $obj1.notInParty = true
    $obj1.inPartyOwnerId = 0
    CallTrigger(object = $obj1, event = "SHOW_TITLE_BAR")
    $obj1.role = @adult
    CallTrigger(event = "SHOW_SELECT_ROLE", object = $obj1)
}
GET_TARGET_PARTY_INFO(debug = false){
    $myId = GetPlayerUserID(player = $obj1)
    $partyInfoDict = NewDictionary($partyInfo)
    $ownerId = DictionaryGet(dict = $partyInfoDict, key = "userId")
    If(not $ownerId){--target has no party
        CallTrigger(object = $obj1, event = "RESET_NOT_IN_PARTY")
    }
    ElseIf($ownerId == $myId){
        CallTrigger(object = $obj1, event = "REALLY_AT_PARTY")
    }
    Else{
        $memberUserIds = DictionaryGet(dict = $partyInfoDict, key = "memberUserIds")
        Foreach(array = $memberUserIds, key = "userId"){
            If($myId == $userId){
                $isMember = true
                Break()
            }
        }
        If(not $isMember){--target has closed this party
            CallTrigger(object = $obj1, event = "RESET_NOT_IN_PARTY")
        }
        Else{
            $inPartyOwnerId = $obj1.inPartyOwnerId
            $partyOwner = GetPlayerByUserId(userId = $inPartyOwnerId)
            If($partyOwner){
                CallTrigger(object = $obj1, event = "REALLY_AT_PARTY")
            }
            Else{
                $tipType = 2
                ShowDialogTip(entity = $obj1, p1 = "gui.party.ask.return.party", event = "ASK_RETURN_PARTY_RESULT", tipType = $tipType
                    ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
            }
        }
    }
}
ASK_RETURN_PARTY_RESULT(debug = false){
    If($result == false){
        CallTrigger(object = $obj1, event = "RESET_NOT_IN_PARTY")
        Return()
    }
    $obj1.resetGameToJoinParty = true
    ShowTip(entity = $obj1, tipType = 2, textKey = "gui.party.join.success", keepTime =  100)
    $obj1.jumpSeverToSpecial = true
    CrossServerVisitPlayerByUserId(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
}
CHECK_IN_PARTY(debug = false){
    $inPartyOwnerId = $obj1.inPartyOwnerId
    If($inPartyOwnerId ~= 0){
        GetPartyInfoByUserId(player = $obj1, targetUserId = $inPartyOwnerId, callback = "GET_TARGET_PARTY_INFO")
    }
    Else{
        $obj1.notInParty = true
    }
}
INTERACTION_BANISH(debug = false){
    ShowTip(entity = $obj1, tipType = 2, textKey = "gui.party.be.banished", keepTime =  20)
    $owner = GetPlayerByUserId(userId = $obj1.inPartyOwnerId)
    $obj1.excludedPartyId = $owner.inPartyId
    $obj1.dontAskShowPartyList = true
    LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
}
CREATE_PARTY_SUCCESS {
    $obj1.inPartyOwnerId = GetPlayerUserID(player = $obj1)
    $obj1.inPartyId = $partyId
    ShowTip(entity = $obj1, tipType = 2, textKey = "gui.party.create.success", keepTime =  100)
    $obj1.resetGameToOpenParty = true
    $house = $obj1.house
    $house.createPartyBuff = AddEntityBuff(entity = $house, cfg = GetConfigVar(obj = $house, key = "houseCreatePartyBuff"))
    $obj1.jumpSeverToSpecial = true
    ReenterGame(player = $obj1)

}
JOIN_PARTY_GIVE_OWNER_MONEY(debug = false){
    $joinUserPartyDataDict = NewDictionary($obj1.joinUserPartyData)
    $userIds = DictionaryGet(dict = $joinUserPartyDataDict, key = "userIds")
    $hadJoin = false
    Foreach(array = $userIds, key = "userId"){
        If($targetUserId == $userId){
            $hadJoin = true
            Break()
        }
    }
    If(not $hadJoin){
        $partyOwner = GetPlayerByUserId(userId = $targetUserId)
        $giveCount = GetConfigVar(obj = $obj1, key = "joinPartyGiveMoney")
        AddCurrency(entity = $partyOwner, coinName = "green_currency", count = $giveCount)
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $partyOwner, buffKey = "getMoneyTipSoundBuff")
        ShowTip(entity = $partyOwner, tipType = 2, textKey = "other.player.join.cur.player.party", textP1 = GetEntityName(entity = $obj1), textP2 = $giveCount)
        ArrayAppend(array = $userIds, value = $targetUserId)
        $obj1.joinUserPartyData = DictionaryToTable(dict = $joinUserPartyDataDict)
    }
}
JOIN_PARTY_FAILED(debug = false){
    If($obj1.needReenterGameWhenJoinPartyFailed){
        $obj1.needReenterGameWhenJoinPartyFailed = nil
        $obj1.jumpSeverToNormal = true
        ReenterGame(player = $obj1)
    }
}
JOIN_PARTY_SUCCESS(debug = false){
    $obj1.inPartyOwnerId = $targetUserId
    $obj1.resetGameToJoinParty = true
    ShowTip(entity = $obj1, tipType = 2, textKey = "gui.party.join.success", keepTime =  100)
    $obj1.jumpSeverToSpecial = true
    CrossServerVisitPlayerByUserId(player = $obj1, targetUserId = $targetUserId)
}
UPDATE_CREATE_PARTY_VIEW_INFO {
    $curHouseCfg = $obj1.curHouseCfg
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    Foreach(array = $houseVars, key = "houseVar"){
        $dict = NewDictionary($houseVar)
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            $likeNum = DictionaryGet(dict = $dict, key = "likeNum")
            Break()
        }
    }
    If(not $likeNum){
        $likeNum = 0
    }
    $maxPlayerNum = GetEntityCfg(fullName = $curHouseCfg, key = "partyMaxPlayerNumber")
    $partyImage = GetEntityCfg(fullName = $curHouseCfg, key = "partyImage")
    $reachPlayerNum = GetEntityCfg(fullName = $curHouseCfg, key = "reachGoodPartyPlayerNumber")
    $lowerRate = GetEntityCfg(fullName = $curHouseCfg, key = "goodPartyPlayerNumberLowerRate")
}
CLOSE_PARTY_SUCCESS(debug = false){
    $name = GetEntityName(entity = $obj1)
    $obj1.inPartyId = "0"
    $obj1.inPartyOwnerId = 0
    $obj1.inSelfParty = nil
    $house = $obj1.house
    If($house.createPartyBuff){
        RemoveEntityBuff(entity = $house, buff = $house.createPartyBuff)
    }
    If($obj1.openPartyFailed){
        $obj1.openPartyFailed = nil
        Return()
    }

    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = GetGameTime() / 20 / 60, array = [10, 20, 30, 31])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["party:keep:time", @rangeBoundary])

    $players = NewDictionary(GetAllPlayers())--if from "ENTITY_LEAVE", then the player not in this list
    ForeachDictionary(keyName = "_", valueName = "player", dict = $players){
        If($player.dontReenterGameWhenCloseParty){Continue()}
        ShowTip(entity = $player, tipType = 2, textKey = "gui.party.be.closed", keepTime =  20, textP1 = $name)
        $player.inPartyOwnerId = 0
        $player.inSelfParty = nil
        $player.jumpSeverToNormal = true
        ReenterGame(player = $player)
    }
    If($obj1.closePartyEvent){
        CallTrigger(object = $obj1, event = $obj1.closePartyEvent)
    }
}
PARTY_BE_LIKED{
    $partyInfoDict = NewDictionary($partyInfo)
    $likeNum = DictionaryGet(dict = $partyInfoDict, key = "likeNum")

    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            $curHousedict = $dict
            $curHouseIndex = $index
            Break()
        }
    }
    DictionarySet(dict = $curHousedict, key = "likeNum", value = $likeNum)
    ArraySet(array = $houseVars, index = $curHouseIndex, value = DictionaryToTable(dict = $curHousedict))
}
RESET_GAME_FAILED(debug = false){
    If($resultCode ~= 1){
        Test(msg = "RESET_GAME_FAILED", resultCode = $resultCode)
        GameAnalyticsCustomEvent(player = $obj1, parts = ["player:delivery:fail", $resultCode])
        $obj1.jumpSeverToSpecial = nil
        $obj1.jumpSeverToNormal = nil

        If($obj1.resetGameToJoinParty){
            ShowTip(entity = $obj1, tipType = 2, textKey = "tip.user.join.party.failed")
            $obj1.dontReenterGameWhenLeaveParty = true
            $obj1.dontAskShowPartyList = true
            LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
        }
        ElseIf($obj1.resetGameToOpenParty){
            $obj1.resetGameToOpenParty = nil
            $obj1.openPartyFailed = true
            ShowTip(entity = $obj1, tipType = 2, textKey = "tip.user.create.party.failed")
            CloseParty(player = $obj1)
        }
        ElseIf($obj1.reenterGameWhenCrossVisitFailed){
            $obj1.reenterGameWhenCrossVisitFailed = nil
            ShowTip(entity = $obj1, tipType = 2, textKey = "tip.user.visit.friend.failed")
            ReenterGame(player = $obj1)
        }
        Else{
            ShowTip(entity = $obj1, tipType = 2, textKey = $resultType)
        }
    }
}
ON_SEND_INVITE_TO_GAME(debug1 = true){
    $contentDict = NewDictionary($content)
    $partyInfoDict = NewDictionary(DictionaryGet(dict = $contentDict, key = "partyInfo"))
    If(not $obj1.inviteCount){
        $obj1.inviteCount = 1
    }
    If($obj1.autoInviteTimer){
        StopTimer(timer = $obj1.autoInviteTimer)
        $obj1.inviteCount = 1
    }
    $partyOwnerUserId = DictionaryGet(dict = $partyInfoDict, key = "userId")
    BroadcastPartyInvite(partyOwnerUserId = $partyOwnerUserId, inviter = $obj1)
    If($obj1.inviteCount >= (GetWorldVar(key = "autoInvitePartyCount") or 2)){
        Return()
    }
    $obj1.autoInviteTimer = StartTimer(event = "BROADCAST_PARTY_INVITE", object = $obj1, partyOwnerUserId = $partyOwnerUserId, time = GetWorldVar(key = "autoInvitePartyInterval") or 120 * 20, rep = true)
}
BROADCAST_PARTY_INVITE(debug1 = true){
    If(not IsValidObject(object = $obj1)){
        StopTimer(timer = $obj1.autoInviteTimer)
        Return()
    }
    BroadcastPartyInvite(partyOwnerUserId = $partyOwnerUserId, inviter = $obj1)
    $obj1.inviteCount = $obj1.inviteCount + 1
    If($obj1.inviteCount >= (GetWorldVar(key = "autoInvitePartyCount") or 2)){
        StopTimer(timer = $obj1.autoInviteTimer)
        $obj1.autoInviteTimer = nil
        $obj1.inviteCount = 1
    }
}
--↑↑↑↑↑↑ party

START_PLAY_BGM  {
    $cfg = ArrayGet(array = @BGMConfigs, index = $index)
    If(not $cfg) {
        Return()
    }
    $cfg = NewDictionary($cfg)
    If(DictionaryGet(dict = $cfg, key = "needPrivilege") == "TRUE"
        and not ArrayFind(array = $obj1.privilege, value = "myplugin/music_privilege"))
    {
        -- 没有特权，调用弹窗购买
        $shopIndex = GetShopItemIndex(itemName = "myplugin/music_privilege") or 7
        CallTrigger(obj1 = $obj1, event = "POP_UP_BUY_PRIVILEGE", shopIndex = $shopIndex)
        Return()
    }
    If($obj1.house ~= GetEntityMap(entity = $obj1).owner) {
        ShowTip(entity = $obj1, tipType = 2, textKey = "party_tip_not_your_sound")
        Return()
    }

    Foreach(array = GetMapNpc(map = GetEntityMap(entity = $obj1)), key = "entity") {
        If(GetConfigVar(obj = $entity, key = "isBgmSpeakers")) {
            If($entity.bgmSpeakersBuff) {
                RemoveEntityBuff(entity = $entity, buff = $entity.bgmSpeakersBuff)
            }
            $entity.bgmSpeakersBuff = AddEntityBuff(entity = $entity, cfg = DictionaryGet(dict = $cfg, key = "buff"), buffTime = nil)
            $entity.bgmSpeakersBuffIndex = $index
        }
    }
    HideBgmList(player = $obj1, playingIndex = $index)
    Foreach(array = GetMapPlayer(map = GetEntityMap(entity = $obj1)), key = "player") {
        SendUpdatePlayingBgmIndex(player = $player, playingIndex = $index)
        If($index == 1 and $player.gameBgmBuffCfg) {
            $player.gameBgmBuff = AddEntityBuff(entity = $obj1, cfg = $player.gameBgmBuffCfg)
        }ElseIf($player.gameBgmBuff){
            RemoveEntityBuff(entity = $player, buff = $player.gameBgmBuff)
            $player.gameBgmBuff = nil
        }
    }
}

INIT_FAMILY_ALBUM
{
    $familyAlbum = GetObjectVar(obj = $obj1, key = "familyAlbum")
    If(not $familyAlbum)
    {
        Return()
    }
    UpdateUIData(player = $obj1, ui = "win_familyAlbum", data = $familyAlbum)
}

SAVE_PHOTO
{
    $familyAlbum = GetObjectVar(obj = $obj1, key = "familyAlbum")
    If(not $familyAlbum)
    {
        Return()
    }

    If(ArraySize(array = $familyAlbum) < GetWorldVar(key = "familyAlbumNum"))
    {
        $photo = {
            image = $data,
            name = "dafault_name"
        }

        ArrayAppend(array = $familyAlbum, value = $photo)

        UpdateUIData(player = $obj1, ui = "win_familyAlbum", data = $familyAlbum)

        $btnInfo = {
            leftCoinId = nil,
            leftContent = "ui_sure",
            rightCoinId = nil,
            rightContent = "ui_check"
        }
        $tipType = 5
        ShowDialogTip(entity = $obj1,tipType = $tipType, event = "CLICK_SAVE_FAMILY_ALBUM_TIP", p1 = "ui_tip", p2 = "ui_save_photo", p3 = $btnInfo
            ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
    Else
    {
        $btnInfo = {
            leftCoinId = nil,
            leftContent = "ui_cancel",
            rightCoinId = nil,
            rightContent = "ui_sure"
        }
        $tipType = 5
        ShowDialogTip(entity = $obj1,tipType = $tipType, event = "CLICK_SAVE_FAMILY_ALBUM_TIP", p1 = "ui_tip", p2 = "ui_family_album_full", p3 = $btnInfo
            ,_dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
}

CLICK_SAVE_FAMILY_ALBUM_TIP
{
    If($button == "right"){
        OperationWindows(win = "familyAlbum", isOpen = true, player = $obj1)
    }
}

DELETE_FAMILY_ALBUM
{
    $familyAlbum = GetObjectVar(obj = $obj1, key = "familyAlbum")
    If(not $familyAlbum)
    {
        Return()
    }
    If(not $index)
    {
        Return()
    }

    If($index <= ArraySize(array = $familyAlbum) and $index > 0)
    {
        ArrayRemove(array = $familyAlbum, index = $index)
        UpdateUIData(player = $obj1, ui = "win_familyAlbum", data = $familyAlbum)
    }
}

RENAME_FAMILY_ALBUM
{
    $familyAlbum = GetObjectVar(obj = $obj1, key = "familyAlbum")
    If(not $familyAlbum)
    {
        Return()
    }

    If(not $index)
    {
        Return()
    }

    If($index <= ArraySize(array = $familyAlbum) and $index > 0)
    {
        $photo = ArrayGet(array = $familyAlbum, index = $index)
        If($photo)
        {
            $photoDict = NewDictionary($photo)
            $photoImage = DictionaryGet(dict = $photoDict, key = "image")
            $newPhoto = {
                image = $photoImage,
                name = $name
            }
            ArraySet(array = $familyAlbum, index = $index, value = $newPhoto)

            $uiData = {
                index = $index,
                name = $name
            }
            UpdateUIData(player = $obj1, ui = "win_familyAlbumRename", data = $uiData) 
        }
    }
}

SHOW_PALETTE_HELP
{
    ShowLongTextTip(player = $obj1, text = "palette_help_msg", title = "palette_help_title")
}

PLAYER_CLEAR_RIDE
{
    CallTrigger(obj1 = $obj1, event = "ENTITY_REMOVE_INTERACTION")
    ClearRide(entity = $obj1)
}
ADD_SVIP_BUFF{
    If(not ArrayFind(array = $obj1.privilege, value = "myplugin/svip_privilege")){
        Return()
    }
    If($obj1.lastSvipBuff){
        RemoveEntityBuff(entity = $obj1, buff = $obj1.lastSvipBuff)
    }
    If($obj1.role == @child){
        $obj1.lastSvipBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/svip_privilege_buff_2")
    }Else{
        $obj1.lastSvipBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/svip_privilege_buff")
    }
}
CHECK_SHOW_SVIP_UI()
{
    $show = false
    If(ArrayFind(array = $obj1.privilege, value = "myplugin/svip_privilege"))
    {
        $show = true
        CallTrigger(obj1 = $obj1, event = "ADD_SVIP_BUFF", object = $obj1)
    }
    If($obj1.getSvipDay ~= "" and IsSameDay(time1 = $obj1.getSvipDay, time2 = GetTime())){
        $show = false
    }
    ShowToolBarButton(name = "svip", show = $show, player = $obj1)
}
GET_SVIP_REWARD()
{
    If($obj1.getSvipDay ~= "" and IsSameDay(time1 = $obj1.getSvipDay, time2 = GetTime())){
        ShowToolBarButton(name = "svip", show = false, player = $obj1)
        Return()
    }
    If(ArrayFind(array = $obj1.privilege, value = "myplugin/svip_privilege"))
    {
        $obj1.getSvipDay = GetTime()
        $money = GetConfigValue(type = "reward", fullName = "myplugin/privilege", key = "svipMoney")
        ShowRewardItemEffect(type = "Coin", count = $money, fullName = "green_currency", player = $obj1)
        AddCurrency(entity = $obj1, coinName = "green_currency", count = $money)
        CallTrigger(event = "ENTITY_ADD_DINGDONG_BUFF", object = $obj1, buffKey = "getMoneyTipSoundBuff")
        ShowToolBarButton(name = "svip", show = false, player = $obj1)
    }
}

FUNC_TRANSMIT_CARRIER --param: toMap, toPos, toRy
{
    If (IsCameraMode(player = $obj1))
    {
        Return()
    }
    $obj1.transmitCancel = false
    $carrier = GetRideOn(entity = $obj1)
    If($carrier)
    {
        $conA = not IsPlayer(entity = $carrier)
        $conB = not $obj1.onCar && not $obj1.useTrolley
        $conC = $obj1.onCar && $toMap ~= "map001" && $toMap ~= "map002"
        
        If($conA && ($conB || $conC))
        {
            ShowTip(entity = $obj1, tipType = 2, textKey = "unable_to_transmit", keepTime = 40)
            $obj1.transmitCancel = true
            Return()
        }
    }
    SetEntityPosition(entity = $carrier or $obj1, map = $toMap, ry = $toRy or 0, pos = $toPos)
    ChangeCameraView(player = $obj1, yaw = $toRy, pitch = 30, distance = 5, smooth = 1, offset = {x = 0, y = 0, z = 0})
}

NEXT_GUIDE_STEP
{
    CallTrigger(object = $obj1, step = $obj1.curStep, event = "DATA_REPORT_PALETTE_GUIDE_STEP")
    $obj1.curStep = $obj1.curStep + 1
    SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = $obj1.curStep),canBack = true)
}

EDIT_BLACKBOARD_BUTTON_SURE
{
    $npc = GetObject(objID = $objID)
    If(not $npc)
    {
        Return()
    }

    $textLength = GetConfigVar(obj = $npc, key = "textLength") or 50
    
    $name = FilterWord(msg = $name, len = $textLength)
    If(not $name)
    {
        Return()
    }

    $npc.blackboardStr = $name

    CallTrigger(event = "UPDATE_SINGLE_BLACK_BOARD_ENTITY", object = $obj1, npc = $npc)
}

FUNC_CHECK_SHOWN_DANCES_SKILL --param: shown
{
    If($obj1.inPartyOwnerId ~= 0){
        Return()
    }

    $reg = GetRegionByName(map = GetEntityMap(entity = $obj1), name = "dances")
    $event = "CLOSE_DANCE"
    If($reg && $shown && IfEntityInArea(
                    entity = $obj1,
                    region = {
                        min = GetRegionMin(region = $reg),
                        max = GetRegionMax(region = $reg) + V3(1, 1, 1)
                    }
                )
    )
    {
        $event = "OPEN_DANCE"
    }
    CallTrigger(object = $obj1, event = $event)
}

SHOW_GOTO_RECHARGE_UI
{
    ShowRecharge(player = $obj1)
    --$def = false
    --$btnInfo = { leftCoinId = nil, leftContent = "gui.text.cancel", rightCoinId = nil, rightContent = "go_to_recharge" }
    --ShowDialogTip(entity = $obj1, tipType = 5, event = "SHOW_GOTO_RECHARGE_UI_RESULT", p1 = "composition.tip.title", p2= "pay_failure_gDiamonds_insufficient", p3 = $btnInfo)
}

SHOW_GOTO_RECHARGE_UI_RESULT
{
    If($button == "right")
    {
        ShowRecharge(player = $obj1)
    }
}

SHOW_GOTO_APP_SHOP_UI
{
    ShowGoldShop(player = $obj1, show = true)
    --$def = false
    --$btnInfo = { leftCoinId = nil, leftContent = "gui.text.cancel", rightCoinId = nil, rightContent = "go_to_conversion" }
    --ShowDialogTip(entity = $obj1, tipType = 5, event = "SHOW_GOTO_APP_SHOP_UI_RESULT", p1 = "composition.tip.title", p2= "pay_failure_game_money_insufficient", p3 = $btnInfo)
}

SHOW_GOTO_APP_SHOP_UI_RESULT
{
    If($button == "right")
    {
        ShowGoldShop(player = $obj1, show = true)
    }
}

ADD_TOY_GIFT(){
    If(GetItemCfg(fullName = $addItem, key = "base") == "car_base"){
        $tipType = 0
        ShowDialogTip(entity = $obj1, tipType = $tipType,p1="gui.hint",p2="item.pick.bag",p3="sure"
            ,dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
    }
    AddItem(entity = $obj1, cfg = $addItem, count = 1)
}

DATA_REPORT_GOLD_NUM
{
    $num = GetCurrency(entity = $obj1, coinName = "green_currency")
    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $num, array = [2999, 9999, 19999, 29999, 39999, 49999, 59999, 69999, 79999, 89999, 99999, 109999, 119999, 499999, 999999, 1000000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:gold", @rangeBoundary])
}

LOAD_USER_MONEY
{
    If(not $obj1.cubeReport)
    {
        $obj1.cubeReport = true
        $num = GetCurrency(entity = $obj1, coinName = "gDiamonds")
        CallTrigger(event = "SET_RANGE_BOUNDARY", num = $num, array = [0, 59, 299, 1999, 4999, 9999, 49999, 99999, 100000])
        GameAnalyticsCustomEvent(player = $obj1, parts = ["player:cube", @rangeBoundary])
    }
}

DATA_REPORT_WORKS_ARCHIVE
{
    WorksArchiveReport(player = $obj1)
}

SEND_CHAT_MESSAGE
{
    If(not $obj1.curChatMsgNum)
    {
        $obj1.curChatMsgNum = 0
    }

    If (not $obj1.chatMsgNum)
    {
        $obj1.chatMsgNum = 0
    }

    $obj1.chatMsgNum = $obj1.chatMsgNum + 1
    $obj1.curChatMsgNum = $obj1.curChatMsgNum + 1
}

DATA_REPORT_CHAT_MESSAGE
{
    If(not $obj1.curChatMsgNum)
    {
        $obj1.curChatMsgNum = 0
    }

    CallTrigger(event = "SET_RANGE_BOUNDARY", num = $obj1.curChatMsgNum, array = [0, 5, 10, 20, 30, 31])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:chat:single_game", @rangeBoundary])

    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $obj1.chatMsgNum, array = [0, 9, 19, 49, 99, 199, 499, 999, 1999, 4999, 9999, 10000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:chat:sum", @rangeBoundary])
}

DATA_REPORT_DRESS_NUM
{
    $num = 0
    $dressStoreIds = GetWorldVar(key = "dressStoreIds")
    Foreach(array = $dressStoreIds, key = "storeId")
    {
        $storeItems = GetStoreById(storeId = $storeId)
        Foreach(array = $storeItems, key = "item")
        {
            $itemDict = NewDictionary($item)
            $index = DictionaryGet(dict = $itemDict, key = "index")
            $status = GetStoreItemStatus(player = $obj1, storeId = $storeId, index = $index)
            If ($status >= 1)
            {
                $num = $num + 1
            }
        }
    }
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $num, array = [0, 2, 5, 10, 20, 30, 50, 51])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:dress", @rangeBoundary])
}

DATA_REPORT_CONSUME_GOLD_NUM
{
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $obj1.consumeGoldNum, array = [99, 399, 999, 2999, 9999, 19999, 29999, 39999, 49999, 59999, 69999, 79999, 89999, 99999, 109999, 119999, 499999, 999999, 1000000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:consume:gold", @rangeBoundary])
}

USER_CONSUME_MONEY
{
    If ($coinName == "green_currency" and $count > 0)
    {
        $obj1.consumeGoldNum = $obj1.consumeGoldNum + $count
    }
}

DATA_REPORT_RELEASE_STATE_SUM
{
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $obj1.releaseStateNum, array = [0, 9, 19, 49, 99, 199, 499, 999, 1999, 2999, 3999, 4999, 5999, 6999, 7999, 8999, 9999, 10000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:remove:status", @rangeBoundary])
}

USER_RELEASE_STATE_SUM
{
    $obj1.releaseStateNum = $obj1.releaseStateNum + 1
}

DATA_REPORT_FAMILY_NUM
{
    If(not $obj1.singleGameCreateFamilyNum)
    {
       $obj1.singleGameCreateFamilyNum = 0
    }

    -- 统计单次游戏创建家庭的数量
    $num = $obj1.singleGameCreateFamilyNum
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $num, array = [0, 2, 3])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["family:create:single_game", @rangeBoundary])

    -- 统计玩家创建家庭的总数
    $num = $obj1.createFamilyNum
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $num, array = [0, 9, 19, 49, 99, 199, 499, 999, 1999, 4999, 9999, 10000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["family:create:sum", @rangeBoundary])


    If(not $obj1.singleGameJoinFamilyNum)
    {
        $obj1.singleGameJoinFamilyNum = 0
    }

    -- 统计单次游戏加入家庭的数量
    $num = $obj1.singleGameJoinFamilyNum
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $num, array = [0, 2, 3])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["family:join:single_game", @rangeBoundary])

    -- 统计玩家加入家庭的总数
    $num = $obj1.joinFamilyNum
    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $num, array = [0, 9, 19, 49, 99, 199, 499, 999, 1999, 4999, 9999, 10000])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["family:join:sum", @rangeBoundary])
}

DATA_REPORT_FAMILY_DURACTION
{
    -- 统计家庭存活时间
    $startTime = DictionaryGet(dict = @FamilyCreateDuration, key = $teamId)

    If(not $startTime)
    {
        Return()
    }
    
    $duration = (GetGameTime() - $startTime) / 20 / 60

    CallTrigger(event = "SET_RANGE_BOUNDARY" , num = $duration, array = [5, 10, 20, 30, 60, 120, 180, 181])
    GameAnalyticsCustomEvent(player = $obj1, parts = ["family:keep:time", @rangeBoundary])
}

DATA_REPORT_PALETTE_GUIDE_STEP --params: step
{
    GameAnalyticsCustomEvent(player = $obj1, parts = ["player:guide", $step])
}

STORE_BUY_GOODS_SUCCESSFUL
{
    GameAnalyticsCustomEvent(player = $obj1, parts = ["buy:goods:store", ToString($storeId), ToString($index)])
}

SHOW_EDIT_FAMILY_NAME_UI
{
    $title = {
        name = "ui_edit_title_name"
    }

    $inputTitle = {
        name = "ui_edit_input_name"
    }

    $buttons = [
        {
            event = "cancel",
            normalImage = "set:tip_dialog.json image:btn_big_blue",
            pushedImage = "set:tip_dialog.json image:btn_big_blue",
            name = "ui_cancel"
        },
        {
            event = "EDIT_TEAM_NAME_BUTTON_SURE",
            normalImage = "set:tip_dialog.json image:btn_big_green",
            pushedImage = "set:tip_dialog.json image:btn_big_green",
            name = "ui_sure"
        }
    ]

    $contents = {
        title = $title,
        inputTitle = $inputTitle,
        buttons = $buttons,
        text = $name,
        textLength = 15
    }

    ShowInputDialog(entity = $obj1, contents = $contents)
}

EDIT_TEAM_NAME_BUTTON_SURE
{
    If(not IsPlayer(entity = $obj1))
    {
        Return()
    }

    $teamId = GetEntityTeam(entity = $obj1)
    If(not $teamId or $teamId == 0)
    {
        Return()
    }

    $name = FilterWord(msg = $name, len = 15) or ""
    DictionarySet(dict = @FamilyName, key = $teamId, value = $name)

    $entityList = GetTeamEntityList(teamId = $teamId)
    ForeachDictionary(keyName = "objID", valueName = "entity", dict = NewDictionary($entityList))
    {
        If(IsPlayer(entity = $entity))
        {
            UpdateUIData(player = $entity, ui = "win_team_name", data = $name)
        }
    }
}

--交易内容
REQ_TRADE()
{
    If($obj1.trading){
        ShowTip(entity = $obj2, tipType = 1, textKey = "gui.target.trading")
        Return()
    }
    $Context = {
        obj2 = $obj1
    }
    ShowWarmPrompt(player = $obj2, sureEvent = "CALL_TRADE_REQ", noEvent = "CALL_TRADE_REQ", context = $Context, disableClose = true)
}
CALL_TRADE_REQ()
{
    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_cancel",
        rightCoinId = nil,
        rightContent = "ui_sure"
    }
    $content = {
        msg = "gui_request_trade",
        args = [GetEntityName(entity = $obj1)]
    }
    $tipType = 5
    ShowDialogTip(entity = $obj2, tipType = $tipType,p1 = "ui_tip", p2 = $content, p3 = $btnInfo, event = "SURE_DO_TRADE", context = {obj2 =$obj1},
    dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
}
SURE_DO_TRADE()
{
    If($button == "left" or $button == "close"){
        ShowTip(entity = $obj2, tipType = 1, textKey = "gui_trade_refuse")
        Return()
    }    
    If($obj1.trading or $obj2.trading){
        ShowTip(entity = $obj1, tipType = 1, textKey = $obj1.trading and "gui.trading.cantTrading" or "gui.ohthertrading.cantTrading" )
        ShowTip(entity = $obj2, tipType = 1, textKey = $obj2.trading and "gui.trading.cantTrading" or "gui.ohthertrading.cantTrading")
        Return()
    }
    $Context = {
        obj1 = $obj1,
        obj2 = $obj2
    }
    $obj1.trading = true
    $obj2.trading = true
    ShowWarmPrompt(player = $obj1, sureEvent = "SURE_TRADE_RISK", noEvent = "SURE_TRADE_RISK", context = $Context, disableClose = true)
}
SURE_TRADE_RISK()
{
    $trayType =  [21, 22, 23, 24 ]
	$itemFilters = {
		
    }
    --RequestTrade(player = $obj2, target = $obj1, itemTrayType = $trayType, itemFilters = $itemFilters)
    CreateTrade(player1 = $obj2, player2 = $obj1, itemTrayType = $trayType, itemFilters = $itemFilters)
}
TRADE_CAR()
{
    $tipType = 0
    ShowDialogTip(entity = $obj1, tipType = $tipType,p1="gui.hint",p2="item.pick.bag",p3="sure", event = "SHOW_TRADE_CAR",context = {car = $car},
        _dialogContinuedTime =  ArrayGet(array = ArrayGet(array = @ShowDialogTipTimeTable, index = $tipType  + 1), index = 1))
}
SHOW_TRADE_CAR()
{
    Foreach(array = $car, key = "fullName"){
        ShowRewardItemEffect(fullName = $fullName, count = 1, type = "Item", player = $obj1)
    }
}

TOGGLE_MAIN_UI  --点击状态详情时，隐藏或显示主界面UI, show为true时显示主界面UI
{
    If($show)
    {
        --显示主界面UI
        If(not $obj1.showFuncId)
        {
            Return()
        }
        ShowOpenedWnd(player = $obj1, showFuncId = $obj1.showFuncId)
        OperationWindows(player = $obj1, isOpen = true, win = "main_tray_g2020")
        $obj1.showFuncId = nil
    }
    Else
    {
        --隐藏主界面UI
        -- 和照相模式互斥，只要 $obj1.showFuncId 有值就不执行下面的逻辑
        If($obj1.showFuncId)
        {
            Return()
        }

        -- 保留的窗口
        $obj1.showFuncId = HideOpenedWnd(player = $obj1,excluded = {
                a = "playerState",  b="Tip", c = "guide_mask", 
                d = "whiteScreen", e = "title1", f = "title3", 
                g = "title4", h = "title5"
        })

        OperationWindows(player = $obj1, isOpen = false, win = "main_tray_g2020")
        ShowStateUI(player = $obj1)
    }
}

--//新手指引
--存档1：指引玩家进行 换装装扮。
GUIDE_STEP10()--第一次进来，选择体格后进行谈话：10
{
    If(not ($obj1.guideStep >= @FirstInto and $obj1.guideStep<@DressDialog)){
        Return()
    }
    $obj1.guideStep = 10
    SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = $obj1.guideStep),canBack = true)
    ShowGuidePop(player = $obj1, event = "OPEN_MAIN_EXTENSION",context = {obj1 = $obj1}, texts = [
        "guide.welcome",
        "guide.goto.dress"
    ],btnText = ["next_page", "ui_begin"])
}
OPEN_MAIN_EXTENSION()--打开导航ui，让玩家点击 装备ui: 11
{
    OpenMainExtension(player = $obj1)
    $obj1.guideStep = 11
    SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = $obj1.guideStep),canBack = true)
}
STEP11_FINISH() --在装扮ui的时候进行谈话：  12, 空操作
{
    OperationWindows(win = "dressArchive", isOpen = true, player = $obj1)
    OpenMainExtension(player = $obj1, open = false)
    $obj1.canDressHouse = true
    $obj1.guideStep = 12
    ShowGuidePop(player = $obj1, event = "DESS_GUIDE",context = {obj1 = $obj1}, texts = [
        "guide.alotof.dress",
        "guide.you.can.try.dress"
    ], btnText = ["next_page", "ui_begin"])
}
CLOSE_DRESS() --关闭装扮商店ui后，进行谈话：进入下一个存档
{
    If($obj1.canDressHouse){
        $obj1.canDressHouse = false
        CallTrigger(event = "GUIDE_HOUSE", object = $obj1)
    }
}

--存档2： 指引玩家装扮 房子
GUIDE_HOUSE(){
    If(not ($obj1.guideStep >= @DressDialog and $obj1.guideStep < @NoneHouse)){
        Return()
    }
    $obj1.guideStep = @DressDialog
    ShowGuidePop(player = $obj1, event = "GUIDE_CLICK_DRESS_HOUSE",context = {obj1 = $obj1}, texts = [
        "guide.you.are.beautiful",
        "guide.you.in.your.house",
        "guide.you.can.dress.your.house"
    ], btnText=["next_page", "next_page", "ui_begin"])
}
GUIDE_CLICK_DRESS_HOUSE() --让玩家点击 装扮房子： 13
{
    $obj1.guideStep = @DressHouse
    SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = $obj1.guideStep),canBack = true)
}
STEP13_FINISH() -- 玩家点击装扮家后，None自由操作： 14
{
    $obj1.guideStep = @NoneHouse
    SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = $obj1.guideStep),canBack = true)
}

--存档3： 指引玩家去游乐场 ，状态指引
START_GUIDE_STEP14()--指引去游乐场 //存档3
{
    $uiList = [
        "priShop", "familyAlbum", "dressArchive", 
        "party_list", "bag_g2020", "goldShop", 
        "singleTeam", "friend", "dressStore"
    ]
    Foreach(array = $uiList ,key = "ui"){
        OperationWindows(win = $ui, isOpen = false, player = $obj1)
    }
    If(not $obj1.checkSignIn and  CheckSignInShow(player = $obj1)){
        $obj1.goPlayerguide = true
        $obj1.checkSignIn = true
    }Else{
        CallTrigger(event = "CALL_GO_TO_PLAYGROUND", object = $obj1)
    }
}
CLOSE_SIGN_IN()--关闭签到后,
{
    If($obj1.goPlayerguide){
        $obj1.goPlayerguide = false
        CallTrigger(event = "CALL_GO_TO_PLAYGROUND", object = $obj1)
    }
}
CALL_GO_TO_PLAYGROUND()-- 开始引导玩家去游乐场对话
{
    ShowGuidePop(player = $obj1, event = "OPEN_PLAYGROUND_BUFF",context = {obj1 = $obj1}, texts = [
        "guide.you.are.boring",
    ], btnText=["guide_yes"])
}
OPEN_PLAYGROUND_BUFF()--开起游乐场buff，
{
    CallTrigger(object = $obj1, event = "FUNC_STATE_GENERATE", stateBase = "region", col = 1, skill = "myplugin/skill_state_region")
    $obj1.guideStep = 15
    SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = $obj1.guideStep),canBack = true)
}
STEP15_FINISH()
{
    $obj1.guideStep = 16
    SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = $obj1.guideStep),canBack = true)
}
STEP16_FINISH()--点击开始GPS:指引去游乐场
{
    If($obj1.guideStep == 16){
        $obj1.guideStep = @PlayGoGround
        SetGuideStep(player = $obj1, step = Concat(p1 = "step", p2 = $obj1.guideStep),canBack = true)
    }
}

--存档4指引去礼品npc。
--不配置guide, 全部使用BTS逻辑。
GUIDE_GIFT()
{
    ShowGuidePop(player = $obj1, event = "GUIDE_GO_TO_GIFT",context = {obj1 = $obj1}, texts = [
        "guide.do.task.reward",
        "guide.GF.have.gift.give.you"
    ], btnText= ["next_page", "begin_GPS"])
}
GUIDE_GO_TO_GIFT()-- 指引去礼品
{
    If($obj1.guideStep == @GuideGift){
        $obj1.canGoGift = false
        $obj1.goGiftGps = true
        CallTrigger(event = "SHOW_GO_GIFT_GPS", object = $obj1)
    }
}
SHOW_GO_GIFT_GPS
{
    If(not $obj1.goGiftGps and $obj1.guideStep~=@guideEnd){
        Return()
    }
    $map = GetPlayerMap(player = $obj1)
    $owner = GetMapVar(map = $map, key = "owner")
    If($owner){
        $door = GetObjectVar(obj = $owner , key = "insideDoor")
        If($door){
            $obj1.giftGPS = GetEntityPosition(entity = $door)
        }
    }Else{
        $mapName = GetEntityMapName(entity = $obj1)
        If($mapName ~= "map001"){
            $mapEntry = NewDictionary(GetMapConfig(name = $mapName, key = "mapEntry"))
            $cfg = DictionaryGet(dict = $mapEntry, key = "map001")
            $mapEntity = GetMapConfig(name = $mapName, key = "entity")
            $minDis = GetPosDistance()
            Foreach(array = $cfg, key = "cfgName"){
                Foreach(array = $mapEntity, key = "entityDict"){
                    $dict = NewDictionary($entityDict)
                    $name = DictionaryGet(dict = $dict, key = "cfg")
                    If($name == $cfgName){
                        $newPos = DictionaryGet(dict = $dict, key = "pos")
                        $dis = GetPosDistance(pos1 = $okPos, pos2 = $newPos)
                        If(not $okPos || $dis < $minDis){
                            $okPos = $newPos
                            $minDis = $dis
                        }
                    }
                }
            }
            $obj1.giftGPS = $okPos or @guidePos or {x = 180.782242, y = 13.006246, z = 190.036407}
        }Else{
            $obj1.giftGPS = @guidePos or {x = 180.782242, y = 13.006246, z = 190.036407}
        }
    }
    CallTrigger(object = $obj1, event = "FUNC_SET_GUIDE_TARGET", pos = $obj1.giftGPS)
}

CONTINUE_GUIDESTEP()--判断玩家在那个阶段，继续进行指引
{
    If(not GetWorldVar(key = "doGuide") or $obj1.closeGuide){
        Return()
    }
    $map = GetPlayerMap(player = $obj1)
    $owner = GetMapVar(map = $map, key = "owner")
    $step = $obj1.guideStep
    If($step>=@FirstInto and $step<@DressDialog and $obj1.curGoStep ~= 1){ --存档1：未完
        $obj1.curGoStep = 1
        CallTrigger(event = "GUIDE_STEP10", object = $obj1)
    }ElseIf($step>=@DressDialog and $step<@NoneHouse and $obj1.curGoStep ~= 2){ --存档2：未完
        $obj1.curGoStep = 2
        CallTrigger(event = "GUIDE_HOUSE", object = $obj1)
    }ElseIf($step >= @NoneHouse and $step < @PlayEnd and $obj1.curGoStep ~= 3 and not $owner) -- 存档3：未完
    {
        $obj1.curGoStep = 3
        CallTrigger(event = "START_GUIDE_STEP14", object = $obj1)
    }ElseIf($step == @GuideGift and $obj1.curGoStep ~= 4 and not $owner){
        $obj1.curGoStep = 4
        CallTrigger(event = "GUIDE_GIFT", object = $obj1)
    }
    If($step~=@GuideEnd){
        HideCloseGPS(player = $obj1, hide = true)
    }Else{
        HideCloseGPS(player = $obj1, hide = false)
    }
}
--拿到礼物
GIFT_GUIDE_OVER()
{
    AddItem(entity = $obj1, cfg = "myplugin/guide_gift", count = 1)
    ShowRewardItemEffect(type = "Item", count = 1, fullName = "myplugin/guide_gift", player = $obj1)
}

--告诉玩家引导未完成
TIP_GUIDE_UNDONE()
{
    ShowTip(entity = $obj1, tipType = 1,textKey = "guide.undone", keepTime = 40)
}
GUIDE_RED_POINT()
{
    If($hideParty){
        $obj1.guideParty = false
    }
    If($hideWork){
        $obj1.guideWork = false
    }
    UpdateUIData(player = $obj1, ui = "mainExtension", data = {
        guideEnd = $obj1.guideStep == @GuideEnd,
        guideWork = $obj1.guideWork,
        guideParty = $obj1.guideParty
    })
}
