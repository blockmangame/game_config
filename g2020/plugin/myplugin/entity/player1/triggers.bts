PLAYER_INTERACTION(debug = false){
    UpdateObjectInteractionUI(cfgKey = "interaction_choices", player = $obj2, target = $obj1, show = true)
}

INTERACTION_FEED(debug = false){
    -- If(not IsPlayer(entity = $obj1))
    -- {
    --     Return()
    -- }
    
    $item = GetEntityHandItem(entity = $obj2)
    If(not $item)
    {
        Return()
    }
    $state = GetConfigVar(obj = $item, key = "state")
    $itemname = GetConfigVar(obj = $item, key = "itemname")
    $action = [
        [
            $obj1,
            GetConfigVar(obj = $item, key = "feededAction"),
            GetConfigVar(obj = $item, key = "feededActionTime")
        ],
        [
            $obj2,
            GetConfigVar(obj = $item, key = "feedAction"),
            GetConfigVar(obj = $item, key = "feedActionTime")
        ]
    ]
    ConsumeItem(item = $item, num = 1)
    CallTrigger(event = "FUNC_STATE_ADD_INTERACTLIST", entities = [$obj1, $obj2])
    Foreach(array = $action, key = "act")
    {
        PlayAction(
            entity = ArrayGet(array = $act, index = 1),
            includeSelf = true,
            actionName = ArrayGet(array = $act, index = 2),
            actionTime = ArrayGet(array = $act, index = 3)
        )
    }
    ShowBubbleMsg(
        entity = $obj1,
        textKey = "thank_sb_food",
        textP1 = GetEntityName(entity = $obj2),
        textP2 = $itemname
    )
    CallTrigger(
        object = $obj1,
        event = "FUNC_STATE_RELEASE",
        state = $state
    )
}
CHECK_LEAVE_PARTY_FROM_DOOR(debug = false){
    If($obj1.inSelfParty == 1){
        ShowDialogTip(entity = $obj1, p1 = "gui.party.ask.close", event = "CHECK_CLOSE_PARTY", tipType = 2)
    }
    Else{
        ShowDialogTip(entity = $obj1, p1 = "gui.party.ask.exit", event = "ASK_SHOW_PARTY_LIST", tipType = 2)
    }
}
ASK_SHOW_PARTY_LIST(debug = false){
    If($result == false) {
        LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
        Return()
    }
    ShowDialogTip(entity = $obj1, p1 = "gui.party.ask.show.party", event = "CHECK_EXIT_PARTY", tipType = 2)
}
CHECK_CLOSE_PARTY(debug = false){
    If($result == false) {Return()}
    CloseParty(object = $obj1)
}
CHECK_EXIT_PARTY(debug = false){
    If($result == false) {Return()}
    LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
}
LEAVE_PARTY_SUCCESS(debug = false){
    $obj1.inPartyOwnerId = 0
    GotoOtherServer(player = $player)
}
CHECK_IN_PARTY(debug = false){
    $userId = GetPlayerUserID(player = $obj1)
    $inPartyOwnerId = $obj1.inPartyOwnerId
    If($inPartyOwnerId ~= 0){
        UpdatePartyInnerSettingUI(player = $obj1, inPartyOwnerId = $inPartyOwnerId, isShow = true)
        If($userId == $inPartyOwnerId){
            $obj1.inSelfParty = 1
            --My Party!!!!
            --broadcast!!!!!
        }
        Else{
            --In Party
            $obj1.inSelfParty = 0
            $partyOwner = GetPlayerByUserId(userId = $inPartyOwnerId)
            If(not $partyOwner){
                Return()
            }
            CallTrigger(fromInParty = true, target = $partyOwner, event = "PLAYER_ON_VISIT", object = $obj1)
        }
    }
}
ENTITY_ENTER
{
    CallTrigger(event = "CHECK_IN_PARTY", object = $obj1)
    UpdateUIData(player = $obj1, ui = "circleProgress", data = {})
    OpenWindows(win = "workTask", player = $obj1)
    CallTrigger(event = "INIT_WORK_TASK", object = $obj1) --初始化打工任务
    If(IsPlayer(entity = $obj1))
    {
        $playerName = GetEntityName(entity = $obj1)

        If($obj1.nickName == "defaultNickName")
        {
            $obj1.nickName = $playerName
        }

        If($obj1.nickName ~= $playerName)
        {
            SetEntityName(entity = $obj1, name = $nickName)
        }

        $obj1.isReadyReward = false
        $obj1.role = @adult
        $obj1.scaleBuff = nil
        $obj1.boundingBuff = nil

        $obj1.requestFamilyPlayer = nil

        CallTrigger(event = "ADD_MONEY", object = $obj1)
        If($obj1.inPartyOwnerId == 0){--in party
            CallTrigger(event = "SHOW_SELECT_ROLE", object = $obj1)
        }
		
		CallTrigger(event = "SET_DRESS_ARCHIVE", object = $obj1)
        CallTrigger(event = "INIT_PLAYER_DRESS", object = $obj1)


        CallTrigger(event = "CHANGE_DANCE_SKILL", obj1 = $obj1, newSkill = $obj1.danceUseItem)

        LoadPlayerAppDress(player = $obj1, event = "HTTP_PURCHASED_DRESS_CALL_BACK")

        -- test data
        --SetSkin(entity = $obj1, skinName = "custom_wing", skinValue = 25)
        --SetSkin(entity = $obj1, skinName = "custom_scarf", skinValue = 3)
        --SetSkin(entity = $obj1, skinName = "clothes_tops", skinValue = 20)
        --SetSkin(entity = $obj1, skinName = "custom_shoes", skinValue = 40)
        --SetSkin(entity = $obj1, skinName = "clothes_pants", skinValue = 35)
        --SetSkin(entity = $obj1, skinName = "custom_hair", skinValue = 5)
        --SetSkin(entity = $obj1, skinName = "custom_face", skinValue = 5)
        --SetSkin(entity = $obj1, skinName = "custom_glasses", skinValue = 3)
        --SetSkin(entity = $obj1, skinName = "custom_hat", skinValue = 5)
        --SetSkin(entity = $obj1, skinName = "custom_tail", skinValue = 5)

        CallTrigger(event = "FUNC_LOAD_NEW_WORKS")
        CallTrigger(event = "FUNC_LOAD_EXCELLENT_WORKS")
    }
------------------------------------------------------------------------------------------------------------------------------ 分割线
    ------------------------------------------ 当前选择存档 $curSelectHouse
    $curSelectHouse = {}
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    If(not $houseVars or ArraySize(array = $houseVars) == 0){ -- 第一次进入游戏的玩家
        Test("----------------------- First Login")
        $houseVars = [
                {
                    houseCfg = "myplugin/house_default",
                    houseSelectColor = "myplugin/house_color_buff_11",
                    houseInsideFurnishing = [
                        {pos = {x = 1648,y=13,z=-574},yaw = 0,cfg = "myplugin/test_dec_entity1",furnishingId = "11111",isOldFurnishing = "true"},
                        {pos = {x = 1650,y=13,z=-574},yaw = 90,cfg = "myplugin/test_dec_entity2",furnishingId = "222222",isOldFurnishing = "false"},
                    ],
                    houseInsideRegionColors = [
                        ["house_default_inside_map_area_1",["myplugin/acacia_door_10","myplugin/dark_oak_stairs04","myplugin/cotton_stage_0"]],
                        ["house_default_inside_map_area_2",["myplugin/acacia_door_10","myplugin/dark_oak_stairs04","myplugin/cotton_stage_0"]]
                    ],
                    isCurEquip = "enable",
                    houseName = "Sakura NeNe",
                    houseType = "house_type_big_house",
                    houseId = "1234567",
                    houseInsideDoor = "myplugin/house_base_inside_door"
                }
            ]
        SetObjectVar(obj = $obj1, key = "houseVars", value = $houseVars)
    }

    $dict = {}
    Foreach(array = $houseVars, key = "house"){
        $dict = NewDictionary($house)
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            Break()
        }
    }
    $obj1.curHouseCfg = DictionaryGet(dict = $dict, key = "houseCfg")
    ------------------------------------------ 获得当前地图上的空出的区域，创建房子 * 
    -- 区域 <region------owner(需要使用GetRegionOwner)> 房子 <house-------owner> 玩家，可通过区域获取区域上的房子，通过房子获得所属玩家。 反向同理
    $regions = GetAllRegion(map = GetEntityMap(entity = $obj1))
    Foreach(array = $regions, key = "region"){
        If(not GetRegionOwner(region = $region) and GetRegionConfig(region = $region, key = "isHouseRegion")){
            CallTrigger(object = $obj1, event = "CREATE_HOUSE_OUTSIDE", region = $region, 
                houseCfg = DictionaryGet(dict = $dict, key = "houseCfg"),
                houseColor = DictionaryGet(dict = $dict, key = "houseSelectColor"))
            Break()
        }
    }
    ------------------------------------------ 玩家进入游戏就进入自己房间
    $house = GetObjectVar(obj = $obj1, key = "house")
    $houseInsideMap = GetObjectVar(obj = $house, key = "houseInsideMap")
    $yaw = 0
    If($obj1.curHouseCfg){
        $yaw = GetEntityCfg(fullName = $obj1.curHouseCfg, key = "insideMapRotationYaw")
    }
    SetEntityPosition(map = $houseInsideMap, entity = $obj1, ry = $yaw,
        pos = GetMapInitPos(map = $houseInsideMap) or GetEntityPosition(entity = $obj1))
    CallTrigger(object = $obj1, event = "SHOW_TITLE_BAR") 
------------------------------------------------------------------------------------------------------------------------------ 分割线
}

------------------------------------------------------------------------------------------------------------------------------ 分割线
TEST_DATA{ -- 保存进数据库的数据伪代码 -- 旧 11-30
    Table(
        houseVars = [ -- all house 当前entity的所有房子
            [ --   arr[1] = houseCfg, arr[2] = houseSelectColor, 
                -- arr[3] = houseInsideFurnishing, arr[4] = houseInsideRegionColors, arr[5] = enable 当前选中房子标识/ disable 未选中
                -- arr[6] = curHouseName, arr[7] = curHouseType, arr[8] = ID, arr[9] = 房子内部门
                "myplugin/xxx...", -- houseCfg 
                "myplugin/xxx...", -- houseSelectColor，是buff来着 -- 外部颜色不影响内部
                [ -- houseInsideFurnishing , 房子内部物品摆放
                    -- pos是相对坐标，每个map都有一个initPos，坐标都是这个initPos+pos
                    -- 绝对坐标也行
                    [{x = "xx", y = "xx", z = "xx"},0,"myplugin/xxx...","id","true/false"],
                    [{x = "xx", y = "xx", z = "xx"},0,"myplugin/xxx...","id","true/false"]
                    -- {pos,yaw,cfg,全局唯一id:furnishingId（当前obj的id）,是否是旧家具，下线后则会将当前玩家全部房子的全部家具设置成true，即是旧家具}
                ],
                [ -- houseInsideRegionColors 房子内部区域颜色
                    ["regionkey", ["myplugin/xxx...","myplugin/xxx...","myplugin/xxx..."]], -- 第一个key是对应的region key，通过这个key获取这个区域region/获取到配置
                    ["regionkey", ["myplugin/xxx...","myplugin/xxx...","myplugin/xxx..."]] -- 第二个数组对应的是上面获取到的region的childRegionKey属性中对应
                                                                                        -- 该region的子region使用的方块！
                ],
                "enable", -- cur select house 有这个标志就是 当前选择/出生的房子
                "houseName", -- cur house name 当前房子的名字
                "houseType", -- cur house type 当前房子的类型
                "houseKey", -- cur house id 房子唯一ID，Concat(p1 = GetTime(), p2 = GetGameTime(), p3 = Random(min = 0, max = 999999))
                "houseInsideDoor" -- cur house InsideDoor
            ],
            [
                -- ... 同上，不是当前选择则第五个参数为disable
            ]
        ]
    )
    Table(Demo = [[[],[]],[[],[]]])
    Table( -- 保存进数据库的数据伪代码 -- 新 11-30
        houseVars = [ -- all house 当前entity的所有房子
            {
                houseCfg = "myplugin/xxx...", -- houseCfg 
                houseSelectColor = "myplugin/xxx...", -- houseSelectColor，是buff来着 -- 外部颜色不影响内部
                houseInsideFurnishing = [ -- houseInsideFurnishing , 房子内部物品摆放
                    -- pos是相对坐标，每个map都有一个initPos，坐标都是这个initPos+pos
                    -- 绝对坐标也行
                    {pos = {x = "xx", y = "xx", z = "xx"},yaw = 0,cfg = "myplugin/xxx...",
                        furnishingId = "id",isOldFurnishing = "true/false", saveSkinList = [{skinName = "xxx", skin = "xxx"}]}
                    -- {pos,yaw,cfg,全局唯一id:furnishingId（当前obj的id）,
                    -- isOldFurnishing 是否是旧家具，下线后则会将当前玩家全部房子的全部家具设置成true，即是旧家具
                    -- saveSkinList 特殊家具需要保存皮肤列表（需要在该家具中配一个saveSkinList 要保存的皮肤列表）}
                ],
                houseInsideRegionColors = [ -- houseInsideRegionColors 房子内部区域颜色
                    ["regionkey", ["myplugin/xxx...","myplugin/xxx...","myplugin/xxx..."]], -- 第一个key是对应的region key，通过这个key获取这个区域region/获取到配置
                    ["regionkey", ["myplugin/xxx...","myplugin/xxx...","myplugin/xxx..."]] -- 第二个数组对应的是上面获取到的region的childRegionKey属性中对应
                                                                                        -- 该region的子region使用的方块！
                ],
                isCurEquip = "enable", -- cur select house 有这个标志就是 当前选择/出生的房子
                houseName = "houseName", -- cur house name 当前房子的名字
                houseType = "houseType", -- cur house type 当前房子的类型
                houseId = "houseKey", -- cur house id 房子唯一ID，Concat(p1 = GetTime(), p2 = GetGameTime(), p3 = Random(min = 0, max = 999999))
                houseInsideDoor = "houseInsideDoor" -- cur house InsideDoor
            },{}

        ]
    )
}

CREATE_HOUSE_OUTSIDE{
    $yaw = GetRegionConfig(region = $region, key = "regionHouseYaw")
    $housePosOffset = GetEntityCfg(fullName = $houseCfg, key = "housePosOffset") or {x = 0, y = 0, z = 0}
    $house = CreateNpc(pos = ComputeV3(p1 = GetRegionCenter(region = $region), op = "add", p2 = V3RotationYaw(vector = $housePosOffset, yaw = $yaw)), 
        map = GetEntityMap(entity = $obj1), cfgName = $houseCfg)
    SetEntityYaw(entity = $house, rotationYaw = $yaw)
    SetBodyYaw(entity = $house, yaw = $yaw)

    AddEntityBuff(entity = $house, cfg = GetConfigVar(obj = $house, key = "houseCreateBuff"), buffTime = 200)
    -- 改变房子外部颜色，通过加buff
    AddEntityBuff(entity = $house, cfg = $houseColor)

    SetRegionOwner(region = $region, owner = $house)
    SetObjectVar(obj = $house, key = "owner", value = $obj1)

    SetObjectVar(obj = $obj1, key = "house", value = $house)
    SetObjectVar(obj = $house, key = "region", value = $region)
}

REMOVE_HOUSE_OUTSIDE{
    $house = GetObjectVar(obj = $obj1, key = "house")
    $region = GetObjectVar(obj = $house, key = "region")
    SetRegionOwner(region = $region, owner = nil)
    KillEntity(entity = $house)
}

ENTITY_LEAVE{ 
    ------------------------------------------ 玩家退出，清掉房子 邮箱 门，重置区域owner为nil
    CallTrigger(object = $obj1, event = "REMOVE_HOUSE_OUTSIDE")
    ------------------------------------------ 更新全部家具为旧家具
    CallTrigger(object = $obj1, event = "UPDATE_FURNITURE_STATUS")
    ----------------------------------------- 玩家退出，保存身上穿搭
    CallTrigger(object = $obj1, event = "SAVE_PLAYER_DRESS")
    ---------------------------------------玩家退出，删除掉暂存在数据库“dressArchive”字段中的bm装扮信息
    CallTrigger(object = $obj1, event = "REMOVE_BM_DRESS")
    CallTrigger(object = $obj1, event = "CHECK_LEAVE_PARTY")
}
CHECK_LEAVE_PARTY(debug = false){
    If($obj1.inSelfParty == 1){
        CloseParty(object = $obj1)
        Return()
    }
    If($obj1.inSelfParty == 0){
        LeaveParty(player = $obj1, targetUserId = $obj1.inPartyOwnerId)
    }
}
UPDATE_FURNITURE_STATUS{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars") or {}
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        $furnitures = DictionaryGet(dict = $dict, key = "houseInsideFurnishing")
        ForLoop(from = 1, to = ArraySize(array = $furnitures or {}), key = "fIndex"){
            $fDict = NewDictionary(ArrayGet(array = $furnitures, index = $fIndex))
            DictionarySet(dict = $fDict, key = "isOldFurnishing", value = true)
            DictionarySet(dict = $fDict, key = "furnishingId", value = 0)
            ArraySet(array = $furnitures, index = $fIndex, value = DictionaryToTable(dict = $fDict))
        }
        ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $dict))
    }
}

UPDATE_HOUSE{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") ~= "enable" and $houseKey == DictionaryGet(dict = $dict, key = "houseId")){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $newHouseDict = $dict
        }
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHouseDict = $dict
        }
    }
    If(not $newHouseDict){
        DictionarySet(dict = $curHouseDict, key = "houseSelectColor", value = $curSelectKey)
        $index = DictionaryGet(dict = $curHouseDict, key = "curHouseVarsIndex")
        DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = nil)
        ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHouseDict))
        CallTrigger(object = $obj1, event = "CHANGE_HOUSE_COLOR", oldHouseColor = $oldSelectKey, houseColor = $curSelectKey)
    }Else{
        DictionarySet(dict = $curHouseDict, key = "isCurEquip", value = "disable")
        $index = DictionaryGet(dict = $curHouseDict, key = "curHouseVarsIndex")
        DictionarySet(dict = $curHouseDict, key = "curHouseVarsIndex", value = nil)
        ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHouseDict))
        DictionarySet(dict = $newHouseDict, key = "isCurEquip", value = "enable")
        DictionarySet(dict = $newHouseDict, key = "houseSelectColor", value = $curSelectKey)
        $index = DictionaryGet(dict = $newHouseDict, key = "curHouseVarsIndex")
        DictionarySet(dict = $newHouseDict, key = "curHouseVarsIndex", value = nil)
        ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $newHouseDict))
        CallTrigger(object = $obj1, event = "CHANGE_HOUSE", 
            newHouse = DictionaryGet(dict = $newHouseDict, key = "houseCfg"), houseColor = $curSelectKey)
    }
    ShowGenericListDisplayBox(entity = $obj1, closeWin = true)
}

CHANGE_HOUSE_COLOR{ -- 换色
    $curHouse = GetObjectVar(obj = $obj1, key = "house")
    $oldBuff = GetEntityTypeBuff(entity = $curHouse, key = "fullName", value = $oldHouseColor)
    If($oldBuff){
        RemoveEntityBuff(entity = $curHouse, buff = $oldBuff)
    }
    AddEntityBuff(entity = $curHouse, cfg = $houseColor) -- 通过buff换skin

    -- 换色特效
    $effectBuff = GetEntityTypeBuff(entity = $curHouse, key = "fullName", value = GetConfigVar(obj = $house, key = "houseCreateBuff"))
    If($effectBuff){
        RemoveEntityBuff(entity = $curHouse, buff = $effectBuff)
    }
    AddEntityBuff(entity = $curHouse, cfg = GetConfigVar(obj = $curHouse, key = "houseCreateBuff"), buffTime = 200)
}

CHANGE_HOUSE{ -- 换房子/存档
    $region = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "region")
    $obj1.curHouseCfg = $newHouse
    ------------------------------------------ 改变房子(actor)，直接杀掉原来的，新建新的
    CallTrigger(object = $obj1, event = "REMOVE_HOUSE_OUTSIDE")
    ShowTip(entity = $obj1, tipType = 1, textKey = "house_change")

    CallTrigger(object = $obj1, event = "CREATE_HOUSE_OUTSIDE", region = $region, houseCfg = $newHouse, houseColor = $houseColor)
}



-------------------------------------- ui/btn/event
HOUSE_TAB_EVENT{
    Test("---------HOUSE_TAB_EVENT")
    If(not $key or "0" == $key){
        Test("--------- u need buy")
        $listInfoTb = {}
        Foreach(array = GetConfigVar(obj = $obj1, key = "houseStore") or {}, key = "houseFullName"){
            $coinName = GetEntityCfg(fullName = $houseFullName, key = "coinName") or ""
            If("green_currency" == $coinName){
                $coinImg = "set:jail_break.json image:jail_break_currency"
            }ElseIf("gDiamonds" == $coinName){
                $coinImg = "set:diamond.json image:Diamond-icon2.png"
            }
            ArrayAppend(array = $listInfoTb, value = {
                image = GetEntityCfg(fullName = $houseFullName, key = "defaultColorImage") or "",
                text = GetEntityCfg(fullName = $houseFullName, key = "houseType") or "",
                coinImg = $coinImg or "",
                btnShowText = GetEntityCfg(fullName = $houseFullName, key = "buyMoney") or "",
                context = {houseCfg = $houseFullName}
            })
        }
        ShowGenericListDisplayBox(entity = $obj1, infoTb = {
            uiWin = "genericListDisplayBox3",
            childInfoTb = {
                listInfo = {
                    infoTb = $listInfoTb
                },
                btnInfo = {
                    btnText = "ui_house_buy_house",
                    event = "SURE_BUY_HOUSE"
                }
            }
        }, isOpenChild = true)
        Return()
    }
    Test("--------- u need show")
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars") or {}
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "houseId") == $key){
            $curSelectDict = $dict
            Break()
        }
    }
    -- $curSelectHouse = $houseVar
    If(not $curSelectDict){
        Return()
    }
    -- color
    $selectGvInfo = {}
    $worldAllColor = GetWorldVar(key = "allColor")
    $curHouseColor = GetEntityCfg(fullName = DictionaryGet(dict = $curSelectDict, key = "houseCfg"), key = "allColor")
    Foreach(array = $curHouseColor, key = "entity_color"){
        Foreach(array = $worldAllColor, key = "world_color"){
            If(ArrayGet(array = $entity_color, index = 1) == ArrayGet(array = $world_color, index = 1)){
                ArrayAppend(array = $selectGvInfo, value = {
                    rightImg = ArrayGet(array = $world_color, index = 3),
                    leftImg = ArrayGet(array = $entity_color, index = 2),
                    key = ArrayGet(array = $world_color, index = 2),
                    curSelect = ArrayGet(array = $world_color, index = 2) == DictionaryGet(dict = $curSelectDict, key = "houseSelectColor")
                        and true or false
                })
            }
        }
    } 
    ShowGenericListDisplayBox(entity = $obj1, infoTb = {
        uiWin = "genericListDisplayBox2",
        childInfoTb = {
            upperLayerKey = $key,
            titleTb = {text = DictionaryGet(dict = $curSelectDict, key = "houseName"), event = "EDIT_HOUSE_NAME", 
                context = {houseKey = DictionaryGet(dict = $curSelectDict, key = "houseId"), houseName = DictionaryGet(dict = $curSelectDict, key = "houseName")}},
            selectInfo = {
                selectTitleText = "ui_house_choice_color",
                selectButtomText = DictionaryGet(dict = $curSelectDict, key = "houseType"),
                selectGvInfo = $selectGvInfo
            },
            btnInfo = {
                btnType = 2,
                btnList = [
                    {text = "ui_house_sell_house", event = "SELL_HOUSE", context = { houseKey = $key }},
                    {text = "ui_house_use_house", event = "UPDATE_HOUSE", context = { houseKey = $key },
                        curSelect = DictionaryGet(dict = $curSelectDict, key = "isCurEquip") == "enable"}
                ] 
            }
        }
    }, isOpenChild = true)
}

EDIT_HOUSE_NAME{
    -- 房子改名
    Test("EDIT_HOUSE_NAME", $houseKey, $upperLayerKey, $titleEditText)
    If(not $titleEditText or not $upperLayerKey){
        Return()
    }
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "houseId") == $upperLayerKey){
            DictionarySet(dict = $dict, key = "houseName", value = $titleEditText)
            ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $dict))
            Break()
        }
    }
    $mail = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "mail")
    SetEntityName(entity = $mail, name = $titleEditText)
    ShowGenericListDisplayBox(entity = $obj1, closeWin = true)
    StartTimer(rep = false, time = 1, object = $obj1, obj1 = $obj1, mail = $mail, event = "UPDATE_HOUSE_TAB")
}

UPDATE_HOUSE_TAB{
    CastSkill(skill = "/click", from = $obj1, packet = {targetID = GetObjectID(object = $mail)})
}

SURE_BUY_HOUSE{
    Test("SURE_BUY_HOUSE", $houseCfg)
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars") or {}
    If(not $houseCfg or ArraySize(array = $houseVars) >= (GetConfigVar(obj = $obj1, key = "maxHouseVarsSize") or 8)){
        -- 买房子 成功则关闭界面，失败则不关闭 -- 达到房子上限也不给买
        ShowTip(entity = $obj1, tipType = 1, textKey = "ui_buy_failure")
        Return()
    }
    ------------- 花钱买房 -- 此处判断是否购买失败，失败直接返回
    $buyMoney = GetEntityCfg(fullName = $houseCfg, key = "buyMoney")
    $coinName = GetEntityCfg(fullName = $houseCfg, key = "coinName")
    If(not PayCurrency(entity = $obj1, coinName = $coinName, count = $buyMoney)){
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_house_not_enough_money", time = 40)
        Return()
    }
    ------------- 给房子
    $houseId = Concat(p1 = GetTime(), p2 = GetGameTime(), p3 = Random(min = 0, max = 999999))
    $curSelect = GetEntityCfg(fullName = $houseCfg, key = "defaultColor")
    ArrayAppend(array = $houseVars, value = { -- 购买成功后拼接一个新的房子数据放进entity的houseVars中 -- TEST CODE
            houseCfg = $houseCfg,
            houseSelectColor = $curSelect,
            houseInsideFurnishing = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultFurniture") or [],
            houseInsideRegionColors = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultInsideMapColorTb") or ["", "", ""],
            isCurEquip = "disable",
            houseName = GetEntityCfg(fullName = $houseCfg, key = "houseDefaultName") or "",
            houseType = GetEntityCfg(fullName = $houseCfg, key = "houseType") or "",
            houseId = $houseId,
            houseInsideDoor = GetEntityCfg(fullName = $houseCfg, key = "insideDoor") or "myplugin/house_base_inside_door"
        }
    )
    ShowTip(entity = $obj1, tipType = 1, textKey = "ui_buy_success")
    ShowGenericListDisplayBox(entity = $obj1, closeWin = true)
    CallTrigger(object = $obj1, event = "UPDATE_HOUSE", houseKey = $houseId, curSelectKey = $curSelect)
}

SELL_HOUSE{
    Test("SELL_HOUSE",$houseKey)
    $curSelectDict = nil
    Foreach(array = GetObjectVar(obj = $obj1, key = "houseVars") or {}, key = "houseVar"){
        $dict = NewDictionary($houseVar)
        If(DictionaryGet(dict = $dict, key = "houseId") == $houseKey){
            $curSelectDict = $dict
            Break()
        }
    }
    If(not $curSelectDict){
        Return()
    }
    -- showImage
    $worldAllColor = GetWorldVar(key = "allColor")
    $curHouseColor = GetEntityCfg(fullName = DictionaryGet(dict = $curSelectDict, key = "houseCfg"), key = "allColor")
    Foreach(array = $curHouseColor, key = "entity_color"){
        Foreach(array = $worldAllColor, key = "world_color"){
            If(ArrayGet(array = $world_color, index = 2) == DictionaryGet(dict = $curSelectDict, key = "houseSelectColor") and 
                ArrayGet(array = $world_color, index = 1) == ArrayGet(array = $entity_color, index = 1)){
                $showImage = ArrayGet(array = $entity_color, index = 2)
                Break()
            }
        }
    }
    $sellHouseMoney = 0
    $sellHouseCfg = DictionaryGet(dict = $curSelectDict, key = "houseCfg")
    $sellHouseMoney = $sellHouseMoney + GetEntityCfg(fullName = $sellHouseCfg, key = "sellMoney")
    $sellHouseFurnitures = DictionaryGet(dict = $curSelectDict, key = "houseInsideFurnishing") or {}
    Foreach(array = $sellHouseFurnitures, key = "furniture"){
        $fDict = NewDictionary($furniture)
        $cfg = DictionaryGet(dict = $fDict, key = "cfg")
        $sellMoney = GetEntityCfg(fullName = $cfg, key = "sellMoney")
        If(DictionaryGet(dict = $fDict, key = "isOldFurnishing")){
            $sellMoney = GetEntityCfg(fullName = $cfg, key = "sellByDiscountMoney")
        }
        $sellHouseMoney = $sellHouseMoney + $sellMoney
    }          
    -- showTextTb
    $showTextTb = {textWeightList = [
        {keyText = "ui_house_sell_house_money", valueText = $sellHouseMoney},
        {keyText = "ui_house_sell_house_type", valueText = DictionaryGet(dict = $curSelectDict, key = "houseType")}
    ]}
    ShowGenericListDisplayBox(entity = $obj1, infoTb = {
        uiWin = "genericShowPage",
        childInfoTb = {
            upperLayerKey = $houseKey,
            titleTb = {text = DictionaryGet(dict = $curSelectDict, key = "houseName"), event = "EDIT_HOUSE_NAME", 
                context = {houseKey = DictionaryGet(dict = $curSelectDict, key = "houseId"), houseName = DictionaryGet(dict = $curSelectDict, key = "houseName")}},
            showImage = $showImage,
            showTextTb = $showTextTb,
            btnInfo = {
                btnType = 2,
                btnList = [
                        {text = "ui_sure", event = "SELL_HOUSE_SURE", context = { houseKey = $houseKey}},
                        {text = "ui_cancel", event = "HOUSE_TAB_EVENT", context = { key = $houseKey}}
                    ]
            }
        }
    }, isOpenChild = true)
}

SELL_HOUSE_SURE{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    If(ArraySize(array = $houseVars) <= 1){ -- 最后一套房不能出售
        ShowTip(entity = $obj1, tipType = 1, textKey = "ui_house_sell_cant_sell")
        Return()
    }
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "houseId") == $houseKey){
            $curSelectDict = $dict
            ArrayRemove(array = $houseVars, index = $index)
            Break()
        }
    }
    $newHouseVar = ArrayGet(array = $houseVars, index = 1)
    $newHouseDict = NewDictionary($newHouseVar)
    DictionarySet(dict = $newHouseDict, key = "isCurEquip", value = "enable")
    ArraySet(array = $houseVars, index = 1, value = DictionaryToTable(dict = $newHouseDict))
    CallTrigger(object = $obj1, event = "CHANGE_HOUSE", 
            newHouse = DictionaryGet(dict = $newHouseDict, key = "houseCfg"), houseColor = DictionaryGet(dict = $newHouseDict, key = "houseSelectColor"))

    -- 出售成功，给玩家钱
    $sellHouseCfg = DictionaryGet(dict = $curSelectDict, key = "houseCfg")
    AddCurrency(entity = $obj1, coinName = GetEntityCfg(fullName = $sellHouseCfg, key = "coinName"), 
        count = GetEntityCfg(fullName = $sellHouseCfg, key = "sellMoney"))
    $sellHouseFurnitures = DictionaryGet(dict = $curSelectDict, key = "houseInsideFurnishing") or {}
    Foreach(array = $sellHouseFurnitures, key = "furniture"){
        $fDict = NewDictionary($furniture)
        $cfg = DictionaryGet(dict = $fDict, key = "cfg")
        $sellMoney = GetEntityCfg(fullName = $cfg, key = "sellMoney")
        If(DictionaryGet(dict = $fDict, key = "isOldFurnishing")){
            $sellMoney = GetEntityCfg(fullName = $cfg, key = "sellByDiscountMoney")
        }
        $coinName = GetEntityCfg(fullName = $cfg, key = "coinName")
        AddCurrency(entity = $obj1, coinName = $coinName, count = $sellMoney)
    }

    ShowGenericListDisplayBox(entity = $obj1, closeWin = true)
}

BUY_STORE{
    Test("BUY_STORE", $cfg)
    If(not $cfg){
        Return()
    }
    $buyMoney = GetEntityCfg(fullName = $cfg, key = "buyMoney")
    $coinName = GetEntityCfg(fullName = $cfg, key = "coinName")
    If(not PayCurrency(entity = $obj1, coinName = $coinName, count = $buyMoney)){
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_store_not_enough_money", time = 40)
        Return()
    }
    ShowGenericActorShowStore(entity = $obj1, closeWin =true)
    
    $map = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "houseInsideMap")
    $npc = CreateNpc(pos = GetEntityPosition(entity = $obj1), map = $map, cfgName = $cfg, ry = 0, rp = 0)
    SetObjectVar(obj = $npc, key = "house", value = GetObjectVar(obj = $obj1, key = "house"))
    
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHousedict = $dict
            Break()
        }
    }
    ArrayAppend(array = DictionaryGet(dict = $curHousedict, key = "houseInsideFurnishing"), value = {
        pos = GetEntityPosition(entity = $npc), yaw = GetEntityYaw(entity = $npc),cfg = $cfg,
        furnishingId = GetObjectID(object = $npc),isOldFurnishing = false
    })
    $index = DictionaryGet(dict = $curHousedict, key = "curHouseVarsIndex")
    DictionarySet(dict = $curHousedict, key = "curHouseVarsIndex", value = nil)
    ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHousedict))

    -- StartTimer(rep = false, object =$obj1, obj1 =$obj1, npc = $npc, time = 1, event = "CLICK_BUY_STORE")
}

CLICK_BUY_STORE{
    Test("CLICK_BUY_STORE", GetObjectID(object = $npc))
    CastSkill(skill = "/click", from = $obj1, packet = {targetID = GetObjectID(object = $npc)})
}

SAVE_FURNITURE{
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHousedict = $dict
            Break()
        }
    }
    $furnitures = DictionaryGet(dict = $curHousedict, key = "houseInsideFurnishing")
    ForLoop(from = 1, to = ArraySize(array = $furnitures or {}), key = "fIndex"){
        $fDict = NewDictionary(ArrayGet(array = $furnitures, index = $fIndex))
        $npc = GetObject(objID = DictionaryGet(dict = $fDict, key = "furnishingId"))
        If($npc){
            DictionarySet(dict = $fDict, key = "pos", value = GetEntityPosition(entity = $npc))
            DictionarySet(dict = $fDict, key = "yaw", value = GetEntityYaw(entity = $npc))
            DictionarySet(dict = $fDict, key = "pitch", value = GetEntityPitch(entity = $npc))
            -- 如果是衣架，有saveSkinList，则需要保存当前衣架的皮肤
            If(GetConfigVar(obj = $npc, key = "saveSkinList")){
                $saveSkinList = {}
                Foreach(array = GetConfigVar(obj = $npc, key = "saveSkinList"), key = "skinName"){
                    ArrayAppend(array = $skinList, value = {
                        skinName = $skinName,
                        skin = GetSkin(entity = $npc, skinName = $skinName)
                    })
                }
                DictionarySet(dict = $fDict, key = "saveSkinList", value = $saveSkinList)
            }
        }
        ArraySet(array = $furnitures, index = $fIndex, value = DictionaryToTable(dict = $fDict))
    }
    $index = DictionaryGet(dict = $curHousedict, key = "curHouseVarsIndex")
    DictionarySet(dict = $curHousedict, key = "curHouseVarsIndex", value = nil)
    ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHousedict))
}

SHOW_TITLE_BAR{
    Test("SHOW_TITLE_BAR")
    If($obj1.inPartyOwnerId ~= 0){
        Return()--in party
    }
    $editBuff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = "myplugin/edit_house_buff")
    If($editBuff){
        RemoveEntityBuff(entity = $obj1, buff = $editBuff)
    }
    
    If(GetObjectVar(obj = $obj1, key = "curInteractionUiObjId")){
        UpdateEntityEditContainer(player = $obj1, entityId = GetObjectVar(obj = $obj1, key = "curInteractionUiObjId"), show = false)
        SetObjectVar(obj = $obj2, key = "curInteractionUiObjId", value = nil)
    }

    CallTrigger(object = $obj1, event = "SAVE_FURNITURE")

    $infoTb = {
        btnInfo = {
            btnList = [
                {text = "ui_edit", btnType = 5, event = "EDIT_HOUSE"},
                {text = "ui_lock", btnType = 2, event = "HOUSE_LOCK", 
                    curSelect = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "isLock")}
            ]
        }
    }

    ShowTitleBarPage(entity = $obj1, infoTb = {})
    ShowTitleBarPage(entity = $obj1, infoTb = $infoTb, updateWin = true)
}

EDIT_HOUSE{
    Test("EDIT_HOUSE")
    ShowGenericActorShowStore(entity = $obj1, closeWin =true)
    $editBuff = GetEntityTypeBuff(entity = $obj1, key = "fullName", value = "myplugin/edit_house_buff")
    If(not $editBuff){
        AddEntityBuff(entity = $obj1, cfg = "myplugin/edit_house_buff")
    }

    $infoTb = {
        btnInfo = {
            btnList = [
                {text = "ui_dec_shop", btnType = 1, event = "SHOW_DEC_STORE"},
                {text = "ui_cancel", btnType = 4, event = "SHOW_TITLE_BAR"}
            ]
        }
    }
    ShowTitleBarPage(entity = $obj1, infoTb = {})
    ShowTitleBarPage(entity = $obj1, infoTb = $infoTb, updateWin = true)
}

HOUSE_LOCK{
    Test("HOUSE_LOCK")
    $house = GetObjectVar(obj = $obj1, key = "house")
    $isLock = GetObjectVar(obj = $house, key = "isLock")
    SetObjectVar(obj = $house, key = "isLock", value = not $isLock) -- 给房门上锁
    ShowTip(entity = $obj1, tipType = 2,textKey = "house_lock", time = 40)
    If($isLock){ -- 上锁状态则重置为未上锁状态
        ShowTip(entity = $obj1, tipType = 2,textKey = "house_unlock", time = 40)
        CallTrigger(object = $obj1, event = "SHOW_TITLE_BAR") 
    }
}

UPDATE_EDIT_STORE_SELL_TAB{
    Foreach(array = GetConfigVar(obj = $obj1, key = "editStoreSellTab") or {}, key = "topTab"){
        $dic = NewDictionary($topTab)
        ArrayAppend(array = $btnListTb, value = {
            text = DictionaryGet(dict = $dic, key = "text"),
            curSelect = $titleKey == DictionaryGet(dict = $dic, key = "titleKey"),
            event = DictionaryGet(dict = $dic, key = "event"),
            context = {
                titleKey = DictionaryGet(dict = $dic, key = "titleKey"),
                nextCfgKey = DictionaryGet(dict = $dic, key = "nextCfgKey")
            }
        })
    }
}

SHOW_DEC_STORE{
    Test("SHOW_DEC_STORE")
    ShowGenericActorShowStore(entity = $obj1, infoTb = {})
    ShowTitleBarPage(entity = $obj1, closeWin = true)
    If(not $titleKey){
        $titleKey = "allDec"
    }
    If(not $nextCfgKey){
        $nextCfgKey = "decStoreList"
    }
    $btnListTb = {}
    CallTrigger(object = $obj1, event = "UPDATE_EDIT_STORE_SELL_TAB", titleKey = $titleKey, nextCfgKey = $nextCfgKey, btnListTb = $btnListTb) 
    --Test("SHOW_DEC_STORE", $titleKey)
    --Test("SHOW_DEC_STORE", $nextCfgKey)
    --Test("SHOW_DEC_STORE", $btnListTb)

    $listInfoTb = {}
    $closeEvent = {}
    Foreach(array = GetConfigVar(obj = $obj1, key = $nextCfgKey) or {}, key = "bottomBtn"){
        $dic = NewDictionary($bottomBtn)
        If(DictionaryGet(dict = $dic, key = "nextCfgKey")){
            ArrayAppend(array = $listInfoTb, value = {
                text = DictionaryGet(dict = $dic, key = "text"),
                image = DictionaryGet(dict = $dic, key = "image"),
                event = DictionaryGet(dict = $dic, key = "event"),
                context = {
                    titleKey = DictionaryGet(dict = $dic, key = "titleKey"),
                    nextCfgKey = DictionaryGet(dict = $dic, key = "nextCfgKey"),
                    childRegionKey = DictionaryGet(dict = $dic, key = "childRegionKey")
                }
            })
        }
        If(DictionaryGet(dict = $dic, key = "closeEvent")){
            $closeEvent = {
                event = DictionaryGet(dict = $dic, key = "closeEvent"),
                context = DictionaryGet(dict = $dic, key = "context")
            }
        }
    }

    $infoTb = {
        btnInfo = {
            btnType = 3,
            btnList = $btnListTb
        },
        listInfo = {
            uiType = 3,
            infoTb = $listInfoTb
        },
        eventInfo = {
            closeEventInfo = $closeEvent
        }
    }
    ShowGenericActorShowStore(entity = $obj1, infoTb = $infoTb, updateWin =true)
}

UPDATE_STORE_LIST{
    $dicInfoTb = NewDictionary(GetConfigVar(obj = $obj1, key = $nextCfgKey) or {})
    If(DictionaryGet(dict = $dicInfoTb, key = "storeInfo")){
        $dic = NewDictionary(DictionaryGet(dict = $dicInfoTb, key = "storeInfo"))
        $storeId = DictionaryGet(dict = $dic, key = "storeId")
        Foreach(array = @DECORATION_STORE, key = "decorationTb"){
            $decorationDic = NewDictionary($decorationTb)
            $type = DictionaryGet(dict = $decorationDic, key = "type")
            If(DictionaryGet(dict = $decorationDic, key = "storeId") == $storeId and "entity" == $type){
                $fullName = DictionaryGet(dict = $decorationDic, key = "fullName")
                ArrayAppend(array = $listInfoTb, value = {
                    text = GetEntityCfg(fullName = $fullName, key = "buyMoney") or "",
                    image = GetEntityCfg(fullName = $fullName, key = "image") or "",
                    actorScale = GetEntityCfg(fullName = $fullName, key = "showActorScale") or 1,
                    coinImg = GetWorldVar(key = GetEntityCfg(fullName = $fullName, key = "coinName") or "green_currency") or "",
                    cfg = $fullName,
                    event = DictionaryGet(dict = $dic, key = "event") or "BUY_STORE",
                    context = {
                        cfg = $fullName
                    }
                })
            }
            If(DictionaryGet(dict = $decorationDic, key = "storeId") == $storeId and "block" == $type){
                $fullName = DictionaryGet(dict = $decorationDic, key = "fullName")
                ArrayAppend(array = $listInfoTb, value = {
                    text = GetBlockConfigByName(block = $fullName, key = "buyMoney") or "",
                    image = GetBlockConfigByName(block = $fullName, key = "image") or "",
                    coinImg = GetWorldVar(key = GetBlockConfigByName(block = $fullName, key = "coinName") or "green_currency") or "",
                    event = "BUY_HOUSE_REGION_COLOR",
                    context = {
                        colorBlock = $fullName,
                        childRegionKey = $childRegionKey
                    }
                })
            }
        }
    }
    If(DictionaryGet(dict = $dicInfoTb, key = "closeInfo")){
        $dic = NewDictionary(DictionaryGet(dict = $dicInfoTb, key = "closeInfo"))
        ArrayAppend(array = $closeEvent, value = {
            event = DictionaryGet(dict = $dic, key = "closeEvent"),
            context = DictionaryGet(dict = $dic, key = "context")
        })
    }
    If(DictionaryGet(dict = $dicInfoTb, key = "rightInfo")){
        $dic = NewDictionary(DictionaryGet(dict = $dicInfoTb, key = "rightInfo"))
        ArrayAppend(array = $rightEvent, value = {
            event = DictionaryGet(dict = $dic, key = "rightEvent"),
            context = DictionaryGet(dict = $dic, key = "context")
        })
    }
    If(DictionaryGet(dict = $dicInfoTb, key = "leftInfo")){
        $dic = NewDictionary(DictionaryGet(dict = $dicInfoTb, key = "leftInfo"))
        ArrayAppend(array = $leftEvent, value = {
            event = DictionaryGet(dict = $dic, key = "leftEvent"),
            context = DictionaryGet(dict = $dic, key = "context")
        })
    }
}

SHOW_DEC_STORE_LIST{
    Test("SHOW_DEC_STORE_LIST")
    ShowGenericActorShowStore(entity = $obj1, infoTb = {})
    ShowTitleBarPage(entity = $obj1, closeWin = true)
    If(not $titleKey){
        $titleKey = "allDec"
    }
    If(not $nextCfgKey){
        $nextCfgKey = "kitchenStore"
    }
    $btnListTb = {}
    CallTrigger(object = $obj1, event = "UPDATE_EDIT_STORE_SELL_TAB", titleKey = $titleKey, nextCfgKey = $nextCfgKey, btnListTb = $btnListTb) 

    $listInfoTb = {}
    $closeEvent = {}
    $leftEvent = {}
    $rightEvent = {}
    CallTrigger(object = $obj1, event = "UPDATE_STORE_LIST", nextCfgKey = $nextCfgKey, childRegionKey = $childRegionKey,
        listInfoTb = $listInfoTb, closeEvent = $closeEvent, leftEvent = $leftEvent, rightEvent = $rightEvent) 
    $infoTb = {
        btnInfo = {
            btnType = 3,
            btnList = $btnListTb
        },
        listInfo = {
            uiType = 2,
            infoTb = $listInfoTb
        },
        eventInfo = {
            closeEventInfo = ArrayGet(array = $closeEvent, index = 1),
            leftEventInfo = ArrayGet(array = $leftEvent, index = 1),
            rightEventInfo = ArrayGet(array = $rightEvent, index = 1)
        }
    }
    ShowGenericActorShowStore(entity = $obj1, infoTb = $infoTb, updateWin =true)
}

BUY_INSIDE_DOOR{
    Test("BUY_INSIDE_DOOR", $cfg)
    If(not $cfg){
        Return()
    }
    $buyMoney = GetEntityCfg(fullName = $cfg, key = "buyMoney") or 999999
    $coinName = GetEntityCfg(fullName = $cfg, key = "coinName")
    If(not PayCurrency(entity = $obj1, coinName = $coinName, count = $buyMoney)){
        ShowTip(entity = $obj1, tipType = 2,textKey = "buy_store_not_enough_money", time = 40)
        Return()
    }
    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "houseInsideDoor", value = $cfg)
            ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $dict))
            Break()
        }
    }
    $house = GetObjectVar(obj = $obj1, key = "house")
    $insideMap = GetObjectVar(obj = $house, key = "houseInsideMap")

    $houseInsideDoor = GetObjectVar(obj = $house, key = "insideDoor")
    KillEntity(entity = $houseInsideDoor)
    $newHouseInsideDoor = CreateNpc(map = $insideMap, cfgName = $cfg)
    SetObjectVar(obj = $newHouseInsideDoor, key = "house", value = $house)
    SetObjectVar(obj = $house, key = "insideDoor", value = $newHouseInsideDoor)

    SetEntityPosition(map = $insideMap, entity = $newHouseInsideDoor, pos = GetConfigVar(obj = $house, key = "insideDoorPos") or {x = 0,y = 0, z = 0})
}

BUY_HOUSE_REGION_COLOR{
    Test("BUY_HOUSE_REGION_COLOR", $childRegionKey, $colorBlock)
    -- 如果换了墙纸或者地板，原有的不保留，当你没买     如果你原来买了A墙纸，你又换成了B，那么你要再花一遍钱去把A换回来
    If($colorBlock){
        $buyMoney = GetBlockConfigByName(block = $colorBlock, key = "buyMoney")
        $coinName = GetBlockConfigByName(block = $colorBlock, key = "coinName")
        If(not PayCurrency(entity = $obj1, coinName = $coinName, count = $buyMoney)){
            ShowTip(entity = $obj1, tipType = 2,textKey = "buy_house_region_color_not_enough_money", time = 40)
            Return()
        }
    }
    $curInsideRegion = GetObjectVar(obj = $obj1, key = "curInsideRegion")
    If(not $curInsideRegion){
        Return()
    }
    
    $curInsideRegionKey = GetRegionKey(region = $curInsideRegion)
    $curInsideRegionChildReionArr = GetRegionConfig(region = $curInsideRegion, key = "childRegionKey")
    ForLoop(from = 1, to = ArraySize(array = $curInsideRegionChildReionArr), key = "index"){
        If(ArrayGet(array = $curInsideRegionChildReionArr, index = $index) == $childRegionKey){
            $curInsideRegionChildReionIndex = $index
            Break()
        }
    }
    If(not $curInsideRegionChildReionIndex){
        Return()
    }
    $childRegionArr = GetRegionConfig(region = $curInsideRegion, key = $childRegionKey) or {}
    
    Foreach(array = $childRegionArr, key = "cRegion"){
        $insideMap = GetObjectVar(obj = GetObjectVar(obj = $obj1, key = "house"), key = "houseInsideMap")
        $block = GetBlockConfig(map = $insideMap, pos = GetRegionMin(region = $cRegion), key = "fullName")
        ResetBlocksInRegion(map = $insideMap, region = $cRegion, 
            sourceBlock = $block, destBlock = $colorBlock or GetRegionConfig(region = $curInsideRegion, key = "defaultBlock"))
    }

    $houseVars = GetObjectVar(obj = $obj1, key = "houseVars")
    ForLoop(from = 1, to = ArraySize(array = $houseVars), key = "index"){
        $dict = NewDictionary(ArrayGet(array = $houseVars, index = $index))
        If(DictionaryGet(dict = $dict, key = "isCurEquip") == "enable"){
            DictionarySet(dict = $dict, key = "curHouseVarsIndex", value = $index)
            $curHousedict = $dict
            Break()
        }
    }
    $curSelectHouseRegionColor = DictionaryGet(dict = $curHousedict, key = "houseInsideRegionColors") or {}
    Foreach(array = $curSelectHouseRegionColor, key = "childRegionColorArr"){
        If(ArrayGet(array = $childRegionColorArr, index = 1) == $curInsideRegionKey){
            ArraySet(array = ArrayGet(array = $childRegionColorArr, index = 2), index = $curInsideRegionChildReionIndex, value = $colorBlock)
        }
    }
    $index = DictionaryGet(dict = $curHousedict, key = "curHouseVarsIndex")
    DictionarySet(dict = $curHousedict, key = "curHouseVarsIndex", value = nil)
    ArraySet(array = $houseVars, index = $index, value = DictionaryToTable(dict = $curHousedict))
}
------------------------------------------------------------------------------------------------------------------------------ 分割线

ADD_MONEY
{  
    $today = GetYearDayStr(time = GetTime())

    If($today ~= $obj1.rewardDay)
    {
        $obj1.rewardCounts = 1
        $obj1.rewardDay = $today
    }

    $count = $obj1.rewardCounts
    $arraySize = ArraySize(array = @CDReward)
    If($count > $arraySize)
    {
        $count = $arraySize
    }
    $rewardArray = ArrayGet(array = @CDReward, index = $count)
    $cdTime = ArrayGet(array = $rewardArray, index = 1)
    $money = ArrayGet(array = $rewardArray, index = 2)

    If(ArrayFind(array = $obj1.privilege, value = "vip_privilege"))
    {
        $money = $money * 2
    }

    If($obj1.isReadyReward)
    {
        AddCurrency(count = $money, coinName = "green_currency", entity = $obj1)
        ShowRewardRollTip(image = "set:jail_break.json image:jail_break_currency", text = Concat(p1 = "+", p2 = $money), entity = $obj1)
        $obj1.rewardCounts = $obj1.rewardCounts + 1
    }
    StartTimer(rep = false, time = $cdTime, object = $obj1, event = "ADD_MONEY")
    ShowRewardCD(player = $obj1, time = $cdTime)
    $obj1.isReadyReward = true
}

FUNC_STATE_GENERATE --params: stateBase, col, skill
{
    $state = $stateBase
    $subdivided = GetSkillVar(fullName = $skill, key = "subdivided")
    If(ArraySize(array = $subdivided or []) > 0)
    {
        $preState = GetObjectVar(obj = $obj1, key = Concat(p1 = "pre", p2 = $stateBase))
        If($preState)
        {
            RemoveSkill(entity = $obj1, name = Concat(p1 = @skillPath, p2 = $preState))
            CallTrigger(object = $obj1, event = "FUNC_STATE_RESET_DATA", state = $preState)
        }
        $state = ArrayGet(array = $subdivided, index = $col)
        SetObjectVar(obj = $obj1, value = $state, key = Concat(p1 = "pre", p2 = $stateBase))
        SetObjectVar(obj = $obj1, value = $col, key = Concat(p1 = $stateBase, p2 = "Idx"))
    }
    ShowBubbleMsg(
        entity = $obj1,
        contents = GetSkillVar(fullName = Concat(p1 = @skillPath, p2 = $state), key = "tipContents")
    )
    CallTrigger(object = $obj1, event = "FUNC_STATE_ADD", state = $state)
}

FUNC_STATE_ADD --params: state
{
    $stateBase = GetSkillVar(fullName = Concat(p1 = @skillPath, p2 = $state), key = "stateBase") or $state
    SetObjectVar(obj = $obj1, key = Concat(p1 = "had", p2 = $stateBase), value = true)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "InteractList"), value = nil)

    AddSkill(entity = $obj1, name = Concat(p1 = @skillPath, p2 = $state))
    CallTrigger(object = $obj1, event = "FUNC_STATE_RESET_DATA", state = $state)
    CallTrigger(object = $obj1, event = "FUNC_UPDATE_STATE_SKILL_JACK_AREA")
    CallTrigger(object = $obj1, event = "FUNC_STATE_ACTION", state = $state)
}

FUNC_STATE_ADD_EFFECT --params: state
{
    $effect = GetSkillVar(fullName = Concat(p1 = @skillPath, p2 = $state), key = "effect")
    If(not $effect)
    {
        Return()
    }
    SetObjectVar(
        obj = $obj1,
        key = Concat(p1 = $state, p2 = "Effect"),
        value = AddEntityBuff(
            entity = $obj1,
            cfg = $effect
        )
    )
}

FUNC_STATE_START_AFFECT --params: state
{
    $skill = Concat(p1 = @skillPath, p2 = $state)
    $timeSpan = GetSkillVar(fullName = $skill, key = "affectTimeSpanSec")
    If(not $timeSpan || $timeSpan <= 0)
    {
        Return()
    }

    SetObjectVar(
        obj = $obj1,
        key = $timerStr,
        value = StartTimer(
            rep = true,
            object = $obj1,
            state = $state,
            event = "FUNC_STATE_AFFECT_OTHER",
            time = ($timeSpan * 20) // 1
        )
    )
}

FUNC_STATE_AFFECT_OTHER --params: state
{
    $skill = Concat(p1 = @skillPath, p2 = $state)
    $stateBase = GetSkillVar(fullName = $skill, key = "stateBase") or $state

    $entities = GetNearbyEntities(
        entity = $obj1,
        distance = GetSkillVar(
            fullName = $skill,
            key = "affectDis"
        )
    )
    $name = GetEntityName(entity = $obj1)
    Foreach(array = $entities or [], key = "entity")
    {
        If(not IsPlayer(entity = $entity) || $entity == $obj1 || GetObjectVar(obj = $entity, key = Concat(p1 = "had", p2 = $stateBase)))
        {
            Continue()
        }
        ShowBubbleMsg(entity = $entity, textKey = "infect_sb", textP1 = $name)
        CallTrigger(
            object = $entity,
            event = "FUNC_STATE_ADD",
            state = $state
        )
    }
}

FUNC_STATE_RIDEON --params: ride[, isCancel = false]
{
    If(not $ride)
    {
        Return()
    }

    $state = GetConfigVar(obj = $ride, key = "releaseState")
    If(not $state)
    {
        Return()
    }
    If(not $isCancel)
    {
        CallTrigger(object = $obj1, event = "FUNC_STATE_RELEASE", state = $state)
    }
    Else
    {
        CallTrigger(object = $obj1, event = "FUNC_STATE_RELEASE_SUSPEND", state = $state)
    }
}

FUNC_STATE_CHECK_IS_IN_REGION --params: state
{   
    -- 判断状态生成时是否就已经在区域里面了
    If("region" ~= GetSkillVar(fullName = Concat(p1 = @skillPath, p2 = $state), key = "releaseType"))
    {
        Return()
    }

    $reg = GetRegionByName(
        map = GetEntityMap(entity = $obj1),
        name = $state 
    )

    If($reg && IfEntityInArea(
                    entity = $obj1,
                    region = {
                        min = GetRegionMin(region = $reg),
                        max = GetRegionMax(region = $reg) + V3(1, 1, 1)
                    }
                )
    )
    {
        CallTrigger(
            opt = "INNER",
            object = $obj1,
            state = $state,
            event = "FUNC_REGION_STATE_OPERATION",
        )
    }
}

FUNC_REGION_STATE_OPERATION --parmas: opt, state
{
    If($state == GetObjectVar(obj = $obj1, key = "gpsDestination"))
    {
        ShowTip(entity = $obj1, tipType = 3, textKey = "you_came")
        CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
    }

    If($opt ~= "INNER")
    {
        $skill = Concat(p1 = @skillPath, p2 = $state)
        $stateBase = GetSkillVar(fullName = $skill, key = "stateBase") or $state
        If("region" ~= GetSkillVar(fullName = $skill, key = "releaseType"))
        {
            Return()
        }
        ElseIf(GetObjectVar(obj = $obj1, key = Concat(p1 = "had", p2 = $stateBase)))
        {
            $subdivided = GetSkillVar(fullName = $skill, key = "subdivided")
            If(ArraySize(array = $subdivided or []) > 0)
            {
                $kind = ArrayGet(
                    array = $subdivided,
                    index = GetObjectVar(
                        obj = $obj1,
                        key = Concat(p1 = $stateBase, p2 = "Idx")
                    )
                )
                If($kind ~= $state)
                {
                    Return()
                }
            }
        }
    }

    CallTrigger(
        object = $obj1,
        state = $state,
        event = $opt ~= "LEAVE" and "FUNC_STATE_RELEASE" or "FUNC_STATE_RELEASE_SUSPEND"
    )
}

FUNC_STATE_SUSPEND_PROGRESS --params: state, stateBase, duration
{
    CallTrigger(
        object = $obj1,
        pgName = $state,
        event = "FUNC_CLOSE_PROGRESS_FOLLOW_OBJ"
    )

    CallTrigger(
        object = $obj1,
        event = "FUNC_STOP_TIMER",
        timerStr = Concat(p1 = $stateBase, p2 = "_TIMER")
    )

    $sTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "STime"))
    $usedTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "UsedTime"))
    If($sTime && $usedTime)
    {
        SetObjectVar(
            obj = $obj1,
            key = Concat(p1 = $stateBase, p2 = "UsedTime"),
            value = GetTime() - $sTime + $usedTime
        )
    }
}

FUNC_STATE_START_PROGRESS --params: state, stateBase, duration
{
    $usedTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "UsedTime")) or 0

    SetObjectVar(obj = $obj1, value = GetTime(), key = Concat(p1 = $stateBase, p2 = "STime"))
    SetObjectVar(obj = $obj1, value = $usedTime, key = Concat(p1 = $stateBase, p2 = "UsedTime"))

    ShowProgressFollowObj(
        isOpen = true,
        pgName = $state,
        entity = $obj1,
        totalTime = $duration * 20,
        usedTime = $usedTime * 20,
    )

    SetObjectVar(
        obj = $obj1,
        key = "progress",
        value = $state
    )

    SetObjectVar(
        obj = $obj1,
        key = Concat(p1 = $stateBase, p2 = "_TIMER"),
        value = StartTimer(
            rep = false,
            object =$obj1,
            state = $state,
            time = (($duration - $usedTime) * 20) // 1,
            event = "FUNC_STATE_REWARD"
        )
    )
}

FUNC_STATE_REWARD --state [, stateBase, skill]
{
    $skill = $skill or Concat(p1 = @skillPath, p2 = $state)
    $stateBase = $stateBase or GetSkillVar(fullName = $skill, key = "stateBase") or $state

    $interactList = GetObjectVar(
        obj = $obj1,
        key = Concat(p1 = $stateBase, p2 = "InteractList")
    )

    RemoveSkill(entity = $obj1, name = $skill)
    SetObjectVar(obj = $obj1, key = Concat(p1 = "had", p2 = $stateBase), value = false)
    CallTrigger(object = $obj1, event = "FUNC_STATEBASE_RESET_DATA", stateBase = $stateBase)
    CallTrigger(object = $obj1, event = "FUNC_STATE_RESET_DATA", state = $state)

    If(not GetSkillVar(fullName = $skill, key = "hadReward"))
    {
        Return()
    }

    $rewardSelf = GetSkillVar(fullName = $skill, key = "rewardSelf")
    $rewardOther = GetSkillVar(fullName = $skill, key = "rewardOther")
    $rewardFamily = GetSkillVar(fullName = $skill, key = "rewardFamily")
    $rewardDis = GetSkillVar(fullName = $skill, key = "rewardDis")
    $rewardCount = GetSkillVar(fullName = $skill, key = "rewardCount")
    $rewardType = GetSkillVar(fullName = $skill, key = "rewardType")
    
    $teamId = GetEntityTeam(entity = $obj1)
    $rewardSum = 0
    $textKey = ""
    Foreach(array = $interactList or [], key = "objID")
    {
        $entity = GetObject(objID = $objID)
        If(not IsPlayer(entity = $entity))
        {
            Continue()
        }
        
        $countKey = Concat(p1 = $stateBase, p2 = "RewardCount")
        $count = GetObjectVar(obj = $entity, key = $countKey)
        $dis = GetObjectDistance(obj1 = $obj1, obj2 = $entity)
        $myTeamId =  GetEntityTeam(entity = $entity)
    
        If($count < $rewardCount && $dis < $rewardDis)
        {
            SetObjectVar(obj = $entity, key = $countKey, value = $count + 1)
            $rewardSum = $myTeamId == $teamId and $rewardFamily or $rewardOther
            $textKey = $myTeamId == $teamId and "reward_family" or "reward_takeCare"
            CallTrigger(
                object = $entity,
                event = "FUNC_STATE_REWARD_AND_TIP",
                rewardSum = $rewardSum,
                textKey = $textKey,
                rewardType = $rewardType
            )
        }
    }
    CallTrigger(
        object = $obj1,
        event = "FUNC_STATE_REWARD_AND_TIP",
        rewardSum = $rewardSelf,
        textKey = "reward_takeCare",
        rewardType = $rewardType
    )
}

FUNC_STATE_RELEASE --params: state
{
    If(not $state)
    {
        Return()
    }

    $skill = Concat(p1 = @skillPath, p2 = $state)
    $stateBase = GetSkillVar(fullName = $skill, key = "stateBase") or $state
    $hadState = Concat(p1 = "had", p2 = $stateBase)
    If(not GetObjectVar(obj = $obj1, key = $hadState))
    {
        Return()
    }
    $duration = GetSkillVar(fullName = $skill, key = "duration")
    If($duration && $duration > 0)
    {
        CallTrigger(object = $obj1, event = "FUNC_STATE_START_PROGRESS", state = $state, stateBase = $stateBase, duration = $duration)
    }
    Else
    {
        CallTrigger(object = $obj1, event = "FUNC_STATE_REWARD", state = $state, stateBase = $stateBase, skill = $skill)
    }
}

FUNC_STATE_RELEASE_SUSPEND --params: state
{
    If(not $state)
    {
        Return()
    }

    $skill = Concat(p1 = @skillPath, p2 = $state)
    $stateBase = GetSkillVar(fullName = $skill, key = "stateBase") or $state
    $hadState = Concat(p1 = "had", p2 = $stateBase)
    If(not GetObjectVar(obj = $obj1, key = $hadState))
    {
        Return()
    }
    $duration = GetSkillVar(fullName = $skill, key = "duration")
    If($duration && $duration > 0)
    {
        CallTrigger(object = $obj1, event = "FUNC_STATE_SUSPEND_PROGRESS", state = $state, stateBase = $stateBase, duration = $duration)
    }
}

FUNC_STATE_REWARD_AND_TIP --params: rewardSum, textKey, rewardType
{
    AddCurrency(coinName = $rewardType or "green_currency", entity = $obj1, count = $rewardSum)
    
    ShowRewardRollTip(
        entity = $obj1,
        image = "set:jail_break.json image:jail_break_currency",
        text = Concat(p1 = "+", p2 = $rewardSum),
    )

    ShowTip(
        entity = $obj1,
        tipType = 3,
        textKey = $textKey
    )
}

FUNC_STATE_SHOW_DETAILS_UI -- params: skill(fullName)
{
    $state = GetSkillVar(fullName = $skill, key = "state")
    $stateBase = GetSkillVar(fullName = $skill, key = "stateBase") or $state
    $duration = GetSkillVar(fullName = $skill, key = "duration")

    $usedTime = GetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "UsedTime")) or 0
    $percent = (not $duration or $duration <= 0) and 0 or NumberFloor(p1 = 100 * $usedTime / $duration)
    
    ShowDetails(
        entity = $obj1,
        fullName = Concat(p1 = "myplugin/", p2 = $state, p3 = "Detail"),
        isOpen = true,
        contents = {
            isNeedUpdate = $state == GetObjectVar(obj = $obj1, key = "progress"),
            subtitleVal = Concat(p1 = $percent, p2 = "%"),
            commentsVal = GetSkillVar(fullName = $skill, key = "rewardSelf"),
            commentsCurrencyIcon = GetSkillVar(fullName = $skill, key = "rewardType")
        }
    )
    
    SetObjectVar(obj = $obj1, key = "detailsUI", value = $state)
}

FUNC_STATE_OPEN_GPS --params: rtVal
{
    If(not $rtVal)
    {
        Return()
    }

    $map = GetEntityMap(entity = $obj1)
    $mapName = GetEntityName(entity = $map)
    $type = GetConfigValue(type = "region", fullName = Concat(p1 = "myplugin/region_state_", p2 = $rtVal), key = "siteType")

    $house = GetObjectVar(obj = $obj1, key = "house")
    $gps = { x = 0, y = 0, z = 0 }
    If($mapName == "map001")
    {
        If($type == "publicArea")
        {
            $region = GetRegionByName(map = $map, name = $rtVal)
            If(not $region)
            {
                Return()
            }
            $tmpReg = {
                min = GetRegionMin(region = $region),
                max = GetRegionMax(region = $region) + V3(1, 1, 1)
            }
            If(IfEntityInArea(entity = $obj1, region = $tmpReg))
            {
                ShowTip(entity = $obj1, tipType = 3, textKey = "you_came")
                CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
                Return()
            }
            $gps = GetRegionCfgVar(region = $region, key = "gps")
        }
        ElseIf($type == "selfHouse")
        {
            $gps = ComputeV3(p1 = GetEntityPosition(entity = $house), p2 = GetConfigVar(obj = $house, key = "doorPos"), op = "add")
        }
    }
    ElseIf($mapName == "house_default_inside_map")
    {
        $houseInsideMap = GetObjectVar(obj = $house, key = "houseInsideMap")
        $gps = GetConfigVar(obj = $house, key = "insideDoorPos")
        If($map == $houseInsideMap && $type == "selfHouse")
        {
            ShowTip(entity = $obj1, tipType = 3, textKey = "you_came")
            CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS")
            Return()
        }
    }

    CallTrigger(
        object = $obj1,
        event = "FUNC_OPEN_GPS",
        destination = $rtVal,
        pos = $gps
    )
}

FUNC_UPDATE_STATE_SKILL_JACK_AREA --params: up
{
    If($up == nil)
    {
        $map = GetEntityMap(entity = $obj1)
        $houseInsideMap = GetObjectVar(
            obj = GetObjectVar(
                obj = $obj1,
                key = "house"
            ),
            key = "houseInsideMap"
        )
        $up = $map ~= $houseInsideMap and true or false
    }
    UpdateSkillJackArea(
        entity = $obj1,
        info = {
            pos = "top",
            yOff = $up and @skillJackUp or @skillJackDown
        }
    )
}

FUNC_STATE_RESET_DATA --params: state
{
    CallTrigger(object = $obj1, event = "FUNC_CLOSE_GPS", destination = $state)
    CallTrigger(object = $obj1, event = "FUNC_CLOSE_DETAILS_UI", uiName = $state)
    CallTrigger(object = $obj1, event = "FUNC_CLOSE_PROGRESS_FOLLOW_OBJ", pgName = $state)
    CallTrigger(object = $obj1, event = "FUNC_REMOVE_BUFF", buffStr = Concat(p1 = $state, p2 = "Effect"))
    CallTrigger(object = $obj1, event = "FUNC_STOP_TIMER", timerStr = Concat(p1 = $state, p2 = "AFFECT_TIMER"))
}

FUNC_STATEBASE_RESET_DATA -- params: stateBase
{
    SetObjectVar(obj = $obj1, key = Concat(p1 = "pre", p2 = $stateBase), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "STime"), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "UsedTime"), value = nil)
    SetObjectVar(obj = $obj1, key = Concat(p1 = $stateBase, p2 = "InteractList"), value = nil)
}

FUNC_STATE_ACTION --params: state
{
    CallTrigger(object = $obj1, event = "FUNC_STATE_ADD_EFFECT", state = $state)
    CallTrigger(object = $obj1, event = "FUNC_STATE_START_AFFECT", state = $state)
    CallTrigger(object = $obj1, event = "FUNC_STATE_CHECK_IS_IN_REGION", state = $state)
    CallTrigger(object = $obj1, event = "FUNC_STATE_RIDEON", ride = GetRideOn(entity = $obj1)) --检查是否已经在骑乘并且该骑乘是否会触发解除状态
}

INTERACTION_CLAP { --拍手 小孩和小孩
    If($obj2.role == @child && $obj1.role == @child) {
        CastSkill(skill = "myplugin/action_clap", from = $obj2, packet = {targetID = GetObjectID(object = $obj1)})
    }
}

INTERACTION_HUG { --拥抱 小孩和小孩 or 大人和大人
    If($obj2.role == @child && $obj1.role == @child) {
        CastSkill(skill = "myplugin/action_hug", from = $obj2, packet = {targetID = GetObjectID(object = $obj1)})
    }

    If($obj2.role == @adult && $obj1.role == @adult) {
        CastSkill(skill = "myplugin/action_hug", from = $obj2, packet = {targetID = GetObjectID(object = $obj1)})
    }
}

INTERACTION_HANDSHAKE { --握手 大人和大人
    If($obj2.role == @adult && $obj1.role == @adult) {
        CastSkill(skill = "myplugin/action_handshake", from = $obj2, packet = {targetID = GetObjectID(object = $obj1)})
    }
}

INTERACTION_RIDE { --骑乘 小孩和大人
    If($obj2.role == @child && $obj1.role == @adult) {
        CastSkill(skill = "myplugin/action_ride", from = $obj2, packet = {targetID = GetObjectID(object = $obj1)})
    }
}

INTERACTION_HAND_IN_HAND { --手拉手 小孩和大人
    If($obj2.role == @child && $obj1.role == @child) {
        CastSkill(skill = "myplugin/action_handinhand", from = $obj1, packet = {targetID = GetObjectID(object = $obj2)})
    }
}

INTERACTION_FOLLOW { --跟随
    CastSkill(skill = "myplugin/action_follow", from = $obj2, packet = {targetID = GetObjectID(object = $obj1)})
}


INTERACTION_PICK {
    If($obj2.role == @adult && $obj1.role == @child) {
        CastSkill(skill = "myplugin/action_pickup", from = $obj1, packet = {targetID = GetObjectID(object = $obj2)})
    }
}

INTERACTION_BABY_TROLLEY {

}

ENTITY_JUMP {
    CallTrigger(obj1 = $obj1, event = "ENTITY_REMOVE_INTERACTION")
    $ride = GetRideOn(entity = $obj1)
    If ($ride){
        ClearRide(entity = $ride)
        CallTrigger(object = $obj1, event = "FUNC_STATE_RIDEON", ride = $ride, isCancel = true)
    }
}

ENTITY_DIE {
	CallTrigger(obj1 = $obj1, event = "ENTITY_REMOVE_INTERACTION")
}

ENTITY_REMOVE_INTERACTION {
    If($obj1.interactionObjId){
        $target = GetObject(objID = $obj1.interactionObjId)
        If($target && $target.interactionBuff) {
            RemoveEntityBuff(buff = $target.interactionBuff, entity = $target)
        }
    }

    If($obj1.interactionBuff){
        RemoveEntityBuff(buff = $obj1.interactionBuff, entity = $obj1)
    }
}

CREATE_FAMILY
{
    If(IsPlayer(entity = $obj1))
    {
        $familyId = GetEntityTeam(entity = $obj1)
        If($familyId and $familyId ~= 0)
        {
            Return()
        }
        SetEntityTeam(entity = $obj1, teamId = @familyIndex)
        @familyIndex = @familyIndex + 1
        ShowTip(entity = $obj1, tipType = 2,textKey = "gui_create_family_success", time = 40)
    }
}

QUIT_FAMILY
{
    If(IsPlayer(entity = $obj1))
    {
        $teamId = GetEntityTeam(entity = $obj1)
        SetEntityTeam(entity = $obj1, teamId = 0)
        ShowTip(entity = $obj1, tipType = 2,textKey = "gui_quit_family_success", time = 40)
        CallTrigger(event = "INIT_TEAM_UI", obj1 = $obj1, show = false)
        CallTrigger(event = "UPDATE_TEAM_MEMBER_LIST", teamId = $teamId, object = $obj1)
    }
}

UPDATE_TEAM_MEMBER_LIST
{
    $entityList = GetTeamEntityList(teamId = $teamId)
    ForeachDictionary(keyName = "objID", valueName = "entity", dict = NewDictionary($entityList))
    {
        If(IsPlayer(entity = $entity))
        {
            UpdateUIData(player = $entity, ui = "win_team")
        }
    }
}

INTERACTION_JOIN_FAMILY
{
    -- obj2是点击UI的那个人
    -- obj1是被点击的那个人

    $selfFamilyID = GetEntityTeam(entity = $obj2)
    
    If($selfFamilyID and $selfFamilyID ~= 0)
    {
        $playerCount = GetTeamInfo(teamId = $selfFamilyID, key = "playerCount")
        If($playerCount >= 4)
        {
            ShowTip(entity = $obj2, tipType = 2,textKey = "ui_family_full_member", time = 40)
            Return()
        }
    }

    $obj1.requestFamilyPlayer = $obj2
    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_cancel",
        rightCoinId = nil,
        rightContent = "ui_sure"
    }
    
    $content = {
        msg = "ui_family_request",
        args = NewArray(GetEntityName(entity = $obj2))
    }

    ShowBubbleMsg(entity = $obj2, textKey = "ui_family_ask_for_family", textP1 = GetEntityName(entity = $obj1))
    ShowDialogTip(entity = $obj1, tipType = 5, event = "REQUEST_JOIN_FAMILY", p1 = "ui_tip", p2 = $content, p3 = $btnInfo)
}

REQUEST_JOIN_FAMILY
{
    $selfFamilyID = GetEntityTeam(entity = $obj1)
    $targetPlayer = $obj1.requestFamilyPlayer
    If($button == "left")
    {
        If(IsPlayer(entity = $targetPlayer))
        {
            ShowTip(entity = $targetPlayer, tipType = 2,textKey = "ui_family_reject", time = 40)
        }
        Return()
    }
    ElseIf($button == "right")
    {
        If(not IsPlayer(entity = $targetPlayer))
        {
            ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_offline", time = 40)
            Return()
        }

        $targetFamilyID = GetEntityTeam(entity = $targetPlayer)

        
        If($targetFamilyID and $targetFamilyID ~= 0)
        {
            -- 如果 target 有家庭
            $playerCount = GetTeamInfo(teamId = $targetFamilyID, key = "playerCount")
            If(not $playerCount or $playerCount >= 4)
            {
                ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_full_member", time = 40)
                Return()
            }

            SetEntityTeam(entity = $obj1, teamId = $targetFamilyID)
            CallTrigger(event = "UPDATE_TEAM_MEMBER_LIST", teamId = $targetFamilyID)
            ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_join_in", time = 40)
            $obj1.requestFamilyPlayer = nil
        }
        Else
        {
            -- 如果 target 没有家庭
            $teamId = @familyIndex
            @familyIndex = @familyIndex + 1
            SetEntityTeam(entity = $targetPlayer, teamId = $teamId)
            SetEntityTeam(entity = $obj1, teamId = $teamId)
            CallTrigger(event = "UPDATE_TEAM_MEMBER_LIST", teamId = $teamId)
            ShowTip(entity = $obj1, tipType = 2,textKey = "ui_family_join_in", time = 40)
            $obj1.requestFamilyPlayer = nil
        }
    }
}


SHOW_TEAM_UI
{
    $teamId = GetEntityTeam(entity = $obj1)
    If($teamId and $teamId ~= 0)
    {
        CallTrigger(event = "INIT_TEAM_UI", object = $obj1) 
    }
    Else
    {
        CallTrigger(event = "SHOW_TEAM_CREATE_UI", object = $obj1) 
    }
}

SHOW_TEAM_CREATE_UI
{

    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_family_create",
        rightCoinId = nil,
        rightContent = "ui_family_album"
    }

    ShowDialogTip(entity = $obj1, tipType = 5, event = "TEAM_CREATE_RESULT", p1 = "ui_tip", p2= "ui_not_in_family", p3 = $btnInfo)
}

TEAM_CREATE_RESULT
{
    If($result)
    {
        If($button == "left")
        {
            CallTrigger(event = "CREATE_FAMILY", object = $obj1) 
        }
        ElseIf($button == "right")
        {
            ShowFamilyAlbum(entity = $obj1)
        }
    }
}


INIT_TEAM_UI
{
    $title = {
        name = "gui_my_family"
    }
    
    $buttons = [
        {
            event = "SHOW_FAMILY_ALBUM",
            normalImage = "set:team.json image:blue_btn",
            pushedImage = "set:team.json image:blue_btn",
             name = "ui_family_album"
        },
        {
            event = "QUIT_FAMILY",
            normalImage = "set:team.json image:green_btn",
            pushedImage = "set:team.json image:green_btn",
            name = "ui_family_quit"
        }
    ]

    $closeBtn = {
        disableClose = false
    }

    $info = {
        title = $title,
        buttons = $buttons,
        closeBtn = $closeBtn
    }

    ShowTeam(entity = $obj1, show = $show, info = $info)
}

SHOW_FAMILY_ALBUM
{
    ShowFamilyAlbum(entity = $obj1)
}

STORE_ITEM_STATUS_CHANGE
{
    $dictItem = NewDictionary($item)
    $storeId = DictionaryGet(dict = $dictItem, key = "storeId")
    $itemIndex = DictionaryGet(dict = $dictItem, key = "index")
    $danceStoreId = GetWorldVar(key = "danceStoreId")
    If($storeId == $danceStoreId && $targetIndex > 0)
    {
        $newDance = {}
        $danceIndex = 1
        $oldUseIndex = 0
        $oldItemIndex = 0
        Foreach(array = $obj1.danceUseItem, key = "value")
        {
            If($value == $itemIndex)
            {
                $oldUseIndex = $danceIndex
            }

            If ($danceIndex == $targetIndex)
            {
                $oldItemIndex = $value
                ArraySet(array = $newDance, index = $danceIndex , value = $itemIndex)
            }
            Else
            {
                ArraySet(array = $newDance, index = $danceIndex , value = $value)
            }

            $danceIndex = $danceIndex + 1
        }

        If ($oldUseIndex > 0)
        {
            ArraySet(array = $newDance, index = $oldUseIndex , value = $oldItemIndex)
        }

        $newData = {}
        $dataIndex = 1
        $hasOldItemIndex = false
        Foreach(array = $data, key = "value")
        {
            $dictValue = NewDictionary($value)
            $dictStoreId = DictionaryGet(dict = $dictValue, key = "storeId")
            $dictStoreItemIndex = DictionaryGet(dict = $dictValue, key = "itemIndex")
            If ($dictStoreId == $danceStoreId)
            {
                DictionarySet(dict = $dictValue, key = "status", value = 1)
            }

            If($dictStoreItemIndex == $oldItemIndex)
            {
                $hasOldItemIndex = true
            }

            ArraySet(array = $newData, index = $dataIndex , value = $dictValue)
            $dataIndex = $dataIndex + 1
        }

        If($hasOldItemIndex == false)
        {
            $dictValue = NewDictionary({})
            DictionarySet(dict = $dictValue, key = "status", value = 1)
            DictionarySet(dict = $dictValue, key = "itemIndex", value = $oldItemIndex)
            DictionarySet(dict = $dictValue, key = "storeId", value = $danceStoreId)
            ArrayAppend(array = $newData, value = $dictValue)
        }
        
        Foreach(array = $newDance, key = "value")
        {
            $isChange = false
            Foreach(array = $newData, key = "dictValue")
            {
                $dictStoreId = DictionaryGet(dict = $dictValue, key = "storeId")
                $dictItemIndex = DictionaryGet(dict = $dictValue, key = "itemIndex")
                If($dictItemIndex == $value && $dictStoreId == $danceStoreId)
                {
                    $isChange = true
                    DictionarySet(dict = $dictValue, key = "status", value = 2)
                    Break()
                }
            }
            If ($isChange == false)
            {
                $dictValue = NewDictionary({})
                DictionarySet(dict = $dictValue, key = "status", value = 2)
                DictionarySet(dict = $dictValue, key = "itemIndex", value = $value)
                DictionarySet(dict = $dictValue, key = "storeId", value = $danceStoreId)
                ArrayAppend(array = $newData, value = $dictValue)
            }
        }

        $dataIndex = 1
        $dataRestore = {}
        Foreach(array = $newData, key = "dictValue")
        {
            ArraySet(array = $dataRestore, index = $dataIndex , value = DictionaryToTable(dict = $dictValue))
            $dataIndex = $dataIndex + 1
        }

        CallTrigger(event = "CHANGE_DANCE_SKILL", obj1 = $obj1, oldSkill = $obj1.danceUseItem , newSkill = $newDance)
        $obj1.danceUseItem = $newDance
        $data = $dataRestore
        $def = false
    }
}

CHANGE_DANCE_SKILL
{
    $danceStoreId = GetWorldVar(key = "danceStoreId")
    If($oldSkill)
    {
        Foreach(array = $oldSkill, key = "value")
        {
            $skillName = GetStoreItemName(storeId= $danceStoreId , index = $value)
            ForgetSkill(entity = $obj1, name = $skillName)
        }
    }

    If($newSkill)
    {
        UpdateUIData(player = $obj1, ui = "win_dance", data = $newSkill)

        Foreach(array = $newSkill, key = "value")
        {
            $skillName = GetStoreItemName(storeId= $danceStoreId , index = $value)
            LearnSkill(entity = $obj1, name = $skillName)
            EquipSkill(entity = $obj1, name = $skillName)
        }
    }
}

SET_DRESS_ARCHIVE
{
    $dressArchive = GetObjectVar(obj = $obj1, key = "dressArchive")
    If(not $dressArchive)
    {
        Return()
    }

    $bmDressData = {
        vars = {
            custom_face = GetSkin(entity = $obj1, skinName = "custom_face"),
            custom_hair = GetSkin(entity = $obj1, skinName = "custom_hair"),
            clothes_tops = GetSkin(entity = $obj1, skinName = "clothes_tops"),
            clothes_pants = GetSkin(entity = $obj1, skinName = "clothes_pants"),
            custom_shoes = GetSkin(entity = $obj1, skinName = "custom_shoes"),
            custom_glasses = GetSkin(entity = $obj1, skinName = "custom_glasses"),
            custom_scarf = GetSkin(entity = $obj1, skinName = "custom_scarf"),
            custom_wing = GetSkin(entity = $obj1, skinName = "custom_wing"),
            custom_hat = GetSkin(entity = $obj1, skinName = "custom_hat"),
            custom_tail = GetSkin(entity = $obj1, skinName = "custom_tail")
        }
    }

    $bmDressInfo = {
        vars = {
            name = "ui_dress_archive_app_dress",
            data = $bmDressData
        }
    }

    ArrayAppend(array = $dressArchive, value = $bmDressInfo)

    UpdateUIData(player = $obj1, ui = "win_dressArchive", data = $dressArchive)

}


SHOW_OPERATE_DRESS_ARCHIVE_INPUT_DIALOG
{
    $title = {
        name = "ui_dress_archive_change_name"
    }

    $inputTitle = {
        name = "ui_dress_archive_input_name"
    }

    $buttons = [
        {
            event = "cancel",
            normalImage = "set:tip_dialog.json image:btn_big_blue",
            pushedImage = "set:tip_dialog.json image:btn_big_blue",
            name = "ui_cancel"
        },
        {
            event = "SHOW_DELETE_DRESS_ARCHIVE_DIALOG",
            normalImage = "set:tip_dialog.json image:btn_big_yellow",
            pushedImage = "set:tip_dialog.json image:btn_big_yellow",
            name = "ui_delete",
            clickAndShow = true
        },
        {
            event = "RENAME_DRESS_ARCHIVE",
            normalImage = "set:tip_dialog.json image:btn_big_green",
            pushedImage = "set:tip_dialog.json image:btn_big_green",
            name = "ui_sure"
        }
    ]

    $options = {
        index = $index
    }

    $contents = {
        title = $title,
        inputTitle = $inputTitle,
        buttons = $buttons,
        text = $name
    }

    ShowInputDialog(entity = $obj1, contents = $contents, options = $options)
}

ADD_DRESS_ARCHIVE
{
    $dressArchive = GetObjectVar(obj = $obj1, key = "dressArchive")
    If(not $dressArchive)
    {
        Return()
    }

    If((ArraySize(array = $dressArchive) - 1) < GetWorldVar(key = "dressArchiveNum"))
    {
        $addDressData = {
            vars = {
                custom_face = GetSkin(entity = $obj1, skinName = "custom_face"),
                custom_hair = GetSkin(entity = $obj1, skinName = "custom_hair"),
                clothes_tops = GetSkin(entity = $obj1, skinName = "clothes_tops"),
                clothes_pants = GetSkin(entity = $obj1, skinName = "clothes_pants"),
                custom_shoes = GetSkin(entity = $obj1, skinName = "custom_shoes"),
                custom_glasses = GetSkin(entity = $obj1, skinName = "custom_glasses"),
                custom_scarf = GetSkin(entity = $obj1, skinName = "custom_scarf"),
                custom_wing = GetSkin(entity = $obj1, skinName = "custom_wing"),
                custom_hat = GetSkin(entity = $obj1, skinName = "custom_hat"),
                custom_tail = GetSkin(entity = $obj1, skinName = "custom_tail")
            }
        }

        $addDressInfo = {
            vars = {
                name = $name,
                data = $addDressData,
                isSelect = false
            }
        }

        ArrayInsert(array = $dressArchive, index = 1, value = $addDressInfo)

        UpdateUIData(player = $obj1, ui = "win_dressArchive", data = $dressArchive)
    }
}

SHOW_DELETE_DRESS_ARCHIVE_DIALOG
{
    ShowDialogTip(entity = $obj1, 
        p1 = "ui_dress_archive_delete_dialog_context",
        event = "DELETE_DRESS_ARCHIVE",
        tipType = 2,
        context = { index = $index })
}

DELETE_DRESS_ARCHIVE
{
    If(not $result)
    {
        Return()
    }
    
    ShowInputDialog(entity = $obj1, contents = { isClose = true })
    $dressArchive = GetObjectVar(obj = $obj1, key = "dressArchive")

    If(not $dressArchive)
    {
        Return()
    }

    If(not $index)
    {
        Return()
    }

    If($index <= ArraySize(array = $dressArchive) and $index > 0)
    {
        ArrayRemove(array = $dressArchive, index = $index)
    }
    
    UpdateUIData(player = $obj1, ui = "win_dressArchive", data = $dressArchive)
}

RENAME_DRESS_ARCHIVE
{
    $dressArchive = GetObjectVar(obj = $obj1, key = "dressArchive")
    If(not $dressArchive)
    {
        Return()
    }

    If(not $index)
    {
        Return()
    }

    If($index <= ArraySize(array = $dressArchive) and $index > 0)
    {
        $archive = ArrayGet(array = $dressArchive, index = $index)
        If($archive)
        {
            SetObjectVar(obj = $archive, key = "name", value = $name)
        }
    }
    
    UpdateUIData(player = $obj1, ui = "win_dressArchive", data = $dressArchive) 
}

REMOVE_BM_DRESS
{
    $dressArchive = GetObjectVar(obj = $obj1, key = "dressArchive")
    If(not $dressArchive)
    {
        Return()
    }

    ArrayRemove(array = $dressArchive, index = ArraySize(array = $dressArchive))
}

INIT_PLAYER_DRESS
{
    $gameDress = GetObjectVar(obj = $obj1, key = "gameDress")
    If(not $gameDress)
    {
        Return()
    }

    If($gameDress ~= "")
    {
        $dressDict = NewDictionary($gameDress)
        ForeachDictionary(dict = $dressDict, keyName = "skinName", valueName = "skinValue")
        {
            SetSkin(entity = $obj1, skinName = $skinName, skinValue = $skinValue)
        }
    }
}

SAVE_PLAYER_DRESS
{
    $gameDress = GetObjectVar(obj = $obj1, key = "gameDress")
    If(not $gameDress)
    {
        Return()
    }

    $gameDress = {
        custom_face = GetSkin(entity = $obj1, skinName = "custom_face"),
        custom_hair = GetSkin(entity = $obj1, skinName = "custom_hair"),
        clothes_tops = GetSkin(entity = $obj1, skinName = "clothes_tops"),
        clothes_pants = GetSkin(entity = $obj1, skinName = "clothes_pants"),
        custom_shoes = GetSkin(entity = $obj1, skinName = "custom_shoes"),
        custom_glasses = GetSkin(entity = $obj1, skinName = "custom_glasses"),
        custom_scarf = GetSkin(entity = $obj1, skinName = "custom_scarf"),
        custom_wing = GetSkin(entity = $obj1, skinName = "custom_wing"),
        custom_hat = GetSkin(entity = $obj1, skinName = "custom_hat"),
        custom_tail = GetSkin(entity = $obj1, skinName = "custom_tail")
    }
}

SHOW_CHANGE_NAME_INPUT_DIALOG
{
    $title = {
        name = "ui_dress_change_name"
    }

    $inputTitle = {
        name = "ui_dress_input_name"
    }

    $buttons = [
        {
            event = "cancel",
            normalImage = "set:tip_dialog.json image:btn_big_blue",
            pushedImage = "set:tip_dialog.json image:btn_big_blue",
            name = "ui_cancel"
        },
        {
            event = "CHANGE_PLAYER_NAME",
            normalImage = "set:tip_dialog.json image:btn_big_green",
            pushedImage = "set:tip_dialog.json image:btn_big_green",
            name = "ui_sure"
        }
    ]

    $contents = {
        title = $title,
        inputTitle = $inputTitle,
        buttons = $buttons,
        text = $obj1.nickName
    }

    ShowInputDialog(entity = $obj1, contents = $contents)
}

CHANGE_PLAYER_NAME
{
    SetEntityName(entity = $obj1, name = $name)
    $obj1.nickName = $name
    UpdateUIData(player = $obj1, ui = "win_dressArchiveName", data = $name)
}

SHOW_OPERATE_DRESS_STORE_ITEM
{   
    If(not $storeId or not $itemIndex or not $targetIndex)
    {
        Return()
    }

    $item = GetStoreItem(storeId = $storeId, index = $itemIndex)
    If(not $item)
    {
        Return()
    }


    $itemDic = NewDictionary($item)

    $coinId = DictionaryGet(dict = $itemDic, key = "coinId")
    $price = DictionaryGet(dict = $itemDic, key = "price")

    If (not $coinId or not $price)
    {
        Return()
    }

    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_cancel",
        rightCoinId = $coinId,
        rightContent = $price
    }
    $context = {
        storeId = $storeId,
        itemIndex = $itemIndex,
        targetIndex = $targetIndex
    }
    ShowDialogTip(entity = $obj1,tipType = 5, event = "DRESS_STORE_ITEM_BUY", p1 = "ui_tip", p2 = "ui_sure_to_pay", p3 = $btnInfo, context = $context)
}

DRESS_STORE_ITEM_BUY
{
    If($result and $button == "right")
    {
        StoreOperation(entity = $obj1, storeId = $storeId, itemIndex = $itemIndex, targetIndex = $targetIndex)
    }
}

SHOW_SAVE_WORKS_TIP
{
    Test("================================================== SHOW_SAVE_WORKS_TIP")
    $price = GetConfigVar(obj = $obj1, key = "publishWorksPrice" )
    $btnInfo = { leftCoinId = 3, leftContent = $price, rightCoinId = nil, rightContent = "works_save" }
    $context = { url = $url}
    ShowDialogTip(entity = $obj1, tipType = 5, event = "SAVE_WORKS_TIP_CLICK_EVENT", p1 = "ui_tip", p2= "publish_works_tip", p3 = $btnInfo, context = $context)
}

SAVE_WORKS_TIP_CLICK_EVENT
{
    Test("================================================== SAVE_WORKS_TIP_CLICK_EVENT")

    If(not $result) {
        Return()
    }

    $isPublish = false
    If($button == "left")
    {
        $price = GetConfigVar(obj = $obj1, key = "publishWorksPrice" )
        If(CheckBalance(entity = $obj1, coinName = "green_currency", price = $price))
        {
            $isPublish = true
        }
        Else
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_not_enough_money", time = 20)
            Return()
        }
    }

    $content = { url = $url, isPublish = $isPublish }
    CallTrigger(event = "CHECK_WORKS_ARCHIVE", obj1 = $obj1, url = $url, isPublish = $isPublish)
}


CHECK_WORKS_ARCHIVE
{
    Test("================================================== CHECK_WORKS_ARCHIVE")
    GetWorksCount(player = $obj1, event = "CHECK_WORKS_ARCHIVE_RESPONSE", url = $url, isPublish = $isPublish)
}

CHECK_WORKS_ARCHIVE_RESPONSE
{
    Test("================================================== CHECK_WORKS_ARCHIVE_RESPONSE")
    Test($response)

    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")

    If($code == 1)
    {
        $freeCount = GetConfigVar(obj = $obj1, key = "freeWorksArchive" )
        $count = DictionaryGet(dict = $dictValue, key = "data")
        If($count < $freeCount)
        {
            CallTrigger(event = "CREATE_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish)
        }
        Else
        {
            CallTrigger(event = "SHOW_BYU_WORKS_ARCHIVE_UI", obj1 = $obj1, url = $url, isPublish = $isPublish)
        }
    }
    Else
    {
        If($isPublish)
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_failure", time = 20)
        }
        Else
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_failure", time = 20)
        }
    }
}

SHOW_BYU_WORKS_ARCHIVE_UI
{
    Test("================================================== SHOW_BYU_WORKS_ARCHIVE_UI")
    $price = GetConfigVar(obj = $obj1, key = "worksArchivePrice" )
    $btnInfo = { leftCoinId = 0, leftContent = $price, rightCoinId = nil, rightContent = "works_save_coverage_new" }
    $context = { url = $url, isPublish = $isPublish }
    ShowDialogTip(entity = $obj1, tipType = 5, event = "BUY_WORKS_ARCHIVE", p1 = "publish_works_buy_archive_title", p2= "publish_works_buy_archive", p3 = $btnInfo, context = $context)
}

BUY_WORKS_ARCHIVE
{
    Test("================================================== BUY_WORKS_ARCHIVE")
    If($button == "close" || not $result)
    {
        Return()
    }

    If($button == "left")
    {
        $price = GetConfigVar(obj = $obj1, key = "worksArchivePrice" )
        If(not CheckBalance(entity = $obj1, coinName = "gDiamonds", price = $price))
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_buy_archive_not_enough_money", time = 20)
            Return()
        }
        BuyGoods(player = $obj1, uniqueId = 1000001,  coinId = 0, price = $price, url = $url, isPublish = $isPublish, event = "BUY_WORKS_ARCHIVE_RESPONSE" )
    }

    If($button == "right")
    {
        CallTrigger(event = "GET_NEW_UN_PUBLISH_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish)
    }
}

BUY_WORKS_ARCHIVE_RESPONSE
{
    Test("================================================== BUY_WORKS_ARCHIVE_RESPONSE")
    Test($response)
    $dictValue = NewDictionary($response)

    $url = DictionaryGet(dict = $dictValue, key = "url")
    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    $isPublish = DictionaryGet(dict = $dictValue, key = "isPublish")
    If($isSucceed)
    {
        CallTrigger(event = "CREATE_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish)
    }
    Else
    {
        ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_buy_archive_failure", time = 20)
    }
}

GET_NEW_UN_PUBLISH_WORKS
{
    GetNewUnPublishWorks(event = "GET_NEW_UN_PUBLISH_RESPONSE", player = $obj1, url = $url, isPublish = $isPublish)
}

GET_NEW_UN_PUBLISH_RESPONSE
{
     $dictValue = NewDictionary($response)
     $code = DictionaryGet(dict = $dictValue, key = "code")
     If($code == 1)
     {
        $worksId = DictionaryGet(dict = $dictValue, key = "data")
        CallTrigger(event = "UPDATE_WORKS", obj1 = $obj1, url = $url, isPublish = $isPublish, worksId = $worksId)
     }
     Else
     {
        ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_coverage_new_works_failure", time = 20)
     }
}

UPDATE_WORKS
{
    UpdateWorks(player = $obj1, url = $url, isPublish = $isPublish, worksId = $worksId, event = "UPDATE_WORKS_RESPONSE")
}

UPDATE_WORKS_RESPONSE
{
     $dictValue = NewDictionary($response)
     $code = DictionaryGet(dict = $dictValue, key = "code")
     If($code == 1)
     {
        If($isPublish)
        {
            $price = GetConfigVar(obj = $obj1, key = "publishWorksPrice" )
            PayCurrency(entity = $obj1, coinName = "green_currency", count = $price)
            ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_coverage_and_publish_new_works_succeed", time = 20)
            UpdateUIData(player =$obj1, ui = "works_person", data = true)
        }
        Else
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_coverage_new_works_succeed", time = 20)
        }
     }
     Else
     {
        ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_coverage_new_works_failure", time = 20)
     }
}

CREATE_WORKS
{
    Test("================================================== CREATE_WORKS")
    CreateWorks(player = $obj1, picUrl = $url, isPublish = $isPublish, event = "CREATE_WORKS_RESPONSE")
}

CREATE_WORKS_RESPONSE
{
    Test("================================================== CREATE_WORKS_RESPONSE")
    Test($response)

    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")

    If($code == 1)
    {
        If($isPublish)
        {
            $price = GetConfigVar(obj = $obj1, key = "publishWorksPrice" )
            PayCurrency(entity = $obj1, coinName = "green_currency", count = $price)
            ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_succeed", time = 20)
            UpdateUIData(player =$obj1, ui = "works_person", data = true)
        }
        Else
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_succeed", time = 20)
        }
    }
    Else
    {
        If($isPublish)
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_failure", time = 20)
        }
        Else
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "works_save_failure", time = 20)
        }
    }
}

SHOW_PUBLISH_WORKS_UI
{
    Test("===========================================================SHOW_PUBLISH_WORKS_UI")
    $price = GetConfigVar(obj = $obj1, key = "publishWorksPrice" )
    $cubePrice = GetConfigVar(obj = $obj1, key = "publishWorksCubePrice" )
    $btnInfo = { leftCoinId = 3, leftContent = $price, rightCoinId = 0, rightContent = $cubePrice }
    $context = { worksId = $worksId, isEdit = false }
    ShowDialogTip(entity = $obj1, tipType = 5, event = "PUBLISH_WORKS", p1 = "ui_tip", p2= "publish_works_tip", p3 = $btnInfo, context = $context)
}

PUBLISH_WORKS
{
    If($button == "left")
    {
        $price = GetConfigVar(obj = $obj1, key = "publishWorksPrice" )
        If(not CheckBalance(entity = $obj1, coinName = "green_currency", price = $price))
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_not_enough_money", time = 20)
            Return()
        }
        PublishWorks(player = $obj1, id = $worksId, event = "PUBLISH_WORKS_RESPONSE")
    }

    If($button == "right")
    {
        $price = GetConfigVar(obj = $obj1, key = "publishWorksCubePrice")
        If(not CheckBalance(entity = $obj1, coinName = "gDiamonds", price = $price))
        {
            ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_not_enough_money", time = 20)
            Return()
        }
        BuyGoods(player = $obj1, uniqueId = 1000002,  coinId = 0, price = $price, worksId = $worksId, event = "PAY_PUBLISH_WORKS_BY_CUBE_RESPONSE" )
    }
}

PUBLISH_WORKS_RESPONSE
{
    Test($response)
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    If($code == 1)
    {
        $price = GetConfigVar(obj = $obj1, key = "publishWorksPrice" )
        PayCurrency(entity = $obj1, coinName = "green_currency", count = $price)
        ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_succeed", time = 20)
        UpdateUIData(player =$obj1, ui = "works_person", data = true)
    }
    Else
    {
        ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_failure", time = 20)
    }
}

PAY_PUBLISH_WORKS_BY_CUBE_RESPONSE
{
    Test("================================================== PAY_PUBLISH_WORKS_BY_CUBE_RESPONSE")
    Test($response)
    $dictValue = NewDictionary($response)

    $obj1 = DictionaryGet(dict = $dictValue, key = "player")
    $worksId = DictionaryGet(dict = $dictValue, key = "worksId")

    If($isSucceed)
    {
        PublishWorks(player = $obj1, id = $worksId, event = "PUBLISH_WORKS_BY_CUBE_RESPONSE")
    }
    Else
    {
        ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_failure", time = 20)
    }
}

PUBLISH_WORKS_BY_CUBE_RESPONSE
{
    Test("================================================== PUBLISH_WORKS_BY_CUBE_RESPONSE")
    Test($response)
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    If($code == 1)
    {
        ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_succeed", time = 20)
    }
    Else
    {
        ShowTip(entity = $obj1, tipType = 6, textKey = "publish_works_failure", time = 20)
    }
}

COMMENT_WORKS
{
    Test($msg)
    CommentWorks(player = $obj1, id = $id, msg = $msg, event = "HTTP_TEST")
}

HTTP_TEST
{
    Test($response)
}

HTTP_PURCHASED_DRESS_CALL_BACK
{
    $responseDict = NewDictionary($response)
    $dressStoreIds = GetWorldVar(key = "dressStoreIds")
    Foreach(array = $dressStoreIds, key = "storeId")
    {
        $storeItems = GetStoreById(storeId = $storeId)
        Foreach(array = $storeItems, key = "item")
        {
            $itemDict = NewDictionary($item)
            $itemType = DictionaryGet(dict = $itemDict, key = "itemType")
            $itemName = DictionaryGet(dict = $itemDict, key = "itemName")
            $itemId = GetConfigValue(type = "dress", fullName = $itemName, key = "itemId")
            $itemIndex = DictionaryGet(dict = $itemDict, key = "index")
            ForeachDictionary(dict = $responseDict, keyName = "type", valueName = "responseItems")
            {
                If($itemType == $type)
                {
                    Foreach(array = $responseItems, key = "responseItem")
                    {
                        If($itemId == $responseItem)
                        {
                            ChangeItemStatus(storeId = $storeId, index = $itemIndex, status = 1, player = $obj1)
                        }
                    }
                }
            }
        }
    }
    SyncStore(player = $obj1)
}

--打工
GET_TASK_UI_DATA(){ --更新UI数据。
    $count = $obj1.worktaskCount % 10
    If($count == 0 && $obj1.worktaskCount >0){
        $count = 10 
    }
    $textCount = $obj1.worktaskCount
    $isTasking = false
    If($obj1.taskKey){
        $count = $count - 1
        $isTasking = true
    }
    $str = "/"
    If($obj1.taskKey){
        If($textCount == 1){
            $str = "/st"
        }ElseIf($textCount == 2){
            $str = "/nd"
        }ElseIf($textCount == 3){
            $str = "/rd"
        }Else{
            $str = "/th"
        }
    }
    $text = Concat(p1 = $textCount, p2 = $str, p3 = "40")
    $rate = $count / 10
    $imgcount = $obj1.worktaskCount
    If($obj1.taskKey){
        $imgcount = $imgcount - 1
    }
    If($imgcount >=0 and $imgcount <10){
        $btnImg = "set:indentImg.json image:btn1.png"
    }ElseIf($imgcount >=10 &&  $imgcount <20){
        $btnImg = "set:indentImg.json image:BtnGreen.png"
    }ElseIf($imgcount >=20 && $imgcount <30){
        $btnImg = "set:indentImg.json image:btnBule.png"
    }ElseIf($imgcount >=30 && $imgcount <40){
        $btnImg = "set:indentImg.json image:BtnRed.png"
    }
    $taskData = Table(
        Progress =  $rate,
        BtnText = $text,
        gpsPos = $obj1.gpsPos,
        isTasking = $isTasking,
        closeOneceGps = $closeGps,
        showOneceGps = $showGps,
        animation = $animation,
        btnImg = $btnImg
    )
    UpdateUIData(player = $obj1, ui = "circleProgress", data = $taskData)
}
GET_TASK_GPS(debug = false) --得到打工的GPS位置
{
    $map = GetPlayerMap(player = $obj1)
    $owner = GetMapOwner(map = $map)
    If($owner){
        $door = GetObjectVar(obj = $owner , key = "insideDoor")
        $obj1.gpsPos = GetEntityPosition(entity = $door)
    }Else{
        $obj1.gpsPos = $obj1.taskPos or  {x = 89, y = 18, z = 195}
    }
}
INIT_WORK_TASK(){ --初始打工
    $index =  $obj1.taskIndex
    If($index && $index > 0){
        $taskDict = ArrayGet(array = @TASK_TABLE, index = $index)
        $obj1.taskKey = DictionaryGet(dict = $taskDict, key = "taskKey") -- 随机到的任务
        $obj1.taskPos = DictionaryGet(dict = $taskDict, key = "pos") -- 随机到的任务NPC ,GPS位置
        $obj1.taskNpc = DictionaryGet(dict = $taskDict, key = "npcName") --npc的 fullName
        $obj1.npcMap = DictionaryGet(dict = $taskDict, key = "npcMap")
    }
    CallTrigger(event = "GET_TASK_GPS", object = $obj1)
    CallTrigger(event = "GET_TASK_UI_DATA", object = $obj1)
    $obj1.taskTemer = StartTimer(rep = false, time = 20, object = $obj1, event = "TASK_UPDATE_DATA")
}
FINISH_TASK(debug = false){ --完成打工的对话
    If($obj1.taskKey ~= $name){
       Return()
    }
    OpenConversation(
        entity = $obj1,
        optionList = [
            {
                triggerName = "FINISH_AWARD"
            }
        ],
        optionNpc = "myplugin/player1",
        talkList = [
            {
                msg = "tr.37965",
                npc = $obj1.taskNpc
            }
        ]
    )
}
TEST_SHOW_ITEM(){
    $data1 = GetWorldVar(key = "titilePos1")
    $data2 = GetWorldVar(key = "titilePos2")
    Show3DUI(player = $obj1, show = true, data = $data1)
    Show3DUI(player = $obj1, show = true, data = $data2)
}
FINISH_AWARD(){ --完成打工的奖励
    $money = GetConfigValue(type = "reward", fullName = "myplugin/task_money", key = $obj1.worktaskCount)
    If(not $money){
        $money = 1
    }
    AddCurrency(entity = $obj1, coinName = "green_currency", count = $money)
    ShowRewardRollTip(image = "set:jail_break.json image:jail_break_currency", text = Concat(p1 = "+", p2 = $money), entity = $obj1)
    $taskItem = SearchBagItem(entity = $obj1, key = "fullName", val = "myplugin/taskItem")
    ConsumeItem(item = $taskItem, num = 1)
    $proessLeve = NumberFloor(p1 = $obj1.worktaskCount / 10)
    $proessCount = $obj1.worktaskCount % 10
    $obj1.lastNpc = $obj1.taskNpc
    $obj1.taskNpc = nil
    $obj1.taskKey = nil
    $obj1.taskPos = nil
    $obj1.npcMap = nil
    $obj1.taskIndex = nil
    $animation = true
    If($proessLeve > 0 and $proessCount == 0){
        $animation = true
        $recfg = GetConfigValue(type = "reward", fullName = "myplugin/task_reward", key = $proessLeve)
        AddItem(entity = $obj1, cfg = $recfg, count = 1)
        --ShowDialogTip(entity = $obj1, tipType = 4, p1 = "ui_tip", p2 = $content, p3 = $btnInfo, context = $Context)
        --ShowRewardNotice(
         --   entity = $obj1,
         --   tiptext = "",
        --    tittletext = "final.summary.reward",
        --    cfg = $recfg
        --)
        ShowRewardItemEffect(itemCfg = $recfg)
    }
    If($obj1.worktaskCount >= 40){
        $obj1.worktaskCount = 0
    }
    CallTrigger(event = "GET_TASK_GPS", object = $obj1, showGps = false)
    CallTrigger(event = "TASK_NPC_ADD_BUFF", object = $obj1, from = "task_____ffffffff")
    CallTrigger(event = "GET_TASK_UI_DATA", object = $obj1, closeGps = true, animation = $animation)
}
TASK_NPC_ADD_BUFF(debug = false)
{
    $map = GetPlayerMap(player = $obj1)
    $mapNpc = GetMapNpc(map = $map)
    Foreach(array = $mapNpc, key = "npc"){
        $name = GetConfigVar(obj = $npc, key = "fullName")
        If($name == $obj1.lastNpc){
            UnMarkEntityForPlayer(player = $obj1, entity = $npc, buffName = "myplugin/hand_point_effect")
        }
        If($name == $obj1.taskNpc){
            MarkEntityForPlayer(player = $obj1, entity = $npc, buffName = "myplugin/hand_point_effect")
        }
    }
}
TASK_UPDATE_DATA(){
    CallTrigger(event = "TASK_NPC_ADD_BUFF", object = $obj1, from = "MMMMMMMaaaaaapppp")
	CallTrigger(event = "GET_TASK_GPS", object = $obj1)
    CallTrigger(event = "GET_TASK_UI_DATA", object = $obj1)
}
--场景商店的购买逻辑
SURE_BUY(debug = false){
   If($button == "left"){
      Return()
   }
   $obj2 = GetObject(objID = $objID)
   If($checkId ~= $obj1.buySessionSS or not $obj2 or not IsValidObject($obj2))
   {
      Return()
   }
   $itemfullName = GetConfigVar(obj = $obj2, key = "sellItem")
   $price = GetConfigVar(obj = $obj2, key = "sellPrice")
   $coinName = "green_currency"
   $itemName = GetItemCfg(fullName = $itemfullName, key = "itemname")
   $enoughMoney = CheckBalance(entity = $obj1, coinName = $coinName, price = $price)
   If($enoughMoney){ --够钱
         $checkBag = AddItem(entity = $obj1, cfg = $itemfullName, count = 1)
         If($checkBag ~= false){
            ShowTip(textKey = "ui_buy_success", tipType = 1, entity = $obj1, keepTime = 20)
            PayCurrency(entity = $obj1, coinName = $coinName, count = $price)
            $owner = $obj2.owner
            If($owner && IsValidObject($owner)){ --给领主加钱
               $name = GetEntityName(entity = $obj1)
               ShowTip(textKey = "gui_buys_your_stuff",textP1 = $name, textP2 = $itemName, tipType = 1, entity = $owner, keepTime = 20)
               AddCurrency(entity = $owner, coinName = $coinName, count = $price)
            }
         }Else{ --背包满了
            ShowTip(textKey = "gui_str_app_shop_inventory_is_full", tipType = 2, entity = $obj1, keepTime = 20)
         }
   }Else{ --不够钱
      ShowTip(textKey = "app_shop_lack_of_money", tipType = 2, entity = $obj1, keepTime = 20)
   }
}
--特权购买成功
ENTITY_BUY_APPSTOP(debug = false){
    $dict = NewDictionary($shop)
    $shopType = DictionaryGet(dict = $dict, key = "type")
    $itemIndex = DictionaryGet(dict = $dict, key = "index")
    $name = FindStr(str = $itemName, where_ = "/", back_ = true)
    $index = ArrayFind(array = $obj1.privilege, value = $name)
    --Test("-----goodsinfo:",$obj1.goodsInfo)
    --Test("-----privilege:",$obj1.privilege)
    If($shopType == "1" && not $index){
        $addItem = false
        $goodsDict = NewDictionary($obj1.goodsInfo)
        $limit = $limit - DictionaryGet(dict = $goodsDict, key = $itemIndex)
        
        ArrayAppend(array = $obj1.privilege, value = $name)
        --Test("------------",$obj1.privilege)
    }
}
--弹窗购买特权
POP_UP_BUY_PRIVILEGE(debug = false)
{
    If(not $itemName ){
        Return()
    }
    $PRIVILEGE_TABLE = {
            vip_privilege = 100000,
            dance_privilege = 20000,
            action_privilege = 3000,
            music_privilege = 40000,
            home_privilege = 50000,
            svip_privilege = 60000,
    }
    $dict = NewDictionary($PRIVILEGE_TABLE)
    $price = DictionaryGet(dict = $dict, key = $itemName)
    If(not $price){
        Return()
    }
    $obj1.checkprid = ($obj1.checkprid or 0 ) + 1
    $Context = {
        itemName = $itemName,
        price = $price,
        seccionid = $obj1.checkprid
    }
    $btnInfo = {
        leftCoinId = nil,
        leftContent = "ui_cancel",
        rightCoinId = nil,
        rightContent = "ui_sure"
    }
    $content = {
        msg = "gui_you_want_to_buy_this",
        args = [ $price, $itemName]
    }

    ShowDialogTip(entity = $obj1, tipType = 5, event = "SURE_BUY_PRI", p1 = "ui_tip", p2 = $content, p3 = $btnInfo, context = $Context)
}
SURE_BUY_PRI(debug = false)
{
    If($button == "left"){
        Return()
    }
 
    If($seccionid ~= $obj1.checkprid or not $itemName)
    {
        Return()
    }

    BuyGoods(player = $obj1, uniqueId = 1000111,  coinId = 0, event = "BUY_PRI_GOODS" ,price = $price, itemName = $itemName, obj1 = $obj1)
}
BUY_PRI_GOODS(debug = false)
{
    $dict = NewDictionary($response)
    $itemName = DictionaryGet(dict = $dict, key = "itemName")
    $obj1 = DictionaryGet(dict = $dict, key = "obj1")
    If($isSucceed){
        ArrayAppend(array = $obj1.privilege, value = $itemName)
        ShowTip(textKey = "ui_buy_success", tipType = 1, entity = $obj1, keepTime = 20)
    }Else{
        ShowTip(textKey = "app_shop_lack_of_money", tipType = 2, entity = $obj1, keepTime = 20)
    }
}
--
PLAYER_BE_INVITE(debug = false){
    --party invite will call PLAYER_BE_INVITE_OTHER_SERVER
    $userId = GetPlayerUserID(player = $obj1)
    $inPartyOwnerId = $obj1.inPartyOwnerId
    If($inPartyOwnerId ~= 0){
        Return()--in party
    }
    $obj1.visitTarget = $obj2
    $contentDict = NewDictionary($content)
    --todo: can close by showTime
    --showTime = DictionaryGet(dict = $contentDict, key = "showTime")
    ShowNotice(
		buttonType = 2,
		content = $guiText or "gui_friend_invite_notice",
		eventYes = "PLAYER_ON_VISIT",
		entity = $obj1,
		textP1 = DictionaryGet(dict = $contentDict, key = "nickName")
	)
}
PLAYER_BE_INVITE_OTHER_SERVER(debug = false){
    $userId = GetPlayerUserID(player = $obj1)
    $inPartyOwnerId = $obj1.inPartyOwnerId
    If($inPartyOwnerId ~= 0){
        Return()--in party
    }
    $contentDict = NewDictionary($content)
    $fromParty = DictionaryGet(dict = $contentDict, key = "fromParty")
    If($fromParty){
        $guiText = "gui_party_invite_notice"
        $obj1.toParty = true
    }
    $obj1.visitTargetUserId = DictionaryGet(dict = $contentDict, key = "userId")
    ShowNotice(
        buttonType = 2,
        content = $guiText or "gui_friend_invite_notice",
        eventYes = "PLAYER_ON_VISIT_OTHER_SERVER",
        entity = $obj1,
        textP1 = DictionaryGet(dict = $contentDict, key = "nickName")
    )
}
PLAYER_ON_VISIT_OTHER_SERVER(debug = false){
    $targetUserId = $targetUserId or $obj1.visitTargetUserId
    If($obj1.toParty){
        TryJoinParty(targetUserId = $targetUserId)
    }
    Else{
        GotoOtherServer(targetUserId = $targetUserId, player = $obj1)
    }
}
PLAYER_ON_VISIT(debug = false){
    $targetInRoom = false
    $targetRoomLocked = true
    $fromJustBeRemoved = false
    If(not $target){
        $target = $obj2 or $obj1.visitTarget
    }
    If(not $target){
        Return()
    }
    If($fromInParty){
        SetEntityPosition(map = GetEntityMap(entity = $target), entity = $obj1, pos = GetEntityPosition(entity = $target))
    }
    Else{
        If($targetInRoom){
            --todo
        }
        Else{
            SetEntityPosition(entity = $obj1, pos = GetEntityPosition(entity = $target))
        }
    }
}
--场景商店门面
SHOW_SHOP_TITLE(debug = false){
    Return()
    If($obj1.showShopTitleTimer){
        StopTimer(timer = $obj1.showShopTitleTimer)
    }
    If(GetEntityMapName(entity = $obj1) == "map001" ){
        $data1 = GetWorldVar(key = "titilePos1")
        $data2 = GetWorldVar(key = "titilePos2")
        Show3DUI(player = $obj1, show = true, data = $data1)
        Show3DUI(player = $obj1, show = true, data = $data2)
    }
}
JOIN_PARTY_SUCCESS(debug = false){
    $obj1.inPartyOwnerId = $targetUserId
    GotoOtherServer(player = $obj1, targetUserId = $targetUserId)
}
UPDATE_CREATE_PARTY_VIEW_INFO(debug = false){
    $curHouseCfg = $obj1.curHouseCfg
    $maxPlayerNum = GetEntityCfg(fullName = $curHouseCfg, key = "partyMaxPlayerNumber")
    $partyImage = GetEntityCfg(fullName = $curHouseCfg, key = "partyImage")
}
CREATE_PARTY_SUCCESS(debug = false){
    $obj1.inPartyOwnerId = GetPlayerUserID(player = $obj1)
    GotoOtherServer(player = $obj1)
}
CLOSE_PARTY_SUCCESS(debug = false){
    --get all player, send tip, resetgame
    $name = GetEntityName(entity = $obj1)
    $players = NewDictionary(GetAllPlayers())
    ForeachDictionary(keyName = "_", valueName = "player", dict = $players){
        ShowTip(entity = $player, tipType = 2, textKey = "gui.party.be.closed", time =  20, textP1 = $name)
        $player.inPartyOwnerId = 0
        GotoOtherServer(player = $player)
    }
}

CREATE_CAR {
    $mapName = GetEntityName(entity = GetEntityMap(entity = $obj1))
    If($mapName ~= "map001")
    {
        Return()
    }

    $carName = "myplugin/car_1"

    If(not $obj1.createdCars)
    {
        $obj1.createdCars = NewDictionary()
    }

    $createdCarOfCarName = DictionaryGet(dict = $obj1.createdCars, key = $carName)
    $ownerInCar = false
    If($createdCarOfCarName)
    {
        $passengers = GetPassengers(entity = $createdCarOfCarName)
        Foreach(array = $passengers, key = "passenger")
        {
            If($passenger ~= GetObjectID(object = $obj1))
            {
                ShowTip(entity = GetObject(objID = $passenger), tipType = 2, textKey = "gui_car_owner_already_remove_car", time = 40)
            }
            Else
            {
                $ownerInCar = true
            }
        }

        KillEntity(entity = $createdCarOfCarName)
        DictionaryRemove(dict = $obj1.createdCars, key = $carName)
        If($ownerInCar)
        {
            Return()
        }
    }

    $car = CreateNpc(cfgName = $carName, pos = GetEntityPosition(entity = $obj1), 
        map = GetEntityMap(entity = $obj1), owner = $obj1)
    RideOn(ctrl = true, entity = $obj1, target = $car)

    DictionarySet(dict = $obj1.createdCars, key = $carName, value = $car)

}

DEBARK {
	Dismount(entity = $obj1)
}

PARTY_BE_LIKED(debug = false){}
LIKE_PARTY(debug = false){}