GAME_INIT(debug = false)
{
    @Generate_State_List = ["hunger", "thirsty", "dirty", "fatigue", "ill", "region"]
    @skillPath = "myplugin/skill_state_"
    CallTrigger(event = "FUNC_STATE_STARTTIMER")

    --打工配置表的读取
    @worlkMoeny = NewDictionary({})
    @failedMsg = NewDictionary({})
    @taskMap = NewDictionary({}) --
    @TASK_TABLE = NewArray() --打工的任务表
    @TASK_WEIGHT = NewArray()
    $taskData = GetConfigValue(type = "task", fullName = "myplugin/work", key = "tasks")
    Foreach(array = $taskData, key = "Dict"){
        $taskDict = NewDictionary($Dict)
        $arg = DictionaryGet( dict = $taskDict, key = "targets")
        $targets = NewDictionary(ArrayGet(array = $arg, index = 1)) 
        $value = NewDictionary()
        $npcName = DictionaryGet(dict = $targets, key = "cfgName")
        $msg = DictionaryGet(dict = $taskDict, key = "succeedMsg")
        $pos = DictionaryGet(dict = $taskDict, key = "npcPos")
        DictionarySet(dict = $value,  key = "taskKey" , value = DictionaryGet(dict = $taskDict, key = "fullName"))
        DictionarySet(dict = $value,  key = "pos" , value = $pos)
        DictionarySet(dict = $value,  key = "npcName" , value = $npcName)
        DictionarySet(dict = $value,  key = "npcMap" , value = DictionaryGet(dict = $taskDict, key = "npcMap"))
        DictionarySet(dict = $value,  key = "failedMsg" , value = DictionaryGet(dict = $taskDict, key = "failedMsg"))
        DictionarySet(dict = $value,  key = "succeedMsg" , value = $msg)
        $weight =  DictionaryGet(dict = $taskDict, key = "weight")
        DictionarySet(dict = $value,  key = "weight" , value = $weight)
        ArrayAppend(array = @TASK_WEIGHT, value = $weight)
        ArrayAppend(array = @TASK_TABLE, value = $value)
        DictionarySet(dict = @failedMsg, key = $npcName, value = $msg)
        CreateNpc(cfgName = $npcName, pos = Copy(value = $pos))
    }
    ForLoop(from=1, to = 40, key = "index"){
        $redict = GetConfigValue(type = "reward", fullName = "myplugin/task_money", key = $index)
        If(not $redict){
            Break()
        }
        $mdict = NewDictionary($redict)
        DictionarySet(dict = @worlkMoeny, key = DictionaryGet(dict = $mdict, key = "index"), value = $mdict)
    }
    CreateNpc(cfgName = "myplugin/indentModel", pos = {x = 89, y = 18, z = 195}  ,name = "订单")
	CreateNpc(cfgName = "myplugin/fishItem", pos = {x = 92, y = 19, z = 195} ,name = "买鱼")

    @DECORATION_STORE = ReadGameCsv(path = "decoration_store.csv")

    @CURRENT_ID_IMAGE = [
        "set:diamond.json image:Diamond-icon2.png",
        "set:diamond.json image:Diamond-icon2.png",
        "set:diamond.json image:Diamond-icon2.png",
        "set:jail_break.json image:jail_break_currency"
    ]
    CallTrigger(event = "WORKS_WALL_TIMER_START")
}


FUNC_STATE_STARTTIMER
{
    ForLoop(from = 1, to = ArraySize(array = @Generate_State_List), key = "idx")
    {
        $stateBase = ArrayGet(array = @Generate_State_List, index = $idx)
        $keyStr = Concat(p1 = "myplugin/skill_state_", p2 = $stateBase)
        $timeInfo = GetSkillVar(fullName = $keyStr, key = "generateTime")

        $cdTime = ArrayGet(array = $timeInfo, index = 1)
        StartTimer(
            column = 1,
            rep = false,
            timeArr = $timeInfo,
            stateBase = $stateBase,
            time = ($cdTime * 1200) // 1,
            event = "FUNC_BROADCAST_STATE",
        )
    }
}

FUNC_BROADCAST_STATE
{
    Foreach(array = GetAllPlayers(), key = "player"){
        --TODO 完善状态的生成
        --If(player in party)
        --{
        --    Continue()
        --}
        SetObjectVar(obj = $player, value = 0, key = Concat(p1 = $stateBase, p2 = "RewardCount"))

        $skill = Concat(p1 = @skillPath, p2 = $stateBase)
        $generateType = GetSkillVar(
            fullName = $skill,
            key = "generateType"
        )
        If($generateType == "A" && GetObjectVar(obj = $player, key = Concat(p1 = "had", p2 = $stateBase)))
        {
            Continue()
        }
        
        If($generateType == "B" && GetObjectVar(obj = $player, key = Concat(p1 = $stateBase, p2 = "UsedTime")))
        {
            Continue()
        }

        CallTrigger(object = $player, event = "FUNC_STATE_GENERATE", stateBase = $stateBase, col = $column, skill = $skill)
	}

    $curTime = ArrayGet(array = $timeArr, index = $column)
    $column = $column + 1
    If($column > ArraySize(array = $timeArr))
    {
        $column = 1
    }
    $endTime = ArrayGet(array = $timeArr, index = $column)
    $cdTime = $endTime - $curTime
    If($cdTime <= 0)
    {
        $cdTime = 60 - $curTime + $endTime
    }

    StartTimer(
        rep = false, 
        event = $event,
        column = $column,
        timeArr = $timeArr,
        stateBase = $stateBase,
        time = ($cdTime * 1200) // 1
    )
}

SHOW_SELECT_ROLE
{
    $contents = [
        {
            normalImage = "set:select_role.json image:child",
            pushedImage = "set:select_role.json image:child",
            event = "CHANGE_PLAYER_SCALE_CHILD",
            text = "ui_pick_child"
        },
        {
            normalImage = "set:select_role.json image:adult",
            pushedImage = "set:select_role.json image:adult",
            event = "CHANGE_PLAYER_SCALE_ADULT",
            text = "ui_pick_adult"
        }
    ]
    
    $fullName = "myplugin/selectRoleView"

    ShowCardOptionsView(entity = $obj1, contents = $contents, fullName = $fullName)
}

CHANGE_PLAYER_SCALE_ADULT
{
    If($obj1.scaleBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.scaleBuff)
        $obj1.scaleBuff = nil
    }

    If($obj1.boundingBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.boundingBuff)
        $obj1.boundingBuff = nil
    }

    $obj1.scaleBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/scale_adult")
    $obj1.boundingBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/bounding_adult")
    $obj1.role = @adult

    If(IsPlayer(entity = $obj1))
    {
        UpdateUIData(player = $obj1, ui = "win_dressArchiveScale", data = 1)
    }
}

CHANGE_PLAYER_SCALE_CHILD
{
    If($obj1.scaleBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.scaleBuff)
        $obj1.scaleBuff = nil
    }

    If($obj1.boundingBuff)
    {
         RemoveEntityBuff(entity = $obj1, buff = $obj1.boundingBuff)
         $obj1.boundingBuff = nil
    }

    $obj1.scaleBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/scale_child")
    $obj1.boundingBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/bounding_child")
    $obj1.role = @child
    
    If(IsPlayer(entity = $obj1))
    {
        UpdateUIData(player = $obj1, ui = "win_dressArchiveScale", data = 0.8)
    }
}

FUNC_CLOSE_GPS --params: destination
{
    If(not $destination || $destination == GetObjectVar(obj = $obj1, key = "gpsDestination"))
    {
        SetGuidePostion(entity = $obj1)
        RemoveSkill(entity = $obj1, name = "myplugin/close_gps")
        SetObjectVar(obj = $obj1, key = "gpsDestination", value = nil)
    }
}

FUNC_OPEN_GPS --params: destination
{
    SetGuidePostion(pos = $pos, entity = $obj1)
    AddSkill(entity = $obj1, name = "myplugin/close_gps")
    SetObjectVar(obj = $obj1, key = "gpsDestination", value = $destination)
    ShowTip(entity = $obj1, tipType = 3, textKey = "openning_gps")
}

FUNC_CLOSE_PROGRESS_FOLLOW_OBJ --params: pgName
{
    If(not $pgName || $pgName == GetObjectVar(obj = $obj1, key = "progress"))
    {
        ShowProgressFollowObj(
            entity = $obj1,
            isOpen = false
        )
        SetObjectVar(obj = $obj1, key = "progress", value = nil)
    }
}

FUNC_CLOSE_DETAILS_UI --params: uiName
{
    If(not $uiName || $uiName == GetObjectVar(obj = $obj1, key = "detailsUI"))
    {
        ShowDetails(entity = $obj1, isOpen = false)
        SetObjectVar(obj = $obj1, key = "detailsUI", value = nil)
    }
}

FUNC_STOP_TIMER --params: timerStr
{
    $timer = GetObjectVar(obj = $obj1, key = $timerStr)
    If(not $timer)
    {
        Return()
    }
    StopTimer(timer = $timer)
    SetObjectVar(obj = $obj1, key = $timerStr, value = nil)
}

FUNC_REMOVE_BUFF --params: buffStr
{
    $hadBuff = GetObjectVar(obj = $obj1, key = $buffStr)
    If(not $hadBuff)
    {
        Return()
    }
    RemoveEntityBuff(entity = $obj1, buff = $hadBuff)
    SetObjectVar(obj = $obj1, key = $buffStr, value = nil)
}

FUNC_STATE_ADD_INTERACTLIST --params: entities
{
    Foreach(array = @Generate_State_List, key = "stateBase")
    {
        $listName = Concat(p1 = $stateBase, p2 = "InteractList")
        Foreach(array = $entities, key = "entity")
        {
            If(not IsPlayer(entity = $entity) || not GetObjectVar(obj = $entity, key = Concat(p1 = "had", p2 = $stateBase)))
            {
                Continue()
            }
            $interactList = GetObjectVar(obj = $entity, key = $listName) or []
            Foreach(array = $entities, key = "cp")
            {
                $cpID = GetObjectID(object = $cp)
                If($cp == $entity || not IsPlayer(entity = $cp) || ArrayFind(array = $interactList, value = $cpID))
                {
                    Continue()
                }
                ArrayAppend(array = $interactList, value = $cpID)
            }
            SetObjectVar(obj = $entity, key = $listName, value = $interactList)
        }
    }
}

WORKS_WALL_TIMER_START
{
    StartTimer(rep = true, time = 1200, event = "WORKS_WALL_UPDATE_EXCELLENT_WORKS")
}

WORKS_WALL_UPDATE_EXCELLENT_WORKS
{
    If(not @excellentWorksIndex)
    {
        @excellentWorksIndex = 0
    }
    $worksIndex = 1
    $size = ArraySize(array = @excellentWorks)
    Foreach(array = @excellentWorks, key = "works")
    {
        If(@excellentWorksIndex < $worksIndex || (@excellentWorksIndex == $size && $worksIndex == 1))
        {
            @excellentWorksIndex = $worksIndex
            Foreach(array = GetAllPlayers(), key = "player")
            {
                UpdateUIData(player =$player, ui = "win_worksWall", data = $works)
            }
            Break()
        }
        $worksIndex = $worksIndex + 1
    }
}

FUNC_LOAD_NEW_WORKS {
    $currentCount = 20
    $othersCount = 20
    $userIds = {}
    Foreach(array = GetAllPlayers(), key = "player")
    {
        $userId = GetPlayerUserID(player = $player)
        ArrayAppend(array = $userIds, value = $userId)
    }
    GetNewWorks(currentCount = $currentCount , othersCount = $othersCount, userIds = $userIds,  event = "LOAD_NEW_WORKS_RESPONSE" )
}

LOAD_NEW_WORKS_RESPONSE {
    $info = {}
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    If($code == 1)
    {
        $info = DictionaryGet(dict = $dictValue, key = "data")
    }

    Foreach(array = GetAllPlayers(), key = "player")
    {
        UpdateUIData(player =$player, ui = "works_appreciate", data = $info)
    }
}

FUNC_LOAD_EXCELLENT_WORKS {
    $count = 180
    GetExcellentWorks(count = $count, limit = 0, event = "LOAD_TOP_EXCELLENT_RESPONSE" )
}

LOAD_TOP_EXCELLENT_RESPONSE {
    $info = {}
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    If($code == 1)
    {
        $info = DictionaryGet(dict = $dictValue, key = "data")
    }

    Foreach(array = GetAllPlayers(), key = "player")
    {
        UpdateUIData(player =$player, ui = "works_excellent", data = $info)
    }

    @excellentWorks = $info
}
ENTITY_RIDE_OFF(debug = false){
    If(not IsPlayer(entity = $obj2)){ Return() }
    RecheckObjectInteractionUI(player = $obj2, target = $obj1)
    If(not IsPlayer(entity = $obj1)){ Return() }
    RecheckObjectInteractionUI(player = $obj1, target = $obj2)
}
ENTITY_RIDE_ON(debug = false){
    If(not IsPlayer(entity = $obj2)){ Return() }
    UpdateObjectInteractionUI(player = $obj2, target = $obj1, show = false)
    If(not IsPlayer(entity = $obj1)){ Return() }
    UpdateObjectInteractionUI(player = $obj1, target = $obj2, show = false)
}
REMOVE_ILL_BUFF
{
    -- CallTrigger(object = $obj1, event = "FUNC_REMOVE_BUFF", buffStr = "illEffect")
    CallTrigger(object = $obj1, event = "FUNC_STATE_RELEASE", state = "ill", duration = 0)
}