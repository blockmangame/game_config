GAME_INIT 
{
    @BGMConfigs = ReadGameCsv(path = "bgm.csv")
    @Generate_State_List = ["hunger", "thirsty", "dirty", "fatigue", "ill", "region"]
    @skillPath = "myplugin/skill_state_"
    CallTrigger(event = "FUNC_STATE_STARTTIMER")
    @mathHuge = 10000000

    
	CreateNpc(cfgName = "myplugin/fishItem", pos = {x = 92, y = 19, z = 195} ,name = "买鱼")

    @DECORATION_STORE = ReadGameCsv(path = "decoration_store.csv")

    @CURRENT_ID_IMAGE = [
        "set:diamond.json image:Diamond-icon2.png",
        "set:diamond.json image:Diamond-icon2.png",
        "set:diamond.json image:Diamond-icon2.png",
        "set:jail_break.json image:jail_break_currency"
    ]
    CallTrigger(event = "WORKS_WALL_TIMER_START")

    --涂鸦墙文字初始化
    $U3Dcfg = GetWorldVar(key = "sceneUI")
    Foreach(array = $U3Dcfg, key = "ucfg")
    {
        $dict = NewDictionary($ucfg)
        $index = DictionaryGet(dict = $dict, key = "index")
        @graffitiWallText = NewDictionary()
        DictionarySet(dict = @graffitiWallText, key = $index, value = "")
    }
    CallTrigger(event = "INIT_WORK_TASK_DATA")
    CallTrigger(event = "FUNC_NAVIGATION_GET_MAPS_ALL_PATH")
}

INIT_WORK_TASK_DATA(){    --打工配置表的读取
    @worlkMoeny = NewDictionary({}) --奖励表
    @failedMsg = NewDictionary({})  --对话表
    @taskMap = NewDictionary({}) --
    @TASK_TABLE = NewArray() --打工的任务表
    @TASK_WEIGHT = NewArray() --打工随机比重表
    @INDENT_POS = GetConfigValue(type = "task", fullName = "myplugin/work", key = "indentPos")--订单领取位置
    @CircleNum = GetConfigValue(type = "task", fullName = "myplugin/work", key = "circleNum")
    @workmaxCount = GetConfigValue(type = "task", fullName = "myplugin/work", key = "maxCount") --最大限度
    @punishmentTime = GetConfigValue(type = "task", fullName = "myplugin/work", key = "punishmentTime") --惩罚时间
    $taskData = GetConfigValue(type = "task", fullName = "myplugin/work", key = "tasks")
    Foreach(array = $taskData, key = "Dict"){
        $taskDict = NewDictionary($Dict)
        $arg = DictionaryGet( dict = $taskDict, key = "targets")
        $targets = NewDictionary(ArrayGet(array = $arg, index = 1)) 
        $value = NewDictionary()
        $npcName = DictionaryGet(dict = $targets, key = "cfgName")
        $msg = DictionaryGet(dict = $taskDict, key = "succeedMsg")
        $pos = DictionaryGet(dict = $taskDict, key = "npcPos")
        DictionarySet(dict = $value,  key = "taskKey" , value = DictionaryGet(dict = $taskDict, key = "fullName"))
        DictionarySet(dict = $value,  key = "pos" , value = $pos)
        DictionarySet(dict = $value,  key = "npcName" , value = $npcName)
        DictionarySet(dict = $value,  key = "npcMap" , value = DictionaryGet(dict = $taskDict, key = "npcMap"))
        DictionarySet(dict = $value,  key = "failedMsg" , value = DictionaryGet(dict = $taskDict, key = "failedMsg"))
        DictionarySet(dict = $value,  key = "succeedMsg" , value = $msg)
        $weight =  DictionaryGet(dict = $taskDict, key = "weight")
        DictionarySet(dict = $value,  key = "weight" , value = $weight)
        ArrayAppend(array = @TASK_WEIGHT, value = $weight)
        ArrayAppend(array = @TASK_TABLE, value = $value)
        DictionarySet(dict = @failedMsg, key = $npcName, value = $msg)
        --
        $npcRy = DictionaryGet(dict = $taskDict, key = "npcRy")
        $nickName = DictionaryGet(dict = $targets, key = "name")
        $NPC = CreateNpc(cfgName = $npcName, pos = Copy(value = $pos), name = $nickName, ry = $npcRy)
        $taskKey = DictionaryGet( dict = $taskDict, key = "key")
        $NPC.taskKey = Concat(p1 = "myplugin/work/", p2 = $taskKey)
    }
    ForLoop(from=1, to = @CircleNum, key = "index"){
        $redict = GetConfigValue(type = "reward", fullName = "myplugin/task_money", key = $index)
        If(not $redict){
            Break()
        }
        $mdict = NewDictionary($redict)
        DictionarySet(dict = @worlkMoeny, key = DictionaryGet(dict = $mdict, key = "index"), value = $mdict)
    }
    $indentRy = GetConfigValue(type = "task", fullName = "myplugin/work", key = "indentRy")


    --涂鸦墙文字初始化
    $U3Dcfg = GetWorldVar(key = "sceneUI")
    Foreach(array = $U3Dcfg, key = "ucfg")
    {
        $dict = NewDictionary($ucfg)
        $index = DictionaryGet(dict = $dict, key = "index")
        @graffitiWallText = NewDictionary()
        DictionarySet(dict = @graffitiWallText, key = $index, value = "")
    }
    
    CallTrigger(event = "FUNC_NAVIGATION_GET_MAPS_ALL_PATH")

    CallTrigger(event = "FUNC_LOAD_WORKS_WALL_TOP")

    CreateNpc(cfgName = "myplugin/npc_indent_model", pos = Copy(value = @INDENT_POS)  ,name = "shoManager", ry = $indentRy)

}

FUNC_STATE_STARTTIMER
{
    ForLoop(from = 1, to = ArraySize(array = @Generate_State_List), key = "idx")
    {
        $stateBase = ArrayGet(array = @Generate_State_List, index = $idx)
        $keyStr = Concat(p1 = "myplugin/skill_state_", p2 = $stateBase)
        $timeInfo = GetSkillVar(fullName = $keyStr, key = "generateTime")

        $cdTime = ArrayGet(array = $timeInfo, index = 1)
        StartTimer(
            column = 1,
            rep = false,
            timeArr = $timeInfo,
            stateBase = $stateBase,
            time = ($cdTime * 1200) // 1,
            event = "FUNC_BROADCAST_STATE",
        )
    }
}

FUNC_BROADCAST_STATE
{
    Foreach(array = GetAllPlayers(), key = "player"){
        $inPartyOwnerId = $player.inPartyOwnerId
        If($inPartyOwnerId ~= 0){
            Continue()
        }
        SetObjectVar(obj = $player, value = 0, key = Concat(p1 = $stateBase, p2 = "RewardCount"))

        $skill = Concat(p1 = @skillPath, p2 = $stateBase)
        $generateType = GetSkillVar(
            fullName = $skill,
            key = "generateType"
        )
        If($generateType == "A" && GetObjectVar(obj = $player, key = Concat(p1 = "had", p2 = $stateBase)))
        {
            Continue()
        }
        
        If($generateType == "B" && GetObjectVar(obj = $player, key = Concat(p1 = $stateBase, p2 = "UsedTime")))
        {
            Continue()
        }

        CallTrigger(object = $player, event = "FUNC_STATE_GENERATE", stateBase = $stateBase, col = $column, skill = $skill)
	}

    $curTime = ArrayGet(array = $timeArr, index = $column)
    $column = $column + 1
    If($column > ArraySize(array = $timeArr))
    {
        $column = 1
    }
    $endTime = ArrayGet(array = $timeArr, index = $column)
    $cdTime = $endTime - $curTime
    If($cdTime <= 0)
    {
        $cdTime = 60 - $curTime + $endTime
    }

    StartTimer(
        rep = false, 
        event = $event,
        column = $column,
        timeArr = $timeArr,
        stateBase = $stateBase,
        time = ($cdTime * 1200) // 1
    )
}

SHOW_SELECT_ROLE
{
    $contents = [
        {
            normalImage = "set:select_role.json image:child",
            pushedImage = "set:select_role.json image:child",
            event = "CHANGE_PLAYER_SCALE_CHILD",
            text = "ui_pick_child"
        },
        {
            normalImage = "set:select_role.json image:adult",
            pushedImage = "set:select_role.json image:adult",
            event = "CHANGE_PLAYER_SCALE_ADULT",
            text = "ui_pick_adult"
        }
    ]
    
    $fullName = "myplugin/selectRoleView"

    ShowCardOptionsView(entity = $obj1, contents = $contents, fullName = $fullName, type = 2)
}

CHANGE_PLAYER_SCALE_ADULT
{
    If(not $obj1.checkSignIn){
        CheckSignInShow(player = $obj1)
        $obj1.checkSignIn = true
    }
    If($obj1.scaleBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.scaleBuff)
        $obj1.scaleBuff = nil
    }

    If($obj1.boundingBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.boundingBuff)
        $obj1.boundingBuff = nil
    }

    $obj1.scaleBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/scale_adult")
    $obj1.boundingBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/bounding_adult")
    $obj1.role = @adult

    If(IsPlayer(entity = $obj1))
    {
        UpdateUIData(player = $obj1, ui = "win_dressArchiveScale", data = 1)
    }
}

CHANGE_PLAYER_SCALE_CHILD
{
    If(not $obj1.checkSignIn){
        CheckSignInShow(player = $obj1)
        $obj1.checkSignIn = true
    }
    If($obj1.scaleBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.scaleBuff)
        $obj1.scaleBuff = nil
    }

    If($obj1.boundingBuff)
    {
         RemoveEntityBuff(entity = $obj1, buff = $obj1.boundingBuff)
         $obj1.boundingBuff = nil
    }

    $obj1.scaleBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/scale_child")
    $obj1.boundingBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/bounding_child")
    $obj1.role = @child
    
    If(IsPlayer(entity = $obj1))
    {
        UpdateUIData(player = $obj1, ui = "win_dressArchiveScale", data = 0.8)
    }
}

FUNC_CLOSE_GPS --params: destination
{
    $gpsDict = GetObjectVar(obj = $obj1, key = "gpsDict")
    If($gpsDict)
    {
        $dictDestination = DictionaryGet(dict = $gpsDict, key = "destination")
    }
    If(not $destination || $destination == $dictDestination)
    {
        SetGuidePostion(entity = $obj1)
        SetObjectVar(obj = $obj1, key = "gpsDict", value = nil)
    }
}

FUNC_OPEN_GPS --params: gpsDict
{
    SetGuidePostion(pos = $gps, entity = $obj1)
    SetObjectVar(obj = $obj1, key = "gpsDict", value = $gpsDict)
    ShowTip(entity = $obj1, tipType = 3, textKey = "openning_gps")
}

FUNC_CLOSE_PROGRESS_FOLLOW_OBJ --params: pgName
{
    If(not $pgName || $pgName == GetObjectVar(obj = $obj1, key = "progress"))
    {
        ShowProgressFollowObj(
            entity = $obj1,
            isOpen = false
        )
        SetObjectVar(obj = $obj1, key = "progress", value = nil)
    }
}

FUNC_CLOSE_DETAILS_UI --params: uiName
{
    If(not $uiName || $uiName == GetObjectVar(obj = $obj1, key = "detailsUI"))
    {
        ShowDetails(entity = $obj1, isOpen = false)
        SetObjectVar(obj = $obj1, key = "detailsUI", value = nil)
    }
}

FUNC_STOP_TIMER --params: timerStr
{
    $timer = GetObjectVar(obj = $obj1, key = $timerStr)
    If(not $timer)
    {
        Return()
    }
    StopTimer(timer = $timer)
    SetObjectVar(obj = $obj1, key = $timerStr, value = nil)
}

FUNC_REMOVE_BUFF --params: buffStr
{
    $hadBuff = GetObjectVar(obj = $obj1, key = $buffStr)
    If(not $hadBuff)
    {
        Return()
    }
    RemoveEntityBuff(entity = $obj1, buff = $hadBuff)
    SetObjectVar(obj = $obj1, key = $buffStr, value = nil)
}

FUNC_STATE_ADD_INTERACTLIST --params: entities
{
    Foreach(array = @Generate_State_List, key = "stateBase")
    {
        $listName = Concat(p1 = $stateBase, p2 = "InteractList")
        Foreach(array = $entities, key = "entity")
        {
            If(not IsPlayer(entity = $entity) || not GetObjectVar(obj = $entity, key = Concat(p1 = "had", p2 = $stateBase)))
            {
                Continue()
            }
            $interactList = GetObjectVar(obj = $entity, key = $listName) or []
            Foreach(array = $entities, key = "cp")
            {
                $cpID = GetObjectID(object = $cp)
                If($cp == $entity || not IsPlayer(entity = $cp) || ArrayFind(array = $interactList, value = $cpID))
                {
                    Continue()
                }
                ArrayAppend(array = $interactList, value = $cpID)
            }
            SetObjectVar(obj = $entity, key = $listName, value = $interactList)
        }
    }
}

WORKS_WALL_TIMER_START
{
    --StartTimer(rep = true, time = 100, event = "WORKS_WALL_UPDATE_NEW_WORKS")
    --StartTimer(rep = true, time = 100, event = "WORKS_WALL_UPDATE_EXCELLENT_WORKS")
    $worksWallConfig = GetWorldVar(key = "worksWalls")
    Foreach(array = $worksWallConfig, key = "data")
    {
        $dict = NewDictionary($data)
        $name = DictionaryGet(dict = $dict, key = "name")
        StartTimer(rep = true, time = 100, event = "WORKS_WALL_UPDATE", wallName = $name)
    }
}

PLAYER_PUBLISH_WORKS
{
    --$worksId
    $wallName = "curServerPublishWorks"

    If(not @worksWalls)
    {
       @worksWalls = {}
    }

    $dictValue = NewDictionary(@worksWalls)
    $worksList = DictionaryGet(dict = $dictValue, key = $wallName)
    If(not $worksList)
    {
       $worksList = {}
    }

    ArrayAppend(array= $worksList, value = {graffitiId = $worksId})
    DictionarySet(dict = $dictValue, key = $wallName, value = $worksList)
    @worksWalls = DictionaryToTable(dict = $dictValue)

    Foreach(array = GetAllPlayers(), key = "player")
    {
        UpdateUIData(player =$player, ui = $wallName, data = {graffitiId = $worksId})
    }
}

SET_WORKS_WALL_INDEX
{
    If(not @worksWallIndex)
    {
        @worksWallIndex = {}
    }
    $dictValue = NewDictionary(@worksWallIndex)
    DictionarySet(dict = $dictValue, key = $wallName, value = $wallIndex)
    @worksWallIndex = DictionaryToTable(dict = $dictValue)
}

UPDATE_WORKS_WALL_DATA
{
    If(not @worksWalls)
    {
        @worksWalls = {}
    }
    $dictValue = NewDictionary(@worksWalls)
    DictionarySet(dict = $dictValue, key = $wallName, value = $works)
    @worksWalls = DictionaryToTable(dict = $dictValue)
}

WORKS_WALL_UPDATE
{
    $worksList = {}
    $worksIndex = 0
    If(@worksWallIndex)
    {
        $dictValue = NewDictionary(@worksWallIndex)
        $worksIndex = DictionaryGet(dict = $dictValue, key = $wallName)
        If (not $worksIndex)
        {
            $worksIndex = 0
        }
    }

    If(@worksWalls)
    {
       $dictValue = NewDictionary(@worksWalls)
       $worksList = DictionaryGet(dict = $dictValue, key = $wallName)
       If(not $worksList)
       {
           $worksList = {}
       }
    }

    $index = 1
    $size = ArraySize(array = $worksList)
    Foreach(array = $worksList, key = "works")
    {
        If($worksIndex < $index || ($worksIndex == $size && $index == 1))
        {
            $worksIndex = $index
            CallTrigger(event = "SET_WORKS_WALL_INDEX", wallName = $wallName , wallIndex = $worksIndex)

            Foreach(array = GetAllPlayers(), key = "player")
            {
                If(GetEntityMapName(entity = $player) == "map001")
                {
                    UpdateUIData(player = $player, ui = $wallName, data = $works)
                }
            }
            Break()
        }
        $index = $index + 1
    }
}

FUNC_LOAD_NEW_WORKS { --获取最新作品
    $currentCount = 20
    $othersCount = 20
    $userIds = {}
    Foreach(array = GetAllPlayers(), key = "player")
    {
        $userId = GetPlayerUserID(player = $player)
        ArrayAppend(array = $userIds, value = $userId)
    }
    GetNewWorks(currentCount = $currentCount , othersCount = $othersCount, userIds = $userIds,  event = "LOAD_NEW_WORKS_RESPONSE" )
}

LOAD_NEW_WORKS_RESPONSE {
    $info = {}
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    If($code == 1)
    {
        $info = DictionaryGet(dict = $dictValue, key = "data")
    }

    Foreach(array = GetAllPlayers(), key = "player")
    {
        UpdateUIData(player =$player, ui = "works_appreciate", data = $info)
    }

    CallTrigger(event = "UPDATE_WORKS_WALL_DATA", wallName = "newWorksWall", works = $info)
    @newWorks = $info
}

FUNC_LOAD_EXCELLENT_WORKS {--获取优秀作品
    $count = 180
    $praiseNum = 100
    GetExcellentWorks(count = $count, limit = -1, event = "FUNC_LOAD_EXCELLENT_RESPONSE" )
}

FUNC_LOAD_EXCELLENT_RESPONSE {
    $info = {}
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    If($code == 1)
    {
        $info = DictionaryGet(dict = $dictValue, key = "data")
    }

    Foreach(array = GetAllPlayers(), key = "player")
    {
        UpdateUIData(player =$player, ui = "works_excellent", data = $info)
    }

    CallTrigger(event = "UPDATE_WORKS_WALL_DATA", wallName = "excellentWorksWall", works = $info)
}


FUNC_LOAD_WORKS_WALL_TOP {--获取上周前10名
    $count = 10
    GetTopWorks(count = $count, event = "FUNC_LOAD_WORKS_WALL_TOP_RESPONSE" )
}

FUNC_LOAD_WORKS_WALL_TOP_RESPONSE {
    $info = {}
    $dictValue = NewDictionary($response)
    $code = DictionaryGet(dict = $dictValue, key = "code")
    If($code == 1)
    {
        $info = DictionaryGet(dict = $dictValue, key = "data")
    }

    Foreach(array = GetAllPlayers(), key = "player")
    {
        UpdateUIData(player =$player, ui = "topWorksWall", data = $info)
    }

    CallTrigger(event = "UPDATE_WORKS_WALL_DATA", wallName = "topWorksWall", works = $info)
}


ENTITY_RIDE_OFF {
    If(not IsPlayer(entity = $obj2)){ Return() }
    RecheckObjectInteractionUI(player = $obj2, target = $obj1)
    CallTrigger(object = $obj2, event = "FUNC_STATE_RIDEON", ride = $obj1, isCancel = true)

    If(not IsPlayer(entity = $obj1)){ Return() }
    RecheckObjectInteractionUI(player = $obj1, target = $obj2)
}
ENTITY_RIDE_ON {
    If(not IsPlayer(entity = $obj2)){ Return() }
    UpdateObjectInteractionUI(player = $obj2, target = $obj1, show = false)
    CallTrigger(object = $obj2, event = "FUNC_STATE_RIDEON", ride = $obj1)

    If(not IsPlayer(entity = $obj1)){ Return() }
    UpdateObjectInteractionUI(player = $obj1, target = $obj2, show = false)
    CallTrigger(event = "FUNC_STATE_ADD_INTERACTLIST", entities = [$obj1, $obj2])
}
REMOVE_ILL_BUFF
{
    -- CallTrigger(object = $obj1, event = "FUNC_REMOVE_BUFF", buffStr = "illEffect")
    CallTrigger(object = $obj1, event = "FUNC_STATE_RELEASE", state = "ill", duration = 0)
}

FUNC_NAVIGATION_GET_MAPS_ALL_PATH
{
    CallTrigger(event = "FUNC_NAVIGATION_SET_MAP_ADJACENCY_MATRIX")

    ForLoop(from = 1, to = ArraySize(array = @allMaps or []), key = "index")
    {
        $mapA = ArrayGet(array = @allMaps, index = $index)
        $curMapToOther = Concat(p1 = $mapA, p2 = "ToOther")

        CallTrigger(
            event = "FUNC_NAVIGATION_DIJKSTRA",
            startIdx = $index,
            type = "global",
            matrix = GetGlobalVar(key = "mapAdjacencyMatrix"),
            saveName = $curMapToOther
        )

        ForLoop(from = 1, to = ArraySize(array = @allMaps), key = "idx")
        {
            If($idx == $index)
            {
                Continue()
            }

            $mapB = ArrayGet(array = @allMaps, index = $idx)
            $mapATomapB = Concat(p1 = $mapA, p2 = "To", p3 = $mapB)
            CallTrigger(
                event = "FUNC_NAVIGATION_GET_PATH",
                allPath = GetGlobalVar(key = $curMapToOther),
                endIdx = $idx,
                type = "global",
                saveName = $mapATomapB
            )

            $mapATomapBDWs = Concat(p1 = $mapATomapB, p2 = "DWs")
            CallTrigger(
                event = "FUNC_NAVIGATION_GET_DOORWAY_LIST",
                mapS = $mapA,
                mapE = $mapB,
                type = "global",
                saveName = $mapATomapBDWs
            )
        }
    }
}

FUNC_NAVIGATION_SET_MAP_ADJACENCY_MATRIX
{
    $needDJ = []
    $mapModel = []
    ForLoop(from = 1, to = ArraySize(array = @allMaps or []), key = "index")
    {
        $colMap = ArrayGet(array = @allMaps, index = $index)
        $mapEntry = NewDictionary(GetMapConfig(name = $colMap, key = "mapEntry"))
        $curMapModel = []
        $curNeedDJ = []

        ForLoop(from = 1, to = ArraySize(array = @allMaps), key = "idx")
        {
            $map = ArrayGet(array = @allMaps, index = $idx)
            $rowMap = DictionaryGet(dict = $mapEntry, key = $map)
            $size = ArraySize(array = $rowMap or [])
            $value = $size == 0 and @mathHuge or 1
            If($idx == $index)
            {
                $value = 0
            }
            ArrayInsert(array = $curMapModel, index = $idx, value = $value)

            --用来在跨地图寻路时判断是否还需要用Dijkstra，如果地图A到地图B只有一扇门，也就不存在什么最短路了。
            ArrayInsert(array = $curNeedDJ, index = $idx, value = ($size > 1 and true or false))
        }

        ArrayInsert(array = $needDJ, index = $index, value = $curNeedDJ)
        ArrayInsert(array = $mapModel, index = $index, value = $curMapModel)
    }
    SetGlobalVar(key = "mapMatrixNeedDijkstra", value = $needDJ)
    SetGlobalVar(key = "mapAdjacencyMatrix", value = $mapModel)
}

FUNC_NAVIGATION_DIJKSTRA --params: startIdx(开始的索引), matrix[, mapS(开始的地图名), saveName, type = "global"/"entity"]
{
    ---如果是查找地图A开始的最短路，可以使用mapS或者startIdx
    ---注！但如果是查找途径门X开始的最短路，必须使用startIdx，固定传1就行，因为设置的doorways的邻接矩阵时是固定将player插入index=1的位置。

    $startIdx = $startIdx or ArrayFind(array = @allMaps or [], value = $mapS)
    If(not $startIdx)
    {
        Return()
    }
    $rowInfo = ArrayGet(array = $matrix, index = $startIdx)
    If(not $rowInfo)
    {
        Return()
    }
    $dis = []
    $vis = []
    $path = []
    $rowNum = ArraySize(array = $matrix)
    ForLoop(from = 1, to = $rowNum, key = "index")
    {
        ArraySet(array = $vis, value = false, index = $index)
        ArraySet(
            array = $dis,
            index = $index,
            value = ArrayGet(array = $rowInfo, index = $index)
        )
        $ttDis = ArrayGet(array = $rowInfo, index = $index)
        ArraySet(array = $path, index = $index, value = $ttDis < @mathHuge and $startIdx or -1)
    }
    ArraySet(array = $vis, index = $startIdx, value = true)
    ArraySet(array = $path, index = $startIdx, value = -1)

    $tmpIdx = 0
    ForLoop(from = 1, to = $rowNum, key = "index")
    {
        $min = @mathHuge
        ForLoop(from = 1, to = $rowNum, key = "idx")
        {
            $tmpVis = ArrayGet(array = $vis, index = $idx)
            $tmpDis = ArrayGet(array = $dis, index = $idx)
            If(not $tmpVis && $tmpDis < $min)
            {
                $min = $tmpDis
                $tmpIdx = $idx
            }
        }
        -- If($tmpIdx == 0)
        -- {
        --     Continue()
        -- }
        ArraySet(array = $vis, index = $tmpIdx, value = true)

        $tmpInfo = ArrayGet(array = $matrix, index = $tmpIdx)
        $midDis = ArrayGet(array = $dis, index = $tmpIdx)
        ForLoop(from = 1, to = $rowNum, key = "idx")
        {
            $tmpVis = ArrayGet(array = $vis, index = $idx)
            $oldDis = ArrayGet(array = $dis, index = $idx)
            $calMapDisToIdx = ArrayGet(array = $tmpInfo, index = $idx)
            If(not $tmpVis && ($oldDis > $midDis + $calMapDisToIdx))
            {
                ArraySet(
                    array = $dis,
                    index = $idx,
                    value = $midDis + $calMapDisToIdx
                )
                ArraySet(array = $path, index = $idx, value = $tmpIdx)
            }
        }
    }

    If($saveName && $saveName ~= "")
    {
        $disKey = Concat(p1 = $saveName, p2 = "Dis")
        If($type == "global")
        {
            SetGlobalVar(key = $saveName, value = $path)
            SetGlobalVar(key = $disKey, value = $dis)
        }
        ElseIf($obj1)
        {
            SetObjectVar(obj = $obj1, key = $saveName, value = $path)
            SetObjectVar(obj = $obj1, key = $disKey, value = $dis)
        }
    }
}

FUNC_NAVIGATION_GET_PATH --allPath, endIdx[, mapE(结束的地图名称), saveName, type = "global"/"entity"]
{
    ---需要分开是获取地图路径 还是 获取途径门的路径。
    ---如果是获取跨越的地图路径话，推荐使用mapE
    ---注意如果是获取途径门的路径，必须传入endIdx

    $idx = 1
    $path = []
    $allPathSize = ArraySize(array = $allPath or [])
    $endIdx = $endIdx or ArrayFind(array = @allMaps or [], value = $mapE)
    If(not $endIdx || $allPathSize == 0)
    {
        Return()
    }
    $val = ArrayGet(array = $allPath, index = $endIdx)
    ArrayInsert(array = $path, index = 1, value = $endIdx)
    ForLoop(from = 1, to = $allPathSize, key = "index")
    {
        If($val == -1)
        {
            Break()
        }
        ArrayInsert(array = $path, index = 1, value = $val)
        $idx = $idx + 1
        $val = ArrayGet(array = $allPath, index = $val)
    }

    If($saveName && $saveName ~= "")
    {
        If($type == "global")
        {
            SetGlobalVar(key = $saveName, value = $path)
        }
        ElseIf($obj1)
        {
            SetObjectVar(obj = $obj1, key = $saveName, value = $path)
        }
    }
}

FUNC_NAVIGATION_GET_DOORWAY_LIST --params: mapS(玩家当前所在地图名), mapE(目标所在地图名)[, saveName, type = "global"/"entity"]
{
    $mapPath = GetGlobalVar(key = Concat(p1 = $mapS, p2 = "To", p3 = $mapE))
    If(not $mapPath)
    {
        Return()
    }
    
    $i = 1
    $allDWs = [] -- all doorways
    $mapPathSize = ArraySize(array = $mapPath)
    
    ForLoop(from = 1, to = $mapPathSize, key = "index")
    {
        $idx = $index + 1
        If($idx > $mapPathSize)
        {
            Break()
        }
        $nextMap = ArrayGet(array = @allMaps, index = ArrayGet(array = $mapPath, index = $idx))
        $mapEntryDict = NewDictionary(GetMapConfig(name = $mapS, key = "mapEntry"))
        $mapEntryArr = DictionaryGet(dict = $mapEntryDict, key = $nextMap)
        $mapS = $nextMap

        Foreach(array = $mapEntryArr, key = "entry")
        {
            ArraySet(array = $allDWs, index = $i, value = $entry)
            $i = $i + 1
        }
    }

    If($saveName && $saveName ~= "")
    {
        If($type == "global")
        {
            SetGlobalVar(key = $saveName, value = $allDWs)
        }
        ElseIf($obj1)
        {
            SetObjectVar(obj = $obj1, key = $saveName, value = $allDWs)
        }
    }
}
