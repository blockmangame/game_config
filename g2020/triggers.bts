GAME_INIT
{
    @Generate_State_List = ["hunger", "thirsty", "dirty", "fatigue", "ill", "region"]
    CallTrigger(event = "FUNC_GENERATE_STATE_STARTTIME")
}


FUNC_GENERATE_STATE_STARTTIME
{
    ForLoop(from = 1, to = ArraySize(array = @Generate_State_List), key = "idx")
    {
        $stateBase = ArrayGet(array = @Generate_State_List, index = $idx)
        $keyStr = Concat(p1 = "myplugin/skill_state_", p2 = $stateBase)
        $timeInfo = GetSkillVar(fullName = $keyStr, key = "generateTime")

        $cdTime = ArrayGet(array = $timeInfo, index = 1)
        StartTimer(
            column = 1,
            rep = false,
            timeArr = $timeInfo,
            stateBase = $stateBase,
            time = ($cdTime * 1200) // 1,
            event = "FUNC_CHANGE_STATE",
            size = ArraySize(array = $timeInfo),
        )
    }
}

FUNC_CHANGE_STATE
{
    Foreach(array = GetAllPlayers(), key = "player"){
        --TODO 完善状态的生成
        --If(player in party)
        --{
        --    Continue()
        --}
        SetObjectVar(obj = $player, value = 0, key = Concat(p1 = $stateBase, p2 = "RewardCount"))

        $hadState = Concat(p1 = "is", p2 = $stateBase)
        
        If($stateBase == "region" && not GetObjectVar(obj = $player, key = Concat(p1 = $stateBase, p2 = "UsedTime")))
        {
            SetObjectVar(obj = $player, key = "regionIdx", value = $column)
        }
        ElseIf(GetObjectVar(obj = $player, key =$hadState))
        {
            Continue()
        }

        CallTrigger(object = $player, event = "FUNC_GENERATE_STATE", stateBase = $stateBase)
	}

    $curTime = ArrayGet(array = $timeArr, index = $column)
    $column = $column + 1
    If($column > $size)
    {
        $column = 1
    }
    $endTime = ArrayGet(array = $timeArr, index = $column)
    $cdTime = $endTime - $curTime
    If($cdTime <= 0)
    {
        $cdTime = 60 - $curTime + $endTime
    }

    StartTimer(
        rep = false, 
        size = $size,
        event = $event,
        column = $column,
        timeArr = $timeArr,
        stateBase = $stateBase,
        time = ($cdTime * 1200) // 1
    )
}

SHOW_SELECT_ROLE
{
    $contents = [
        {
            normalImage = "set:select_role.json image:child",
            pushedImage = "set:select_role.json image:child",
            name = "child",
            event = "CHANGE_PLAYER_SCALE_CHILD",
            text = "ui_pick_child"
        },
        {
            normalImage = "set:select_role.json image:adult",
            pushedImage = "set:select_role.json image:adult",
            name = "adult",
            event = "CHANGE_PLAYER_SCALE_ADULT",
            text = "ui_pick_adult"
        }
    ]
    
    $fullName = "myplugin/selectRoleView"

    ShowCardOptionsView(entity = $obj1, contents = $contents, fullName = $fullName)
}


REQUEST_JOIN_FAMILY_YES
{
    If(not $obj1.requestFamilyPlayer)
    {
        Return()
    }

    $teamID = GetEntityTeam(entity = $obj1)
    If(not $teamID or $teamID == 0)
    {
        Return()
    }

    $playerCount = GetTeamInfo(teamId = $teamID, key = "playerCount")
    If(not $playerCount or $playerCount >= 4)
    {
        Return()
    }

    SetEntityTeam(entity = $obj1.requestFamilyPlayer, teamId = $teamID)
    ShowTip(entity = $obj1.requestFamilyPlayer, tipType = 2,textKey = "You Are In Family", time = 40)
    $obj1.requestFamilyPlayer = nil
}

REQUEST_JOIN_FAMILY_NO
{
    If($obj1.requestFamilyPlayer)
    {
        ShowTip(entity = $obj1.requestFamilyPlayer, tipType = 2,textKey = "Sorry, I Can't Accept You Request.", time = 40)
    }

    $obj1.requestFamilyPlayer = nil
}

INVITE_JOIN_FAMILY_YES
{
    If(not $obj1.inviteFamilyPlayer)
    {
        Return()
    }

    $teamID = GetEntityTeam(entity = $obj1.inviteFamilyPlayer)
    If(not $teamID or $teamID == 0)
    {
        Return()
    }

    $playerCount = GetTeamInfo(teamId = $teamID, key = "playerCount")
    If(not $playerCount or $playerCount >= 4)
    {
        Return()
    }

    SetEntityTeam(entity = $obj1, teamId = $teamID)
    ShowTip(entity = $obj1, tipType = 2,textKey = "You Are In Family", time = 40)
    $obj1.inviteFamilyPlayer = nil
}

INVITE_JOIN_FAMILY_NO
{
    If($obj1.inviteFamilyPlayer)
    {
        ShowTip(entity = $obj1.inviteFamilyPlayer, tipType = 2,textKey = "Sorry, I Don't Want Join Family.", time = 40)
    }

    $obj1.inviteFamilyPlayer = nil
}

CHANGE_PLAYER_SCALE_ADULT
{
    If($obj1.scaleBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.scaleBuff)
        $obj1.scaleBuff = nil
    }

    If($obj1.boundingBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.boundingBuff)
        $obj1.boundingBuff = nil
    }

    $obj1.scaleBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/scale_adult")
    $obj1.boundingBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/bounding_adult")
    $obj1.role = @adult
}

CHANGE_PLAYER_SCALE_CHILD
{
    If($obj1.scaleBuff)
    {
        RemoveEntityBuff(entity = $obj1, buff = $obj1.scaleBuff)
        $obj1.scaleBuff = nil
    }

    If($obj1.boundingBuff)
    {
         RemoveEntityBuff(entity = $obj1, buff = $obj1.boundingBuff)
         $obj1.boundingBuff = nil
    }

    $obj1.scaleBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/scale_child")
    $obj1.boundingBuff = AddEntityBuff(entity = $obj1, cfg = "myplugin/bounding_child")
    $obj1.role = @child
}

FUNC_CLOSE_GPS --params: destination
{
    If(not $destination || $gps == GetObjectVar(obj = $obj1, key = "gpsDestination"))
    {
        SetGuidePostion(entity = $obj1)
        RemoveSkill(entity = $obj1, name = "myplugin/close_gps")
        SetObjectVar(obj = $obj1, key = "gpsDestination", value = nil)
    }
}

FUNC_OPEN_GPS --params: destination
{
    SetGuidePostion(pos = $pos, entity = $obj1)
    AddSkill(entity = $obj1, name = "myplugin/close_gps")
    SetObjectVar(obj = $obj1, key = "gpsDestination", value = $destination)
    ShowTip(entity = $obj1, tipType = 3, textKey = "openning_gps")
}

FUNC_SHOW_PROGRESS_FOLLOW_OBJ --params: pgName, totalTime, usedTime
{
    ShowProgressFollowObj(
        isOpen = true,
        pgName = $pgName,
        entity = $obj1,
        totalTime = $totalTime * 20,
        usedTime = $usedTime * 20,
    )
    SetObjectVar(obj = $obj1, key = "progress", value = $pgName)
}

FUNC_CLOSE_PROGRESS_FOLLOW_OBJ --params: pgName
{
    If(not $pgName || $pgName == GetObjectVar(obj = $obj1, key = "progress"))
    {
        ShowProgressFollowObj(
            entity = $obj1,
            isOpen = false
        )
        SetObjectVar(obj = $obj1, key = "progress", value = nil)
    }
}

FUNC_SHOW_DETAILS_UI --params: fullName, contents, uiName
{
    ShowDetails(
        entity = $obj1,
        fullName = $fullName,
        isOpen = true,
        contents = $contents
    )
    SetObjectVar(obj = $obj1, key = "detailsUI", value = $uiName)
}

FUNC_CLOSE_DETAILS_UI --params: uiName
{
    If(not $uiName || $uiName == GetObjectVar(obj = $obj1, key = "detailsUI"))
    {
        ShowDetails(entity = $obj1, isOpen = false)
        SetObjectVar(obj = $obj1, key = "detailsUI", value = nil)
    }
}